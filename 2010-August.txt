From zaimoni at mail.berlios.de  Mon Aug  2 10:54:44 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Mon,  2 Aug 2010 10:54:44 +0200
Subject: [Zcplusplus-commits] r474 - trunk
Message-ID: <20100802085444.881EC480EE5@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-02 10:54:44 +0200 (Mon, 02 Aug 2010)
New Revision: 474

Modified:
   trunk/CSupport.cpp
Log:
restructure handling of forward declarations for efficiency

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-07-29 19:56:29 UTC (rev 473)
+++ trunk/CSupport.cpp	2010-08-02 08:54:44 UTC (rev 474)
@@ -13075,13 +13075,61 @@
 		// check naked declarations first
 		if (is_C99_named_specifier(src.data<0>()[i],"union"))
 			{
-			type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
-			src.c_array<0>()[i].type_code.set_type(tmp);
+			const type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here (C99 6.7.2.3)
+					//! \bug C1X 6.7.3p3 indicates const/volatile qualification of a forward-declaration is meaningless, so warn
+					//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				if (tmp)
+					{	// but if already (forward-)declared then this is a no-op
+						// think this is common enough to not warrant OAOO/DRY treatment
+					//! \test zcc/decl.C99/Pass_union_forward_def.h
+					// remove from parse
+					src.DeleteNSlotsAt<0>(2,i);
+					continue;					
+					}
+				// forward-declare
+				//! \test zcc/decl.C99/Pass_union_forward_def.h
+				const type_system::type_index tmp2 = types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_union);
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				i += 2;
+				continue;
+				}
+			else
+				src.c_array<0>()[i].type_code.set_type(tmp);
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 			{
-			type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
-			src.c_array<0>()[i].type_code.set_type(tmp);
+			const type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here (C99 6.7.2.3)
+					//! \bug C1X 6.7.3p3 indicates const/volatile qualification of a forward-declaration is meaningless
+					//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				if (tmp)
+					{	// but if already (forward-)declared then this is a no-op
+						// think this is common enough to not warrant OAOO/DRY treatment
+					//! \test zcc/decl.C99/Pass_struct_forward_def.h
+					// remove from parse
+					src.DeleteNSlotsAt<0>(2,i);
+					continue;					
+					}
+				// forward-declare
+				//! \test zcc/decl.C99/Pass_struct_forward_def.h
+				const type_system::type_index tmp2 = types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_struct);
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				i += 2;
+				continue;
+				}
+			else
+				src.c_array<0>()[i].type_code.set_type(tmp);
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 			{	// can only define once
@@ -13209,46 +13257,12 @@
 				src.DeleteNSlotsAt<0>(2,i);
 				continue;
 				}
-			else if (is_C99_named_specifier(src.data<0>()[i],"union"))
-				{	// forward-declare, fine
-				if (types.get_id_union(src.data<0>()[i].index_tokens[1].token.first))
-					{	// but if already (forward-)declared then this is a no-op
-						// think this is common enough to not warrant OAOO/DRY treatment
-					//! \test zcc/decl.C99/Pass_union_forward_def.h
-					// remove from parse
-					src.DeleteNSlotsAt<0>(2,i);
-					continue;					
-					}
-				// forward-declare
-				//! \test zcc/decl.C99/Pass_union_forward_def.h
-				const type_system::type_index tmp2 = types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_union);
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
-				i += 2;
-				continue;
-				}
-			else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
-				{	// forward-declare, fine
-				if (types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first))
-					{	// but if already (forward-)declared then this is a no-op
-						// think this is common enough to not warrant OAOO/DRY treatment
-					//! \test zcc/decl.C99/Pass_struct_forward_def.h
-					// remove from parse
-					src.DeleteNSlotsAt<0>(2,i);
-					continue;					
-					}
-				// forward-declare
-				//! \test zcc/decl.C99/Pass_struct_forward_def.h
-				const type_system::type_index tmp2 = types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_struct);
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
-				i += 2;
-				continue;
-				}
+/*			else if (is_C99_named_specifier(src.data<0>()[i],"union"))
+				{	// forward-declaration already handled
+				} */
+/*			else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
+				{	// forward-declaration already handled
+				}	*/
 			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 				{	// definitions...fine
 				const type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
@@ -13657,18 +13671,87 @@
 		//! \bug indentation fixup needed (stage 3)
 		if (is_C99_named_specifier(src.data<0>()[i],"union"))
 			{
-			type_system::type_index tmp = types.get_id_union_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
-			src.c_array<0>()[i].type_code.set_type(tmp);
+			const type_system::type_index tmp = types.get_id_union_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here
+					//! \bug C++0X 7.1.6.1p1 : const, volatile is an error here 
+				if (tmp)
+					{	// but if already (forward-)declared then this is a no-op
+						// think this is common enough to not warrant OAOO/DRY treatment
+					//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+					// remove from parse
+					src.DeleteNSlotsAt<0>(2,i);
+					continue;					
+					}
+				// forward-declare
+				//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_union);
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				i += 2;
+				continue;
+				}
+			else
+				src.c_array<0>()[i].type_code.set_type(tmp);
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 			{
-			type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
-			src.c_array<0>()[i].type_code.set_type(tmp);
+			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here
+					//! \bug C++0X 7.1.6.1p1 : const, volatile is an error here
+				if (tmp)
+					{	// but if already (forward-)declared then this is a no-op
+						// think this is common enough to not warrant OAOO/DRY treatment
+					//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
+					// remove from parse
+					src.DeleteNSlotsAt<0>(2,i);
+					continue;					
+					}
+				// forward-declare
+				//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
+				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_struct);
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				i += 2;
+				continue;
+				}
+			else
+				src.c_array<0>()[i].type_code.set_type(tmp);
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"class"))
 			{
-			type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
-			src.c_array<0>()[i].type_code.set_type(tmp);
+			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here
+					//! \bug C++0X 7.1.6.1p1 : const, volatile is an error here
+				if (tmp)
+					{	// but if already (forward-)declared then this is a no-op
+						// think this is common enough to not warrant OAOO/DRY treatment
+					//! \test zcc/decl.C99/Pass_class_forward_def.hpp
+					// remove from parse
+					src.DeleteNSlotsAt<0>(2,i);
+					continue;					
+					}
+				// forward-declare
+				//! \test zcc/decl.C99/Pass_class_forward_def.hpp
+				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_class);
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				i += 2;
+				continue;
+				}
+			else
+				src.c_array<0>()[i].type_code.set_type(tmp);
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 			{	// can only define once
@@ -13847,81 +13930,15 @@
 				src.DeleteNSlotsAt<0>(2,i);
 				continue;
 				}
-			else if (is_C99_named_specifier(src.data<0>()[i],"union"))
-				{	// forward-declare, fine
-				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-				const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-				if (types.get_id_union(fullname))
-					{	// but if already (forward-)declared then this is a no-op
-						// think this is common enough to not warrant OAOO/DRY treatment
-					//! \test zcc/decl.C99/Pass_union_forward_def.hpp
-					// remove from parse
-					free(namespace_name);
-					src.DeleteNSlotsAt<0>(2,i);
-					continue;					
-					}
-				free(namespace_name);
-				// forward-declare
-				//! \test zcc/decl.C99/Pass_union_forward_def.hpp
-				//! \todo fix up fully-qualified name
-				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_union);
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
-				i += 2;
-				continue;
-				}
-			else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
-				{	// forward-declare, fine
-				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-				const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-				if (types.get_id_struct_class(fullname))
-					{	// but if already (forward-)declared then this is a no-op
-						// think this is common enough to not warrant OAOO/DRY treatment
-					//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
-					// remove from parse
-					free(namespace_name);
-					src.DeleteNSlotsAt<0>(2,i);
-					continue;					
-					}
-				free(namespace_name);
-				// forward-declare
-				//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
-				//! \todo fix up fully-qualified name
-				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_struct);
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
-				i += 2;
-				continue;
-				}
-			else if (is_C99_named_specifier(src.data<0>()[i],"class"))
-				{	// forward-declare, fine
-				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-				const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-				if (types.get_id_struct_class(fullname))
-					{	// but if already (forward-)declared then this is a no-op
-						// think this is common enough to not warrant OAOO/DRY treatment
-					//! \test zcc/decl.C99/Pass_class_forward_def.hpp
-					// remove from parse
-					free(namespace_name);
-					src.DeleteNSlotsAt<0>(2,i);
-					continue;					
-					}
-				free(namespace_name);
-				// forward-declare
-				//! \test zcc/decl.C99/Pass_class_forward_def.hpp
-				//! \todo fix up fully-qualified name
-				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_class);
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
-				i += 2;
-				continue;
-				}
+/*			else if (is_C99_named_specifier(src.data<0>()[i],"union"))
+				{	// forward-declaration already handled
+				}	*/
+/*			else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
+				{	// forward-declaration already handled
+				}	*/
+/*			else if (is_C99_named_specifier(src.data<0>()[i],"class"))
+				{	// forward-declaration already handled
+				} */
 			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 				{	// definitions...fine
 				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;



From zaimoni at mail.berlios.de  Tue Aug 10 08:06:08 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Tue, 10 Aug 2010 08:06:08 +0200
Subject: [Zcplusplus-commits] r475 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100810060609.0F0144802F3@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-10 08:06:08 +0200 (Tue, 10 Aug 2010)
New Revision: 475

Added:
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const2.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const3.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const4.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile10.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile11.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile2.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile3.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile4.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile5.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile7.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile9.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile2.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile3.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile4.h
Modified:
   trunk/CSupport.cpp
Log:
theoretical-fix a few asserts that would have fired.  Implement C warning for useless const/volatile on forward-declaration of unions.

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-02 08:54:44 UTC (rev 474)
+++ trunk/CSupport.cpp	2010-08-10 06:06:08 UTC (rev 475)
@@ -3180,6 +3180,7 @@
 /* strict type categories of parsing */
 #define PARSE_PRIMARY_TYPE ((lex_flags)(1)<<(sizeof(lex_flags)*CHAR_BIT-19))
 #define PARSE_UNION_TYPE ((lex_flags)(1)<<(sizeof(lex_flags)*CHAR_BIT-20))
+#define PARSE_CLASS_STRUCT_TYPE ((lex_flags)(1)<<(sizeof(lex_flags)*CHAR_BIT-21))
 
 // check for collision with lowest three bits
 BOOST_STATIC_ASSERT(sizeof(lex_flags)*CHAR_BIT-parse_tree::PREDEFINED_STRICT_UB>=20);
@@ -3204,7 +3205,7 @@
 #define PARSE_EXPRESSION (PARSE_PRIMARY_EXPRESSION | PARSE_STRICT_POSTFIX_EXPRESSION | PARSE_STRICT_UNARY_EXPRESSION | PARSE_STRICT_CAST_EXPRESSION | PARSE_STRICT_PM_EXPRESSION | PARSE_STRICT_MULT_EXPRESSION | PARSE_STRICT_ADD_EXPRESSION | PARSE_STRICT_SHIFT_EXPRESSION | PARSE_STRICT_RELATIONAL_EXPRESSION | PARSE_STRICT_EQUALITY_EXPRESSION | PARSE_STRICT_BITAND_EXPRESSION | PARSE_STRICT_BITXOR_EXPRESSION | PARSE_STRICT_BITOR_EXPRESSION | PARSE_STRICT_LOGICAND_EXPRESSION | PARSE_STRICT_LOGICOR_EXPRESSION | PARSE_STRICT_CONDITIONAL_EXPRESSION | PARSE_STRICT_ASSIGNMENT_EXPRESSION | PARSE_STRICT_COMMA_EXPRESSION)
 
 /* nonstrict type categories */
-#define PARSE_TYPE (PARSE_PRIMARY_TYPE | PARSE_UNION_TYPE)
+#define PARSE_TYPE (PARSE_PRIMARY_TYPE | PARSE_UNION_TYPE | PARSE_CLASS_STRUCT_TYPE)
 
 /* already-parsed */
 #define PARSE_OBVIOUS (PARSE_EXPRESSION | PARSE_TYPE | parse_tree::INVALID)
@@ -4600,6 +4601,13 @@
 			src.DestroyNAtAndRotateTo<0>(1,i+1,src.size<0>()-offset);
 			offset += 1;
 			assert(is_C99_named_specifier(src.data<0>()[i],tmp2));
+			// parser is having normal-form issues.  Shove named specifiers ahead of any const/volatile type qualifiers
+			size_t j = i;
+			while(0<j && (robust_token_is_string<5>(src.data<0>()[j-1],"const") || robust_token_is_string<8>(src.data<0>()[j-1],"volatile")))
+				{
+				std::swap(src.c_array<0>()[j],src.c_array<0>()[j-1]);
+				--j;
+				};
 			continue;
 			}
 		++i;
@@ -12017,7 +12025,7 @@
 					}
 				target_type.q_vector.back() |= type_spec::_const;
 				}
-			else if (robust_token_is_string<5>(x.data<0>()[i+ub],"volatile"))
+			else if (robust_token_is_string<8>(x.data<0>()[i+ub],"volatile"))
 				{	//! \bug need test cases
 				if (target_type.q_vector.back() & type_spec::_volatile)
 					{
@@ -12028,7 +12036,7 @@
 					}
 				target_type.q_vector.back() |= type_spec::_volatile;
 				}
-			else if (robust_token_is_string<5>(x.data<0>()[i+ub],"restrict"))
+			else if (robust_token_is_string<8>(x.data<0>()[i+ub],"restrict"))
 				{	//! \bug need test cases
 				if (target_type.q_vector.back() & type_spec::_restrict)
 					{
@@ -12195,7 +12203,7 @@
 					}
 				target_type.q_vector.back() |= type_spec::_const;
 				}
-			else if (robust_token_is_string<5>(x.data<0>()[i+ub],"volatile"))
+			else if (robust_token_is_string<8>(x.data<0>()[i+ub],"volatile"))
 				{	//! \bug need test cases
 				if (target_type.q_vector.back() & type_spec::_volatile)
 					{
@@ -13061,6 +13069,7 @@
 	// note that typedefs and struct/union declarations/definitions create new types; if this happens we are no longer context-free (so second pass with context-based parsing)
 	// ask GCC: struct/class/union/enum collides with each other (both C and C++), does not collide with namespace
 	// think we can handle this as "disallow conflicting definitions"
+	kleene_star<STATIC_SIZE(C99_nontype_decl_specifier_list)+1,size_t (*)(const parse_tree&)> invariant_decl_scanner(C99_type_or_invariant_decl_specifier);
 	size_t i = 0;
 	while(i<src.size<0>())
 		{
@@ -13076,11 +13085,60 @@
 		if (is_C99_named_specifier(src.data<0>()[i],"union"))
 			{
 			const type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
+			if (tmp)
+				{
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			//! \bug C1X 6.7.2.3p2 states that conflicting enum or struct must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_union);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_union_forward_def.h
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			assert(tmp || tmp2);
 			if (   1<src.size<0>()-i
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here (C99 6.7.2.3)
-					//! \bug C1X 6.7.3p3 indicates const/volatile qualification of a forward-declaration is meaningless, so warn
-					//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \test decl.C99/Warn_union_forward_def_const1.h
+						//! \test decl.C99/Warn_union_forward_def_const2.h
+						//! \test decl.C99/Warn_union_forward_def_const3.h
+						//! \test decl.C99/Warn_union_forward_def_const4.h
+						//! \test decl.C99/Warn_union_forward_def_volatile1.h
+						//! \test decl.C99/Warn_union_forward_def_volatile2.h
+						//! \test decl.C99/Warn_union_forward_def_volatile3.h
+						//! \test decl.C99/Warn_union_forward_def_volatile4.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile1.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile2.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile3.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile4.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile5.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile6.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile7.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile8.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile9.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile10.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile11.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile12.h
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(WARN_STR);
+					INFORM("useless const/volatile qualification of a forward-declaration (C99 6.7.3p3)");
+					if (bool_options[boolopt::warn_crosslang_compatibility])
+						INFORM("(error in C++: C++0X 7.1.6.1p1)");
+					if (bool_options[boolopt::warnings_are_errors])
+						zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					};
 				if (tmp)
 					{	// but if already (forward-)declared then this is a no-op
 						// think this is common enough to not warrant OAOO/DRY treatment
@@ -13091,25 +13149,57 @@
 					}
 				// forward-declare
 				//! \test zcc/decl.C99/Pass_union_forward_def.h
-				const type_system::type_index tmp2 = types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_union);
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
+				assert(tmp2);
 				i += 2;
 				continue;
 				}
-			else
-				src.c_array<0>()[i].type_code.set_type(tmp);
+			else if (!tmp)
+				{	// used without at least forward-declaring
+					//! \bug needs test cases
+				message_header(src.data<0>()[i].index_tokens[0]);
+				INC_INFORM(ERR_STR);
+				INFORM("used without at least forward-declaring");
+				zcc_errors.inc_error();
+				}
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 			{
 			const type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
+			if (tmp)
+				{
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			//! \bug C1X 6.7.2.3p2 states that conflicting enum or struct must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_struct);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_struct_forward_def.h
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			assert(tmp || tmp2);
 			if (   1<src.size<0>()-i
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here (C99 6.7.2.3)
-					//! \bug C1X 6.7.3p3 indicates const/volatile qualification of a forward-declaration is meaningless
-					//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \bug need test cases
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(WARN_STR);
+					INFORM("useless const/volatile qualification of a forward-declaration (C99 6.7.3p3)");
+					if (bool_options[boolopt::warn_crosslang_compatibility])
+						INFORM("(error in C++: C++0X 7.1.6.1p1)");
+					if (bool_options[boolopt::warnings_are_errors])
+						zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					};
 				if (tmp)
 					{	// but if already (forward-)declared then this is a no-op
 						// think this is common enough to not warrant OAOO/DRY treatment
@@ -13120,16 +13210,18 @@
 					}
 				// forward-declare
 				//! \test zcc/decl.C99/Pass_struct_forward_def.h
-				const type_system::type_index tmp2 = types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_struct);
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
+				assert(tmp2);
 				i += 2;
 				continue;
 				}
-			else
-				src.c_array<0>()[i].type_code.set_type(tmp);
+			else if (!tmp)
+				{	// used without at least forward-declaring
+					//! \bug needs test cases
+				message_header(src.data<0>()[i].index_tokens[0]);
+				INC_INFORM(ERR_STR);
+				INFORM("used without at least forward-declaring");
+				zcc_errors.inc_error();
+				}
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 			{	// can only define once
@@ -13656,6 +13748,7 @@
 		return;
 		}
 
+	kleene_star<STATIC_SIZE(CPP0X_nontype_decl_specifier_list)+1,size_t (*)(const parse_tree&)> invariant_decl_scanner(CPP0X_type_or_invariant_decl_specifier);
 	size_t i = 0;
 	while(i<src.size<0>())
 		{
@@ -13672,10 +13765,37 @@
 		if (is_C99_named_specifier(src.data<0>()[i],"union"))
 			{
 			const type_system::type_index tmp = types.get_id_union_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
+			if (tmp)
+				{
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			//! \bug [find citation] states that conflicting enum, struct, or class must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_union);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			assert(tmp || tmp2);
 			if (   1<src.size<0>()-i
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
-					//! \bug C++0X 7.1.6.1p1 : const, volatile is an error here 
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \bug need test cases
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
+					zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					}
 				if (tmp)
 					{	// but if already (forward-)declared then this is a no-op
 						// think this is common enough to not warrant OAOO/DRY treatment
@@ -13683,27 +13803,55 @@
 					// remove from parse
 					src.DeleteNSlotsAt<0>(2,i);
 					continue;					
-					}
-				// forward-declare
+					};
 				//! \test zcc/decl.C99/Pass_union_forward_def.hpp
-				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_union);
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
+				assert(tmp2);
 				i += 2;
 				continue;
 				}
-			else
-				src.c_array<0>()[i].type_code.set_type(tmp);
+			else if (!tmp)
+				{	// used without at least forward-declaring
+					//! \bug needs test cases
+				message_header(src.data<0>()[i].index_tokens[0]);
+				INC_INFORM(ERR_STR);
+				INFORM("used without at least forward-declaring");
+				zcc_errors.inc_error();
+				}
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 			{
 			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
+			if (tmp)
+				{
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			//! \bug [find citation] states that conflicting enum, struct, or class must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_struct);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			assert(tmp || tmp2);
 			if (   1<src.size<0>()-i
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
-					//! \bug C++0X 7.1.6.1p1 : const, volatile is an error here
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \bug need test cases
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
+					zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					}
 				if (tmp)
 					{	// but if already (forward-)declared then this is a no-op
 						// think this is common enough to not warrant OAOO/DRY treatment
@@ -13714,24 +13862,53 @@
 					}
 				// forward-declare
 				//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
-				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_struct);
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
+				assert(tmp2);
 				i += 2;
 				continue;
 				}
-			else
-				src.c_array<0>()[i].type_code.set_type(tmp);
+			else if (!tmp)
+				{	// used without at least forward-declaring
+					//! \bug needs test cases
+				message_header(src.data<0>()[i].index_tokens[0]);
+				INC_INFORM(ERR_STR);
+				INFORM("used without at least forward-declaring");
+				zcc_errors.inc_error();
+				}
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"class"))
 			{
 			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
+			if (tmp)
+				{
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			//! \bug [find citation] states that conflicting enum, struct, or class must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_class);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			assert(tmp || tmp2);
 			if (   1<src.size<0>()-i
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
-					//! \bug C++0X 7.1.6.1p1 : const, volatile is an error here
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \bug need test cases
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
+					zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					}
 				if (tmp)
 					{	// but if already (forward-)declared then this is a no-op
 						// think this is common enough to not warrant OAOO/DRY treatment
@@ -13742,16 +13919,18 @@
 					}
 				// forward-declare
 				//! \test zcc/decl.C99/Pass_class_forward_def.hpp
-				const type_system::type_index tmp2 = types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_class);
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
-				assert(types.get_structdecl(tmp2));
-				src.c_array<0>()[i].type_code.set_type(tmp2);
+				assert(tmp2);
 				i += 2;
 				continue;
 				}
-			else
-				src.c_array<0>()[i].type_code.set_type(tmp);
+			else if (!tmp)
+				{	// used without at least forward-declaring
+					//! \bug needs test cases
+				message_header(src.data<0>()[i].index_tokens[0]);
+				INC_INFORM(ERR_STR);
+				INFORM("used without at least forward-declaring");
+				zcc_errors.inc_error();
+				}
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 			{	// can only define once

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const2.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const2.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test const;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const3.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const3.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+const union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const4.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const4.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test const;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile10.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile10.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile10.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile10.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+volatile union good_test const;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile11.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile11.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile11.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile11.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test const volatile;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile12.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test const volatile;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile2.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile2.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile3.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile3.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile4.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile4.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test const;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile5.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile5.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile5.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile5.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test const volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile6.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test const volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile7.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile7.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile7.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile7.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+const volatile union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile8.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile9.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile9.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile9.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_const_volatile9.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+const union good_test volatile;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_volatile.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile2.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_volatile2.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile3.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_volatile3.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+volatile union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_volatile4.h	2010-08-10 06:06:08 UTC (rev 475)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_union_forward_def_volatile4.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test volatile;
+
+union good_test {
+	int x_factor;
+};
+



From zaimoni at mail.berlios.de  Sat Aug 14 06:24:15 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat, 14 Aug 2010 06:24:15 +0200
Subject: [Zcplusplus-commits] r476 - trunk/tests/zcc/decl.C99
Message-ID: <20100814042415.5CDCC480F08@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-14 06:24:15 +0200 (Sat, 14 Aug 2010)
New Revision: 476

Added:
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const2.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const4.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile11.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile2.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile3.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile4.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile5.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile7.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile9.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile2.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile3.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile4.h
Log:
Verify C warning for const/volatile forward-declared struct

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const2.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const2.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test const;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,10 @@
+// decl.C99\Warn_struct_forward_def_const3.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+const struct good_test;
+
+struct good_test {
+	int x_factor;
+};

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const4.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const4.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test const;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile10.h
+// struct singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+volatile struct good_test const;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile11.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile11.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile11.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile11.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test const volatile;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile12.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test const volatile;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile2.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,10 @@
+// decl.C99\Warn_struct_forward_def_const_volatile2.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile3.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile3.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile4.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile4.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test const;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile5.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile5.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile5.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile5.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test const volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile6.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test const volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile7.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile7.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile7.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile7.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+const volatile struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile8.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile9.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile9.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile9.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_const_volatile9.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+const struct good_test volatile;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_volatile.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile2.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_volatile2.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile3.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_volatile3.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+volatile struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_volatile4.h	2010-08-14 04:24:15 UTC (rev 476)
@@ -0,0 +1,11 @@
+// decl.C99\Warn_struct_forward_def_volatile4.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test volatile;
+
+struct good_test {
+	int x_factor;
+};
+



From zaimoni at mail.berlios.de  Sat Aug 14 06:24:53 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat, 14 Aug 2010 06:24:53 +0200
Subject: [Zcplusplus-commits] r477 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100814042454.15DB5480F08@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-14 06:24:53 +0200 (Sat, 14 Aug 2010)
New Revision: 477

Added:
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const2.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const3.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const4.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile10.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile11.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile4.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile5.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile7.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile9.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile4.hpp
Modified:
   trunk/CSupport.cpp
Log:
Verify C++ error for const/volatile forward-declared union

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-14 04:24:15 UTC (rev 476)
+++ trunk/CSupport.cpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -13189,7 +13189,26 @@
 				{	// check for forward-declaration here (C99 6.7.2.3)
 				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \bug need test cases
+					{	//! \test decl.C99/Warn_struct_forward_def_const1.h
+						//! \test decl.C99/Warn_struct_forward_def_const2.h
+						//! \test decl.C99/Warn_struct_forward_def_const3.h
+						//! \test decl.C99/Warn_struct_forward_def_const4.h
+						//! \test decl.C99/Warn_struct_forward_def_volatile1.h
+						//! \test decl.C99/Warn_struct_forward_def_volatile2.h
+						//! \test decl.C99/Warn_struct_forward_def_volatile3.h
+						//! \test decl.C99/Warn_struct_forward_def_volatile4.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile1.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile2.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile3.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile4.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile5.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile6.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile7.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile8.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile9.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile10.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile11.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile12.h
 					message_header(src.data<0>()[i].index_tokens[0]);
 					INC_INFORM(WARN_STR);
 					INFORM("useless const/volatile qualification of a forward-declaration (C99 6.7.3p3)");
@@ -13788,7 +13807,26 @@
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \bug need test cases
+					{	//! \test decl.C99/Error_union_forward_def_const1.hpp
+						//! \test decl.C99/Error_union_forward_def_const2.hpp
+						//! \test decl.C99/Error_union_forward_def_const3.hpp
+						//! \test decl.C99/Error_union_forward_def_const4.hpp
+						//! \test decl.C99/Error_union_forward_def_volatile1.hpp
+						//! \test decl.C99/Error_union_forward_def_volatile2.hpp
+						//! \test decl.C99/Error_union_forward_def_volatile3.hpp
+						//! \test decl.C99/Error_union_forward_def_volatile4.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile1.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile2.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile3.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile4.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile5.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile6.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile7.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile8.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile9.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile10.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile11.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile12.hpp
 					message_header(src.data<0>()[i].index_tokens[0]);
 					INC_INFORM(ERR_STR);
 					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const2.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const2.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test const;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const3.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const3.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+const union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const4.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const4.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test const;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile10.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile10.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile10.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile10.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+volatile union good_test const;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile11.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile11.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile11.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile11.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test const volatile;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile12.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test const volatile;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile2.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile2.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile3.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile3.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile4.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile4.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test const;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile5.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile5.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile5.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile5.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test const volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile6.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test const volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile7.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile7.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile7.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile7.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+const volatile union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile8.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile9.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile9.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile9.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_const_volatile9.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+const union good_test volatile;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_volatile.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile2.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_volatile2.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test volatile;
+union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile3.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_volatile3.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+volatile union good_test;
+
+union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_volatile4.hpp	2010-08-14 04:24:53 UTC (rev 477)
@@ -0,0 +1,11 @@
+// decl.C99\Error_union_forward_def_volatile4.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test;
+union good_test volatile;
+
+union good_test {
+	int x_factor;
+};
+



From zaimoni at mail.berlios.de  Sat Aug 21 06:03:58 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat, 21 Aug 2010 06:03:58 +0200
Subject: [Zcplusplus-commits] r478 - trunk/tests/zcc/decl.C99
Message-ID: <20100821040358.30BF4480F72@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-21 06:03:57 +0200 (Sat, 21 Aug 2010)
New Revision: 478

Added:
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const2.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const3.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const4.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile10.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile11.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile4.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile5.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile7.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile9.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile4.hpp
Log:
C++ errors for const/volatile forward definitions of struct

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const2.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const2.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test const;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const3.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,10 @@
+// decl.C99\Error_struct_forward_def_const3.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+const struct good_test;
+
+struct good_test {
+	int x_factor;
+};

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const4.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const4.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test const;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile10.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile10.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile10.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile10.hpp
+// singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+volatile struct good_test const;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile11.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile11.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile11.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile11.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test const volatile;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile12.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test const volatile;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile2.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,10 @@
+// decl.C99\Error_struct_forward_def_const_volatile2.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile3.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile3.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile4.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile4.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test const;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile5.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile5.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile5.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile5.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test const volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile6.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test const volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile7.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile7.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile7.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile7.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+const volatile struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile8.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile9.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile9.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile9.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_const_volatile9.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+const struct good_test volatile;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_volatile.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile2.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_volatile2.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test volatile;
+struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile3.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_volatile3.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+volatile struct good_test;
+
+struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_volatile4.hpp	2010-08-21 04:03:57 UTC (rev 478)
@@ -0,0 +1,11 @@
+// decl.C99\Error_struct_forward_def_volatile4.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test;
+struct good_test volatile;
+
+struct good_test {
+	int x_factor;
+};
+



From zaimoni at mail.berlios.de  Sat Aug 21 06:04:29 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat, 21 Aug 2010 06:04:29 +0200
Subject: [Zcplusplus-commits] r479 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100821040429.817F3480F72@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-21 06:04:29 +0200 (Sat, 21 Aug 2010)
New Revision: 479

Added:
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const2.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const3.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const4.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile10.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile11.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile4.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile5.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile7.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile9.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile4.hpp
Modified:
   trunk/CSupport.cpp
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h
Log:
C++ errors for const/volatile forward definitions of class

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-21 04:03:57 UTC (rev 478)
+++ trunk/CSupport.cpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -13882,7 +13882,26 @@
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \bug need test cases
+					{	//! \test decl.C99/Error_struct_forward_def_const1.hpp
+						//! \test decl.C99/Error_struct_forward_def_const2.hpp
+						//! \test decl.C99/Error_struct_forward_def_const3.hpp
+						//! \test decl.C99/Error_struct_forward_def_const4.hpp
+						//! \test decl.C99/Error_struct_forward_def_volatile1.hpp
+						//! \test decl.C99/Error_struct_forward_def_volatile2.hpp
+						//! \test decl.C99/Error_struct_forward_def_volatile3.hpp
+						//! \test decl.C99/Error_struct_forward_def_volatile4.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile1.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile2.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile3.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile4.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile5.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile6.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile7.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile8.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile9.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile10.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile11.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile12.hpp
 					message_header(src.data<0>()[i].index_tokens[0]);
 					INC_INFORM(ERR_STR);
 					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
@@ -13939,7 +13958,26 @@
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \bug need test cases
+					{	//! \test decl.C99/Error_class_forward_def_const1.hpp
+						//! \test decl.C99/Error_class_forward_def_const2.hpp
+						//! \test decl.C99/Error_class_forward_def_const3.hpp
+						//! \test decl.C99/Error_class_forward_def_const4.hpp
+						//! \test decl.C99/Error_class_forward_def_volatile1.hpp
+						//! \test decl.C99/Error_class_forward_def_volatile2.hpp
+						//! \test decl.C99/Error_class_forward_def_volatile3.hpp
+						//! \test decl.C99/Error_class_forward_def_volatile4.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile1.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile2.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile3.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile4.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile5.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile6.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile7.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile8.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile9.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile10.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile11.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile12.hpp
 					message_header(src.data<0>()[i].index_tokens[0]);
 					INC_INFORM(ERR_STR);
 					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const class good_test;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const2.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const2.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test const;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const3.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,10 @@
+// decl.C99\Error_class_forward_def_const3.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+const class good_test;
+
+class good_test {
+	int x_factor;
+};

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const4.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const4.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+class good_test const;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile class good_test;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile10.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile10.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile10.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile10.hpp
+// struct singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+volatile class good_test const;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile11.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile11.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile11.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile11.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+class good_test const volatile;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile12.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+class good_test const volatile;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile2.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,10 @@
+// decl.C99\Error_class_forward_def_const_volatile2.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const class good_test;
+class good_test;
+
+class good_test {
+	int x_factor;
+};

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile3.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile3.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const class good_test volatile;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile4.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile4.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile class good_test const;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile5.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile5.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile5.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile5.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test const volatile;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile6.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test const volatile;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile7.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile7.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile7.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile7.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+const volatile class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile8.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const class good_test;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile9.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile9.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile9.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_const_volatile9.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+const class good_test volatile;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_volatile.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile class good_test;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile2.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_volatile2.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test volatile;
+class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile3.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_volatile3.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+volatile class good_test;
+
+class good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_volatile4.hpp	2010-08-21 04:04:29 UTC (rev 479)
@@ -0,0 +1,11 @@
+// decl.C99\Error_class_forward_def_volatile4.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test;
+class good_test volatile;
+
+class good_test {
+	int x_factor;
+};
+

Modified: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h	2010-08-21 04:03:57 UTC (rev 478)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const3.h	2010-08-21 04:04:29 UTC (rev 479)
@@ -1,5 +1,5 @@
 // decl.C99\Warn_struct_forward_def_const3.h
-// using singly defined union
+// using singly defined struct
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 struct good_test;

Modified: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h	2010-08-21 04:03:57 UTC (rev 478)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile10.h	2010-08-21 04:04:29 UTC (rev 479)
@@ -1,5 +1,5 @@
 // decl.C99\Warn_struct_forward_def_const_volatile10.h
-// struct singly defined union
+// using singly defined struct
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 struct good_test;



From zaimoni at mail.berlios.de  Thu Aug 26 00:44:39 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Thu, 26 Aug 2010 00:44:39 +0200
Subject: [Zcplusplus-commits] r480 - trunk/tests/zcc/decl.C99
Message-ID: <20100825224440.0F4E3480A0D@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-26 00:44:39 +0200 (Thu, 26 Aug 2010)
New Revision: 480

Modified:
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h
   trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h
   trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h
Log:
fix permutation miscalculations in test cases

Modified: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile12.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -3,7 +3,7 @@
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 class good_test;
-class good_test const volatile;
+class good_test volatile const;
 
 class good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile6.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,7 +2,7 @@
 // using singly defined class
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
-class good_test const volatile;
+class good_test volatile const;
 class good_test;
 
 class good_test {

Modified: trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_class_forward_def_const_volatile8.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,8 +2,8 @@
 // using singly defined class
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
+class good_test;
 volatile const class good_test;
-class good_test;
 
 class good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile12.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -3,7 +3,7 @@
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 struct good_test;
-struct good_test const volatile;
+struct good_test volatile const;
 
 struct good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile6.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,7 +2,7 @@
 // using singly defined struct
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
-struct good_test const volatile;
+struct good_test volatile const;
 struct good_test;
 
 struct good_test {

Modified: trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_struct_forward_def_const_volatile8.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,8 +2,8 @@
 // using singly defined struct
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
+struct good_test;
 volatile const struct good_test;
-struct good_test;
 
 struct good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile12.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -3,7 +3,7 @@
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 union good_test;
-union good_test const volatile;
+union good_test volatile const;
 
 union good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile6.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,7 +2,7 @@
 // using singly defined union
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
-union good_test const volatile;
+union good_test volatile const;
 union good_test;
 
 union good_test {

Modified: trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Error_union_forward_def_const_volatile8.hpp	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,8 +2,8 @@
 // using singly defined union
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
+union good_test;
 volatile const union good_test;
-union good_test;
 
 union good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile12.h	2010-08-25 22:44:39 UTC (rev 480)
@@ -3,7 +3,7 @@
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 struct good_test;
-struct good_test const volatile;
+struct good_test volatile const;
 
 struct good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile6.h	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,7 +2,7 @@
 // using singly defined struct
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
-struct good_test const volatile;
+struct good_test volatile const;
 struct good_test;
 
 struct good_test {

Modified: trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Warn_struct_forward_def_const_volatile8.h	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,8 +2,8 @@
 // using singly defined struct
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
+struct good_test;
 volatile const struct good_test;
-struct good_test;
 
 struct good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile12.h	2010-08-25 22:44:39 UTC (rev 480)
@@ -3,7 +3,7 @@
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
 union good_test;
-union good_test const volatile;
+union good_test volatile const;
 
 union good_test {
 	int x_factor;

Modified: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile6.h	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,7 +2,7 @@
 // using singly defined union
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
-union good_test const volatile;
+union good_test volatile const;
 union good_test;
 
 union good_test {

Modified: trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h	2010-08-21 04:04:29 UTC (rev 479)
+++ trunk/tests/zcc/decl.C99/Warn_union_forward_def_const_volatile8.h	2010-08-25 22:44:39 UTC (rev 480)
@@ -2,8 +2,8 @@
 // using singly defined union
 // (C)2010 Kenneth Boyd, license: MIT.txt
 
+union good_test;
 volatile const union good_test;
-union good_test;
 
 union good_test {
 	int x_factor;



From zaimoni at mail.berlios.de  Thu Aug 26 01:59:43 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Thu, 26 Aug 2010 01:59:43 +0200
Subject: [Zcplusplus-commits] r481 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100825235943.ADA574809A8@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-26 01:59:43 +0200 (Thu, 26 Aug 2010)
New Revision: 481

Added:
   trunk/tests/zcc/decl.C99/Warn_union_def_const.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const2.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile2.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile3.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile4.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile5.h
   trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile6.h
   trunk/tests/zcc/decl.C99/Warn_union_def_volatile.h
   trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h
Modified:
   trunk/CSupport.cpp
Log:
C warning: const/volatile union definition

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-25 22:44:39 UTC (rev 480)
+++ trunk/CSupport.cpp	2010-08-25 23:59:43 UTC (rev 481)
@@ -4593,6 +4593,13 @@
 				src.DestroyNAtAndRotateTo<0>(2,i+1,src.size<0>()-offset);
 				offset += 2;
 				assert(is_C99_named_specifier_definition(src.data<0>()[i],tmp2));
+				// parser is having normal-form issues.  Shove named specifier definitions ahead of any const/volatile type qualifiers
+				size_t j = i;
+				while(0<j && (robust_token_is_string<5>(src.data<0>()[j-1],"const") || robust_token_is_string<8>(src.data<0>()[j-1],"volatile")))
+					{
+					std::swap(src.c_array<0>()[j],src.c_array<0>()[j-1]);
+					--j;
+					};
 				continue;
 				};
 			src.c_array<0>()[i].grab_index_token_from<1,0>(src.c_array<0>()[i+1]);
@@ -13084,6 +13091,7 @@
 		// check naked declarations first
 		if (is_C99_named_specifier(src.data<0>()[i],"union"))
 			{
+C99_union_specifier:
 			const type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
 			if (tmp)
 				{
@@ -13109,15 +13117,15 @@
 				{	// check for forward-declaration here (C99 6.7.2.3)
 				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \test decl.C99/Warn_union_forward_def_const1.h
+					{	//! \test decl.C99/Warn_union_forward_def_const.h
 						//! \test decl.C99/Warn_union_forward_def_const2.h
 						//! \test decl.C99/Warn_union_forward_def_const3.h
 						//! \test decl.C99/Warn_union_forward_def_const4.h
-						//! \test decl.C99/Warn_union_forward_def_volatile1.h
+						//! \test decl.C99/Warn_union_forward_def_volatile.h
 						//! \test decl.C99/Warn_union_forward_def_volatile2.h
 						//! \test decl.C99/Warn_union_forward_def_volatile3.h
 						//! \test decl.C99/Warn_union_forward_def_volatile4.h
-						//! \test decl.C99/Warn_union_forward_def_const_volatile1.h
+						//! \test decl.C99/Warn_union_forward_def_const_volatile.h
 						//! \test decl.C99/Warn_union_forward_def_const_volatile2.h
 						//! \test decl.C99/Warn_union_forward_def_const_volatile3.h
 						//! \test decl.C99/Warn_union_forward_def_const_volatile4.h
@@ -13189,15 +13197,15 @@
 				{	// check for forward-declaration here (C99 6.7.2.3)
 				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \test decl.C99/Warn_struct_forward_def_const1.h
+					{	//! \test decl.C99/Warn_struct_forward_def_const.h
 						//! \test decl.C99/Warn_struct_forward_def_const2.h
 						//! \test decl.C99/Warn_struct_forward_def_const3.h
 						//! \test decl.C99/Warn_struct_forward_def_const4.h
-						//! \test decl.C99/Warn_struct_forward_def_volatile1.h
+						//! \test decl.C99/Warn_struct_forward_def_volatile.h
 						//! \test decl.C99/Warn_struct_forward_def_volatile2.h
 						//! \test decl.C99/Warn_struct_forward_def_volatile3.h
 						//! \test decl.C99/Warn_struct_forward_def_volatile4.h
-						//! \test decl.C99/Warn_struct_forward_def_const_volatile1.h
+						//! \test decl.C99/Warn_struct_forward_def_const_volatile.h
 						//! \test decl.C99/Warn_struct_forward_def_const_volatile2.h
 						//! \test decl.C99/Warn_struct_forward_def_const_volatile3.h
 						//! \test decl.C99/Warn_struct_forward_def_const_volatile4.h
@@ -13244,22 +13252,81 @@
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 			{	// can only define once
-			const C_union_struct_def* const tmp = types.get_C_structdef(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+			const type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
 			if (tmp)
-				{	//! \test zcc/decl.C99/Error_union_multidef.h
-				message_header(src.data<0>()[i].index_tokens[0]);
-				INC_INFORM(ERR_STR);
-				INC_INFORM("'union ");
-				INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
-				INFORM("' already defined (C99 6.7.2.3p1)");
-				message_header(*tmp);
-				INFORM("prior definition here");
-				zcc_errors.inc_error();
-				// now it's gone
-				// remove trailing semicolon if present
-				src.DeleteNSlotsAt<0>((1<src.size<0>()-i && robust_token_is_char<';'>(src.data<0>()[i+1])) ? 2 : 1,i);
+				{
+				const C_union_struct_def* const fatal_def = types.get_C_structdef(tmp);
+				if (fatal_def)
+					{	//! \test zcc/decl.C99/Error_struct_multidef.h
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INC_INFORM("'struct ");
+					INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
+					INFORM("' already defined (C99 6.7.2.3p1)");
+					message_header(*fatal_def);
+					INFORM("prior definition here");
+					zcc_errors.inc_error();
+					// reduce to named-specifier
+					src.c_array<0>()[i].DeleteIdx<2>(0);
+					assert(is_C99_named_specifier(src.data<0>()[i],"union"));
+					goto C99_union_specifier;
+					}
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			//! \bug C1X 6.7.2.3p2 states that conflicting enum or struct must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_union);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_union_forward_def.h
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			assert(tmp || tmp2);
+			// parse the union and upgrade it to a full definition
+			const type_system::type_index vr_tmp = tmp ? tmp : tmp2;
+			const union_struct_decl* tmp3 = types.get_structdecl(vr_tmp);
+			assert(tmp3);
+			C_union_struct_def* tmp4 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
+			//! \todo record field structure, etc.
+			types.upgrade_decl_to_def(vr_tmp,tmp4);
+			assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==vr_tmp);
+			assert(types.get_C_structdef(vr_tmp));
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// no objects declared, trigger the const/volatile warnings
+				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \test decl.C99/Warn_union_def_const.h
+						//! \test decl.C99/Warn_union_def_const2.h
+						//! \test decl.C99/Warn_union_def_volatile.h
+						//! \test decl.C99/Warn_union_def_volatile2.h
+						//! \test decl.C99/Warn_union_def_const_volatile.h
+						//! \test decl.C99/Warn_union_def_const_volatile2.h
+						//! \test decl.C99/Warn_union_def_const_volatile3.h
+						//! \test decl.C99/Warn_union_def_const_volatile4.h
+						//! \test decl.C99/Warn_union_def_const_volatile5.h
+						//! \test decl.C99/Warn_union_def_const_volatile6.h
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(WARN_STR);
+					INFORM("useless const/volatile qualification of a forward-declaration (C99 6.7.3p3)");
+					if (bool_options[boolopt::warn_crosslang_compatibility])
+						INFORM("(error in C++: C++0X 7.1.6.1p1)");
+					if (bool_options[boolopt::warnings_are_errors])
+						zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					};
+				// accept definition
+				//! \test zcc/decl.C99/Pass_union_forward_def.h
+				i += 2;
 				continue;
-				}
+				};
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 			{	// can only define once
@@ -13374,33 +13441,9 @@
 /*			else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 				{	// forward-declaration already handled
 				}	*/
-			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
-				{	// definitions...fine
-				const type_system::type_index tmp = types.get_id_union(src.data<0>()[i].index_tokens[1].token.first);
-				C_union_struct_def* tmp2 = NULL;
-				if (tmp)
-					{	// promoting forward-declare to definition
-						//! \test zcc/decl.C99/Pass_union_forward_def.h
-					const union_struct_decl* tmp3 = types.get_structdecl(tmp);
-					assert(tmp3);
-					tmp2 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
-					//! \todo record field structure, etc.
-					types.upgrade_decl_to_def(tmp,tmp2);
-					assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp);
-					assert(types.get_C_structdef(tmp));
-					}
-				else{	// definition
-						//! \test zcc/decl.C99/Pass_union_def.h
-					//! \todo record field structure, etc.
-					const type_system::type_index tmp3 = types.register_C_structdef(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename,union_struct_decl::decl_union);
-					assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
-					assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp3);
-					assert(types.get_C_structdef(tmp3));
-					src.c_array<0>()[i].type_code.set_type(tmp3);
-					}
-				i += 2;
-				continue;
-				}
+/*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
+				{	// forward-declaration already handled
+				} */
 			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 				{	// definitions...fine
 				const type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
@@ -13807,15 +13850,15 @@
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \test decl.C99/Error_union_forward_def_const1.hpp
+					{	//! \test decl.C99/Error_union_forward_def_const.hpp
 						//! \test decl.C99/Error_union_forward_def_const2.hpp
 						//! \test decl.C99/Error_union_forward_def_const3.hpp
 						//! \test decl.C99/Error_union_forward_def_const4.hpp
-						//! \test decl.C99/Error_union_forward_def_volatile1.hpp
+						//! \test decl.C99/Error_union_forward_def_volatile.hpp
 						//! \test decl.C99/Error_union_forward_def_volatile2.hpp
 						//! \test decl.C99/Error_union_forward_def_volatile3.hpp
 						//! \test decl.C99/Error_union_forward_def_volatile4.hpp
-						//! \test decl.C99/Error_union_forward_def_const_volatile1.hpp
+						//! \test decl.C99/Error_union_forward_def_const_volatile.hpp
 						//! \test decl.C99/Error_union_forward_def_const_volatile2.hpp
 						//! \test decl.C99/Error_union_forward_def_const_volatile3.hpp
 						//! \test decl.C99/Error_union_forward_def_const_volatile4.hpp
@@ -13882,15 +13925,15 @@
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \test decl.C99/Error_struct_forward_def_const1.hpp
+					{	//! \test decl.C99/Error_struct_forward_def_const.hpp
 						//! \test decl.C99/Error_struct_forward_def_const2.hpp
 						//! \test decl.C99/Error_struct_forward_def_const3.hpp
 						//! \test decl.C99/Error_struct_forward_def_const4.hpp
-						//! \test decl.C99/Error_struct_forward_def_volatile1.hpp
+						//! \test decl.C99/Error_struct_forward_def_volatile.hpp
 						//! \test decl.C99/Error_struct_forward_def_volatile2.hpp
 						//! \test decl.C99/Error_struct_forward_def_volatile3.hpp
 						//! \test decl.C99/Error_struct_forward_def_volatile4.hpp
-						//! \test decl.C99/Error_struct_forward_def_const_volatile1.hpp
+						//! \test decl.C99/Error_struct_forward_def_const_volatile.hpp
 						//! \test decl.C99/Error_struct_forward_def_const_volatile2.hpp
 						//! \test decl.C99/Error_struct_forward_def_const_volatile3.hpp
 						//! \test decl.C99/Error_struct_forward_def_const_volatile4.hpp
@@ -13958,15 +14001,15 @@
 				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
 				{	// check for forward-declaration here
 				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
-					{	//! \test decl.C99/Error_class_forward_def_const1.hpp
+					{	//! \test decl.C99/Error_class_forward_def_const.hpp
 						//! \test decl.C99/Error_class_forward_def_const2.hpp
 						//! \test decl.C99/Error_class_forward_def_const3.hpp
 						//! \test decl.C99/Error_class_forward_def_const4.hpp
-						//! \test decl.C99/Error_class_forward_def_volatile1.hpp
+						//! \test decl.C99/Error_class_forward_def_volatile.hpp
 						//! \test decl.C99/Error_class_forward_def_volatile2.hpp
 						//! \test decl.C99/Error_class_forward_def_volatile3.hpp
 						//! \test decl.C99/Error_class_forward_def_volatile4.hpp
-						//! \test decl.C99/Error_class_forward_def_const_volatile1.hpp
+						//! \test decl.C99/Error_class_forward_def_const_volatile.hpp
 						//! \test decl.C99/Error_class_forward_def_const_volatile2.hpp
 						//! \test decl.C99/Error_class_forward_def_const_volatile3.hpp
 						//! \test decl.C99/Error_class_forward_def_const_volatile4.hpp

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const2.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const2.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const_volatile.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile2.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const_volatile2.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile3.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const_volatile3.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test {
+	int x_factor;
+} volatile;
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile4.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const_volatile4.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile5.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile5.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile5.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const_volatile5.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} const volatile;
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile6.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile6.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_const_volatile6.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_const_volatile6.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} volatile const;
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_volatile.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_volatile.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h	2010-08-25 23:59:43 UTC (rev 481)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_union_def_volatile4.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} volatile;
+



From zaimoni at mail.berlios.de  Fri Aug 27 03:16:17 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Fri, 27 Aug 2010 03:16:17 +0200
Subject: [Zcplusplus-commits] r482 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100827011617.A2F3B480DAB@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-27 03:16:17 +0200 (Fri, 27 Aug 2010)
New Revision: 482

Added:
   trunk/tests/zcc/decl.C99/Warn_struct_def_const.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const2.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile2.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile3.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile4.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile5.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile6.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_volatile.h
   trunk/tests/zcc/decl.C99/Warn_struct_def_volatile2.h
Modified:
   trunk/CSupport.cpp
   trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h
Log:
C warning: useless volatile/const on struct definition

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-25 23:59:43 UTC (rev 481)
+++ trunk/CSupport.cpp	2010-08-27 01:16:17 UTC (rev 482)
@@ -13172,6 +13172,7 @@
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 			{
+C99_struct_specifier:
 			const type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
 			if (tmp)
 				{
@@ -13257,10 +13258,10 @@
 				{
 				const C_union_struct_def* const fatal_def = types.get_C_structdef(tmp);
 				if (fatal_def)
-					{	//! \test zcc/decl.C99/Error_struct_multidef.h
+					{	//! \test zcc/decl.C99/Error_union_multidef.h
 					message_header(src.data<0>()[i].index_tokens[0]);
 					INC_INFORM(ERR_STR);
-					INC_INFORM("'struct ");
+					INC_INFORM("'union ");
 					INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
 					INFORM("' already defined (C99 6.7.2.3p1)");
 					message_header(*fatal_def);
@@ -13314,7 +13315,7 @@
 						//! \test decl.C99/Warn_union_def_const_volatile6.h
 					message_header(src.data<0>()[i].index_tokens[0]);
 					INC_INFORM(WARN_STR);
-					INFORM("useless const/volatile qualification of a forward-declaration (C99 6.7.3p3)");
+					INFORM("useless const/volatile qualification of a definition (C99 6.7.3p3)");
 					if (bool_options[boolopt::warn_crosslang_compatibility])
 						INFORM("(error in C++: C++0X 7.1.6.1p1)");
 					if (bool_options[boolopt::warnings_are_errors])
@@ -13330,22 +13331,81 @@
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 			{	// can only define once
-			const C_union_struct_def* const tmp = types.get_C_structdef(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+			const type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
 			if (tmp)
-				{	//! \test zcc/decl.C99/Error_struct_multidef.h
-				message_header(src.data<0>()[i].index_tokens[0]);
-				INC_INFORM(ERR_STR);
-				INC_INFORM("'struct ");
-				INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
-				INFORM("' already defined (C99 6.7.2.3p1)");
-				message_header(*tmp);
-				INFORM("prior definition here");
-				zcc_errors.inc_error();
-				// now it's gone
-				// remove trailing semicolon if present
-				src.DeleteNSlotsAt<0>((1<src.size<0>()-i && robust_token_is_char<';'>(src.data<0>()[i+1])) ? 2 : 1,i);
+				{
+				const C_union_struct_def* const fatal_def = types.get_C_structdef(tmp);
+				if (fatal_def)
+					{	//! \test zcc/decl.C99/Error_struct_multidef.h
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INC_INFORM("'struct ");
+					INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
+					INFORM("' already defined (C99 6.7.2.3p1)");
+					message_header(*fatal_def);
+					INFORM("prior definition here");
+					zcc_errors.inc_error();
+					// reduce to named-specifier
+					src.c_array<0>()[i].DeleteIdx<2>(0);
+					assert(is_C99_named_specifier(src.data<0>()[i],"struct"));
+					goto C99_struct_specifier;
+					}
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			//! \bug C1X 6.7.2.3p2 states that conflicting enum or union must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl(src.data<0>()[i].index_tokens[1].token.first,union_struct_decl::decl_struct);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_struct_forward_def.h
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const type qualifier (C99 6.7.3p4)","removing redundant volatile type qualifier (C99 6.7.3p4)");
+				};
+			assert(tmp || tmp2);
+			// parse the union and upgrade it to a full definition
+			const type_system::type_index vr_tmp = tmp ? tmp : tmp2;
+			const union_struct_decl* tmp3 = types.get_structdecl(vr_tmp);
+			assert(tmp3);
+			C_union_struct_def* tmp4 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
+			//! \todo record field structure, etc.
+			types.upgrade_decl_to_def(vr_tmp,tmp4);
+			assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==vr_tmp);
+			assert(types.get_C_structdef(vr_tmp));
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// no objects declared, trigger the const/volatile warnings
+				//! \todo even if we use -Wno-OAOO/-Wno-DRY, -Wc-c++-compat should advise that const/volatile qualification of a forward-declaration is an error in C++
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \test decl.C99/Warn_struct_def_const.h
+						//! \test decl.C99/Warn_struct_def_const2.h
+						//! \test decl.C99/Warn_struct_def_volatile.h
+						//! \test decl.C99/Warn_struct_def_volatile2.h
+						//! \test decl.C99/Warn_struct_def_const_volatile.h
+						//! \test decl.C99/Warn_struct_def_const_volatile2.h
+						//! \test decl.C99/Warn_struct_def_const_volatile3.h
+						//! \test decl.C99/Warn_struct_def_const_volatile4.h
+						//! \test decl.C99/Warn_struct_def_const_volatile5.h
+						//! \test decl.C99/Warn_struct_def_const_volatile6.h
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(WARN_STR);
+					INFORM("useless const/volatile qualification of a definition (C99 6.7.3p3)");
+					if (bool_options[boolopt::warn_crosslang_compatibility])
+						INFORM("(error in C++: C++0X 7.1.6.1p1)");
+					if (bool_options[boolopt::warnings_are_errors])
+						zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					};
+				// accept definition
+				//! \test zcc/decl.C99/Pass_union_forward_def.h
+				i += 2;
 				continue;
-				}
+				};
 			}
 		// enum was difficult to interpret in C++, so parked here while waiting on comp.std.c++
 		else if (is_C99_named_specifier(src.data<0>()[i],"enum"))
@@ -13444,33 +13504,9 @@
 /*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 				{	// forward-declaration already handled
 				} */
-			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
-				{	// definitions...fine
-				const type_system::type_index tmp = types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first);
-				C_union_struct_def* tmp2 = NULL;
-				if (tmp)
-					{	// promoting forward-declare to definition
-						//! \test zcc/decl.C99/Pass_struct_forward_def.h
-					const union_struct_decl* tmp3 = types.get_structdecl(tmp);
-					assert(tmp3);
-					tmp2 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
-					//! \todo record field structure, etc.
-					types.upgrade_decl_to_def(tmp,tmp2);
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp);
-					assert(types.get_C_structdef(tmp));
-					}
-				else{	// definition
-						//! \test zcc/decl.C99/Pass_struct_def.h
-					//! \todo record field structure, etc.
-					const type_system::type_index tmp3 = types.register_C_structdef(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename,union_struct_decl::decl_struct);
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp3);
-					assert(types.get_C_structdef(tmp3));
-					src.c_array<0>()[i].type_code.set_type(tmp3);
-					}
-				i += 2;
-				continue;
-				};
+/*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
+				{	// forward-declaration already handled
+				}; */
 			};
 		// general declaration scanner 
 		// we intercept typedefs as part of general variable declaration detection (weird storage qualifier)

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const2.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const2.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const_volatile.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile2.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const_volatile2.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile3.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile3.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile3.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const_volatile3.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test {
+	int x_factor;
+} volatile;
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile4.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile4.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile4.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const_volatile4.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile5.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile5.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile5.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const_volatile5.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} const volatile;
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile6.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile6.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_const_volatile6.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_const_volatile6.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} volatile const;
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_volatile.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_volatile.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_volatile.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_volatile.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Warn_struct_def_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_struct_def_volatile2.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Warn_struct_def_volatile2.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -0,0 +1,8 @@
+// decl.C99\Warn_struct_def_volatile2.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} volatile;
+

Modified: trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h
===================================================================
--- trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h	2010-08-25 23:59:43 UTC (rev 481)
+++ trunk/tests/zcc/decl.C99/Warn_union_def_volatile2.h	2010-08-27 01:16:17 UTC (rev 482)
@@ -1,4 +1,4 @@
-// decl.C99\Warn_union_def_volatile4.h
+// decl.C99\Warn_union_def_volatile2.h
 // using singly defined union
 // (C)2010 Kenneth Boyd, license: MIT.txt
 



From zaimoni at mail.berlios.de  Sat Aug 28 21:42:44 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat, 28 Aug 2010 21:42:44 +0200
Subject: [Zcplusplus-commits] r483 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100828194245.361BB480F60@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-28 21:42:44 +0200 (Sat, 28 Aug 2010)
New Revision: 483

Added:
   trunk/tests/zcc/decl.C99/Error_union_def_const.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const2.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const_volatile4.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const_volatile5.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_union_def_volatile2.hpp
Modified:
   trunk/CSupport.cpp
Log:
C++ error: const/volatile on union definition without an object

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-27 01:16:17 UTC (rev 482)
+++ trunk/CSupport.cpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -13859,9 +13859,9 @@
 			};
 		// XXX C++ allows mixing definitions and declaring variables at the same time, but this is a bit unusual
 		// check naked declarations first; handle namespaces later
-		//! \bug indentation fixup needed (stage 3)
 		if (is_C99_named_specifier(src.data<0>()[i],"union"))
 			{
+CPP_union_specifier:
 			const type_system::type_index tmp = types.get_id_union_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
 			if (tmp)
 				{
@@ -14089,26 +14089,77 @@
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 			{	// can only define once
-			char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-			const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-			const C_union_struct_def* const tmp = types.get_C_structdef(types.get_id_union(fullname));
+			const type_system::type_index tmp = types.get_id_union_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
 			if (tmp)
-				{	//! \test zcc/decl.C99/Error_union_multidef.hpp
-				message_header(src.data<0>()[i].index_tokens[0]);
-				INC_INFORM(ERR_STR);
-				INC_INFORM("'union ");
-				INC_INFORM(fullname);
-				free(namespace_name);
-				INFORM("' already defined (C++98 3.2p1)");
-				message_header(*tmp);
-				INFORM("prior definition here");
-				zcc_errors.inc_error();
-				// now it's gone
-				// remove trailing semicolon if present
-				src.DeleteNSlotsAt<0>((1<src.size<0>()-i && robust_token_is_char<';'>(src.data<0>()[i+1])) ? 2 : 1,i);
+				{
+				const C_union_struct_def* const fatal_def = types.get_C_structdef(tmp);
+				if (fatal_def)
+					{	//! \test zcc/decl.C99/Error_union_multidef.hpp
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INC_INFORM("'union ");
+					INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
+					INFORM("' already defined (C++98 3.2p1)");
+					message_header(*fatal_def);
+					INFORM("prior definition here");
+					zcc_errors.inc_error();
+					// reduce to named-specifier
+					src.c_array<0>()[i].DeleteIdx<2>(0);
+					assert(is_C99_named_specifier(src.data<0>()[i],"union"));
+					goto CPP_union_specifier;
+					}					
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			//! \bug [find citation] states that conflicting enum, struct, or class must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_union);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_UNION_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			assert(tmp || tmp2);
+			// parse the union and upgrade it to a full definition
+			const type_system::type_index vr_tmp = tmp ? tmp : tmp2;
+			const union_struct_decl* tmp3 = types.get_structdecl(vr_tmp);
+			assert(tmp3);
+			C_union_struct_def* tmp4 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
+			//! \todo record field structure, etc.
+			types.upgrade_decl_to_def(vr_tmp,tmp4);
+			assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==vr_tmp);
+			assert(types.get_C_structdef(vr_tmp));
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \test decl.C99/Error_union_def_const.hpp
+						//! \test decl.C99/Error_union_def_const2.hpp
+						//! \test decl.C99/Error_union_def_volatile.hpp
+						//! \test decl.C99/Error_union_def_volatile2.hpp
+						//! \test decl.C99/Error_union_def_const_volatile.hpp
+						//! \test decl.C99/Error_union_def_const_volatile2.hpp
+						//! \test decl.C99/Error_union_def_const_volatile3.hpp
+						//! \test decl.C99/Error_union_def_const_volatile4.hpp
+						//! \test decl.C99/Error_union_def_const_volatile5.hpp
+						//! \test decl.C99/Error_union_def_const_volatile6.hpp
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
+					zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					}
+				// accept definition
+				//! \test zcc/decl.C99/Pass_union_forward_def.hpp
+				i += 2;
 				continue;
 				}
-			free(namespace_name);
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 			{	// can only define once
@@ -14273,36 +14324,9 @@
 /*			else if (is_C99_named_specifier(src.data<0>()[i],"class"))
 				{	// forward-declaration already handled
 				} */
-			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
-				{	// definitions...fine
-				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-				const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-				const type_system::type_index tmp = types.get_id_union(fullname);
-				free(namespace_name);
-				C_union_struct_def* tmp2 = NULL;
-				if (tmp)
-					{	// promoting forward-declare to definition
-						//! \test zcc/decl.C99/Pass_union_forward_def.hpp
-					const union_struct_decl* tmp3 = types.get_structdecl(tmp);
-					assert(tmp3);
-					tmp2 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
-					//! \todo record field structure, etc.
-					types.upgrade_decl_to_def(tmp,tmp2);
-					assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp);
-					assert(types.get_C_structdef(tmp));
-					}
-				else{	// definition
-						//! \test zcc/decl.C99/Pass_union_def.hpp
-					//! \todo record field structure, etc.
-					const type_system::type_index tmp3 = types.register_C_structdef(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename,union_struct_decl::decl_union);
-					assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first));
-					assert(types.get_id_union(src.data<0>()[i].index_tokens[1].token.first)==tmp3);
-					assert(types.get_C_structdef(tmp3));
-					src.c_array<0>()[i].type_code.set_type(tmp3);
-					}
-				i += 2;
-				continue;
-				}
+/*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
+				{	// forward-declaration already handled
+				}	*/
 			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 				{	// definitions...fine
 				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;

Added: trunk/tests/zcc/decl.C99/Error_union_def_const.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const2.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const2.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const_volatile.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const_volatile.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const_volatile2.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const_volatile2.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const_volatile3.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const_volatile3.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const union good_test {
+	int x_factor;
+} volatile;
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const_volatile4.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const_volatile4.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const_volatile5.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const_volatile5.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const_volatile5.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const_volatile5.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} const volatile;
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_const_volatile6.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_const_volatile6.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_const_volatile6.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} volatile const;
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_volatile.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,8 @@
+// decl.C99\Error_union_def_volatile.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile union good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_union_def_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_union_def_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_union_def_volatile2.hpp	2010-08-28 19:42:44 UTC (rev 483)
@@ -0,0 +1,7 @@
+// decl.C99\Error_union_def_volatile2.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} volatile;



From zaimoni at mail.berlios.de  Mon Aug 30 03:32:35 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Mon, 30 Aug 2010 03:32:35 +0200
Subject: [Zcplusplus-commits] r484 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100830013235.B0952480FD8@sheep.berlios.de>

Author: zaimoni
Date: 2010-08-30 03:32:35 +0200 (Mon, 30 Aug 2010)
New Revision: 484

Added:
   trunk/tests/zcc/decl.C99/Error_struct_def_const.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const2.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile4.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile5.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_struct_def_volatile2.hpp
Modified:
   trunk/CSupport.cpp
Log:
C++ error: const/volatile on struct definition without an object

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-28 19:42:44 UTC (rev 483)
+++ trunk/CSupport.cpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -13937,6 +13937,7 @@
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"struct"))
 			{
+CPP_struct_specifier:				
 			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
 			if (tmp)
 				{
@@ -14163,26 +14164,77 @@
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 			{	// can only define once
-			char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-			const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-			const C_union_struct_def* const tmp = types.get_C_structdef(types.get_id_struct_class(fullname));
+			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
 			if (tmp)
-				{	//! \test zcc/decl.C99/Error_struct_multidef.hpp
-				message_header(src.data<0>()[i].index_tokens[0]);
-				INC_INFORM(ERR_STR);
-				INC_INFORM("'struct ");
-				INC_INFORM(fullname);
-				free(namespace_name);
-				INFORM("' already defined (C++98 3.2p1)");
-				message_header(*tmp);
-				INFORM("prior definition here");
-				zcc_errors.inc_error();
-				// now it's gone
-				// remove trailing semicolon if present
-				src.DeleteNSlotsAt<0>((1<src.size<0>()-i && robust_token_is_char<';'>(src.data<0>()[i+1])) ? 2 : 1,i);
+				{
+				const C_union_struct_def* const fatal_def = types.get_C_structdef(tmp);
+				if (fatal_def)
+					{	//! \test zcc/decl.C99/Error_struct_multidef.hpp
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INC_INFORM("'struct ");
+					INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
+					INFORM("' already defined (C++98 3.2p1)");
+					message_header(*fatal_def);
+					INFORM("prior definition here");
+					zcc_errors.inc_error();
+					// reduce to named-specifier
+					src.c_array<0>()[i].DeleteIdx<2>(0);
+					assert(is_C99_named_specifier(src.data<0>()[i],"struct"));
+					goto CPP_struct_specifier;
+					}					
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			//! \bug [find citation] states that conflicting enum, struct, or class must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_struct);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			assert(tmp || tmp2);
+			// parse the union and upgrade it to a full definition
+			const type_system::type_index vr_tmp = tmp ? tmp : tmp2;
+			const union_struct_decl* tmp3 = types.get_structdecl(vr_tmp);
+			assert(tmp3);
+			C_union_struct_def* tmp4 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
+			//! \todo record field structure, etc.
+			types.upgrade_decl_to_def(vr_tmp,tmp4);
+			assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==vr_tmp);
+			assert(types.get_C_structdef(vr_tmp));
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \test decl.C99/Error_struct_def_const.hpp
+						//! \test decl.C99/Error_struct_def_const2.hpp
+						//! \test decl.C99/Error_struct_def_volatile.hpp
+						//! \test decl.C99/Error_struct_def_volatile2.hpp
+						//! \test decl.C99/Error_struct_def_const_volatile.hpp
+						//! \test decl.C99/Error_struct_def_const_volatile2.hpp
+						//! \test decl.C99/Error_struct_def_const_volatile3.hpp
+						//! \test decl.C99/Error_struct_def_const_volatile4.hpp
+						//! \test decl.C99/Error_struct_def_const_volatile5.hpp
+						//! \test decl.C99/Error_struct_def_const_volatile6.hpp
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
+					zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					}
+				// accept definition
+				//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
+				i += 2;
 				continue;
 				}
-			free(namespace_name);
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"class"))
 			{	// can only define once
@@ -14327,36 +14379,9 @@
 /*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"union"))
 				{	// forward-declaration already handled
 				}	*/
-			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
-				{	// definitions...fine
-				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-				const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-				const type_system::type_index tmp = types.get_id_struct_class(fullname);
-				free(namespace_name);
-				C_union_struct_def* tmp2 = NULL;
-				if (tmp)
-					{	// promoting forward-declare to definition
-						//! \test zcc/decl.C99/Pass_struct_forward_def.hpp
-					const union_struct_decl* tmp3 = types.get_structdecl(tmp);
-					assert(tmp3);
-					tmp2 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
-					//! \todo record field structure, etc.
-					types.upgrade_decl_to_def(tmp,tmp2);
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp);
-					assert(types.get_C_structdef(tmp));
-					}
-				else{	// definition
-						//! \test zcc/decl.C99/Pass_struct_def.hpp
-					//! \todo record field structure, etc.
-					const type_system::type_index tmp3 = types.register_C_structdef(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename,union_struct_decl::decl_struct);
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp3);
-					assert(types.get_C_structdef(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)));
-					src.c_array<0>()[i].type_code.set_type(tmp3);
-					}
-				i += 2;
-				continue;
-				}
+/*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
+				{	// forward-declaration already handled
+				} */
 			else if (is_C99_named_specifier_definition(src.data<0>()[i],"class"))
 				{	// definitions...fine
 				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const2.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const2.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const_volatile.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile2.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const_volatile2.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile3.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const_volatile3.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const struct good_test {
+	int x_factor;
+} volatile;
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile4.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const_volatile4.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile5.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile5.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile5.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const_volatile5.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} const volatile;
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile6.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_const_volatile6.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_const_volatile6.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} volatile const;
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_volatile.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_volatile.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile struct good_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_struct_def_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_struct_def_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_struct_def_volatile2.hpp	2010-08-30 01:32:35 UTC (rev 484)
@@ -0,0 +1,8 @@
+// decl.C99\Error_struct_def_volatile2.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} volatile;
+



