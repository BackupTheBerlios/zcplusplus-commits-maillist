From zaimoni at mail.berlios.de  Wed Sep  1 07:33:04 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Wed,  1 Sep 2010 07:33:04 +0200
Subject: [Zcplusplus-commits] r485 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100901053304.839B0480B6F@sheep.berlios.de>

Author: zaimoni
Date: 2010-09-01 07:33:04 +0200 (Wed, 01 Sep 2010)
New Revision: 485

Added:
   trunk/tests/zcc/decl.C99/Error_class_def_const.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const2.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const_volatile2.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const_volatile3.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const_volatile4.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const_volatile5.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_const_volatile6.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_volatile.hpp
   trunk/tests/zcc/decl.C99/Error_class_def_volatile2.hpp
Modified:
   trunk/CSupport.cpp
Log:
C++ error: const/volatile on class definition without an object

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-08-30 01:32:35 UTC (rev 484)
+++ trunk/CSupport.cpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -14014,6 +14014,7 @@
 			}
 		else if (is_C99_named_specifier(src.data<0>()[i],"class"))
 			{
+CPP_class_specifier:
 			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
 			if (tmp)
 				{
@@ -14238,26 +14239,77 @@
 			}
 		else if (is_C99_named_specifier_definition(src.data<0>()[i],"class"))
 			{	// can only define once
-			char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-			const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-			const C_union_struct_def* const tmp = types.get_C_structdef(types.get_id_struct_class(fullname));
+			const type_system::type_index tmp = types.get_id_struct_class_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace);
 			if (tmp)
-				{	//! \test zcc/decl.C99/Error_class_multidef.hpp
-				message_header(src.data<0>()[i].index_tokens[0]);
-				INC_INFORM(ERR_STR);
-				INC_INFORM("'class ");
-				INC_INFORM(fullname);
-				free(namespace_name);
-				INFORM("' already defined (C++98 3.2p1)");
-				message_header(*tmp);
-				INFORM("prior definition here");
-				zcc_errors.inc_error();
-				// now it's gone
-				// remove trailing semicolon if present
-				src.DeleteNSlotsAt<0>((1<src.size<0>()-i && robust_token_is_char<';'>(src.data<0>()[i+1])) ? 2 : 1,i);
+				{
+				const C_union_struct_def* const fatal_def = types.get_C_structdef(tmp);
+				if (fatal_def)
+					{	//! \test zcc/decl.C99/Error_class_multidef.hpp
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INC_INFORM("'class ");
+					INC_INFORM(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].token.second);
+					INFORM("' already defined (C++98 3.2p1)");
+					message_header(*fatal_def);
+					INFORM("prior definition here");
+					zcc_errors.inc_error();
+					// reduce to named-specifier
+					src.c_array<0>()[i].DeleteIdx<2>(0);
+					assert(is_C99_named_specifier(src.data<0>()[i],"class"));
+					goto CPP_class_specifier;
+					}					
+				src.c_array<0>()[i].type_code.set_type(tmp);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			//! \bug [find citation] states that conflicting enum, struct, or class must error
+			// tentatively forward-declare immediately
+			const type_system::type_index tmp2 = tmp ? 0 : types.register_structdecl_CPP(src.data<0>()[i].index_tokens[1].token.first,active_namespace,union_struct_decl::decl_class);
+			if (tmp2)
+				{	//! \test zcc/decl.C99/Pass_class_forward_def.hpp
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
+				assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp2);
+				assert(types.get_structdecl(tmp2));
+				src.c_array<0>()[i].type_code.set_type(tmp2);
+				src.c_array<0>()[i].flags |= PARSE_CLASS_STRUCT_TYPE;
+				_condense_const_volatile_onto_type(src,i,invariant_decl_scanner,"removing redundant const cv-qualifier (C++0X 7.1.6.1p1)","removing redundant volatile cv-qualifier (C++0X 7.1.6.1p1)");
+				};
+			assert(tmp || tmp2);
+			// parse the union and upgrade it to a full definition
+			const type_system::type_index vr_tmp = tmp ? tmp : tmp2;
+			const union_struct_decl* tmp3 = types.get_structdecl(vr_tmp);
+			assert(tmp3);
+			C_union_struct_def* tmp4 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
+			//! \todo record field structure, etc.
+			types.upgrade_decl_to_def(vr_tmp,tmp4);
+			assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==vr_tmp);
+			assert(types.get_C_structdef(vr_tmp));
+			if (   1<src.size<0>()-i
+				&& robust_token_is_char<';'>(src.data<0>()[i+1]))
+				{	// check for forward-declaration here
+				if ((type_spec::_const | type_spec::_volatile) & src.data<0>()[i].type_code.q_vector.back())
+					{	//! \test decl.C99/Error_class_def_const.hpp
+						//! \test decl.C99/Error_class_def_const2.hpp
+						//! \test decl.C99/Error_class_def_volatile.hpp
+						//! \test decl.C99/Error_class_def_volatile2.hpp
+						//! \test decl.C99/Error_class_def_const_volatile.hpp
+						//! \test decl.C99/Error_class_def_const_volatile2.hpp
+						//! \test decl.C99/Error_class_def_const_volatile3.hpp
+						//! \test decl.C99/Error_class_def_const_volatile4.hpp
+						//! \test decl.C99/Error_class_def_const_volatile5.hpp
+						//! \test decl.C99/Error_class_def_const_volatile6.hpp
+					message_header(src.data<0>()[i].index_tokens[0]);
+					INC_INFORM(ERR_STR);
+					INFORM("const/volatile qualification must apply to an object (C++0X 7.1.6.1p1)");
+					zcc_errors.inc_error();
+					// XXX may not behave well on trapping-int hosts XXX
+					src.c_array<0>()[i].type_code.q_vector.back() &= ~(type_spec::_const | type_spec::_volatile);
+					}
+				// accept definition
+				//! \test zcc/decl.C99/Pass_class_forward_def.hpp
+				i += 2;
 				continue;
 				}
-			free(namespace_name);
 			}
 		// enum was difficult to interpret in C++, so parked here while waiting on comp.std.c++
 		//! \todo actually, we can try forward-declare both scoped enums and enum-based enums (C++0X 7.2p3, these have enough size information); but other parts of the standard get in the way
@@ -14382,36 +14434,9 @@
 /*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"struct"))
 				{	// forward-declaration already handled
 				} */
-			else if (is_C99_named_specifier_definition(src.data<0>()[i],"class"))
-				{	// definitions...fine
-				char* namespace_name = active_namespace ? type_system::namespace_concatenate(src.data<0>()[i].index_tokens[1].token.first,active_namespace,"::") : NULL;
-				const char* fullname = namespace_name ? namespace_name : src.data<0>()[i].index_tokens[1].token.first;
-				const type_system::type_index tmp = types.get_id_struct_class(fullname);
-				free(namespace_name);
-				C_union_struct_def* tmp2 = NULL;
-				if (tmp)
-					{	// promoting forward-declare to definition
-						//! \test zcc/decl.C99/Pass_class_forward_def.hpp
-					const union_struct_decl* tmp3 = types.get_structdecl(tmp);
-					assert(tmp3);
-					tmp2 = new C_union_struct_def(*tmp3,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename);
-					//! \todo record field structure, etc.
-					types.upgrade_decl_to_def(tmp,tmp2);
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp);
-					assert(types.get_C_structdef(tmp));
-					}
-				else{	// definition
-						//! \test zcc/decl.C99/Pass_class_def.hpp
-					//! \todo record field structure, etc.
-					const type_system::type_index tmp3 = types.register_C_structdef(src.data<0>()[i].index_tokens[1].token.first,src.data<0>()[i].index_tokens[1].logical_line,src.data<0>()[i].index_tokens[1].src_filename,union_struct_decl::decl_class);
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first));
-					assert(types.get_id_struct_class(src.data<0>()[i].index_tokens[1].token.first)==tmp3);
-					assert(types.get_C_structdef(tmp3));
-					src.c_array<0>()[i].type_code.set_type(tmp3);
-					}
-				i += 2;
-				continue;
-				};
+/*			else if (is_C99_named_specifier_definition(src.data<0>()[i],"class"))
+				{	// forward-declaration already handled
+				} */
 			};
 		// namespace scanner
 		// need some scheme to handle unnamed namespaces (probably alphabetical counter after something illegal so unmatchable)

Added: trunk/tests/zcc/decl.C99/Error_class_def_const.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const class bad_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const2.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const2.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class bad_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const_volatile.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const_volatile.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const volatile class bad_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const_volatile2.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const_volatile2.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile const class bad_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const_volatile3.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const_volatile3.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const_volatile3.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const_volatile3.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+const class bad_test {
+	int x_factor;
+} volatile;
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const_volatile4.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const_volatile4.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const_volatile4.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const_volatile4.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile class bad_test {
+	int x_factor;
+} const;
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const_volatile5.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const_volatile5.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const_volatile5.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const_volatile5.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class bad_test {
+	int x_factor;
+} const volatile;
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_const_volatile6.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_const_volatile6.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_const_volatile6.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_const_volatile6.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class bad_test {
+	int x_factor;
+} volatile const;
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_volatile.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_volatile.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_volatile.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_volatile.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+volatile class bad_test {
+	int x_factor;
+};
+

Added: trunk/tests/zcc/decl.C99/Error_class_def_volatile2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Error_class_def_volatile2.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Error_class_def_volatile2.hpp	2010-09-01 05:33:04 UTC (rev 485)
@@ -0,0 +1,8 @@
+// decl.C99\Error_class_def_volatile2.hpp
+// using singly defined class
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class bad_test {
+	int x_factor;
+} volatile;
+



From zaimoni at mail.berlios.de  Sun Sep  5 08:09:17 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sun,  5 Sep 2010 08:09:17 +0200
Subject: [Zcplusplus-commits] r486 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100905060917.E8E98480F39@sheep.berlios.de>

Author: zaimoni
Date: 2010-09-05 08:09:17 +0200 (Sun, 05 Sep 2010)
New Revision: 486

Modified:
   trunk/CSupport.cpp
   trunk/tests/zcc/decl.C99/Pass_class_def.hpp
   trunk/tests/zcc/decl.C99/Pass_struct_def.h
   trunk/tests/zcc/decl.C99/Pass_struct_def.hpp
   trunk/tests/zcc/decl.C99/Pass_union_def.h
   trunk/tests/zcc/decl.C99/Pass_union_def.hpp
Log:
check that basic variable declarations work for union/struct/class

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-09-01 05:33:04 UTC (rev 485)
+++ trunk/CSupport.cpp	2010-09-05 06:09:17 UTC (rev 486)
@@ -4681,6 +4681,13 @@
 				src.DestroyNAtAndRotateTo<0>(2,i+1,src.size<0>()-offset);
 				offset += 2;
 				assert(is_C99_named_specifier_definition(src.data<0>()[i],tmp2));
+				// parser is having normal-form issues.  Shove named specifier definitions ahead of any const/volatile type qualifiers
+				size_t j = i;
+				while(0<j && (robust_token_is_string<5>(src.data<0>()[j-1],"const") || robust_token_is_string<8>(src.data<0>()[j-1],"volatile")))
+					{
+					std::swap(src.c_array<0>()[j],src.c_array<0>()[j-1]);
+					--j;
+					};
 				continue;
 				};
 			src.c_array<0>()[i].grab_index_token_from<1,0>(src.c_array<0>()[i+1]);
@@ -4689,6 +4696,13 @@
 			src.DestroyNAtAndRotateTo<0>(1,i+1,src.size<0>()-offset);
 			offset += 1;
 			assert(is_C99_named_specifier(src.data<0>()[i],tmp2));
+			// parser is having normal-form issues.  Shove named specifiers ahead of any const/volatile type qualifiers
+			size_t j = i;
+			while(0<j && (robust_token_is_string<5>(src.data<0>()[j-1],"const") || robust_token_is_string<8>(src.data<0>()[j-1],"volatile")))
+				{
+				std::swap(src.c_array<0>()[j],src.c_array<0>()[j-1]);
+				--j;
+				};
 			continue;
 			}
 		++i;
@@ -13740,6 +13754,48 @@
 		INC_INFORM("const ");
 	if (type_spec::_volatile & src.qualifier<0>())
 		INC_INFORM("volatile ");
+
+	if (types.get_enum_def(src.base_type_index))
+		INC_INFORM("enum ");
+	else{
+		zaimoni::POD_pair<const union_struct_decl*,const C_union_struct_def*> tmp;
+		tmp.first = types.get_structdecl(src.base_type_index);
+		if (tmp.first)
+			{
+			switch(tmp.first->keyword())
+			{
+			default: _fatal_code("invalid state",3); 
+			case union_struct_decl::decl_union:
+				INC_INFORM("union ");
+				break;
+			case union_struct_decl::decl_struct:
+				INC_INFORM("struct ");
+				break;
+			case union_struct_decl::decl_class:
+				INC_INFORM("class ");
+//				break;
+			}				
+			}
+		else{
+			tmp.second = types.get_C_structdef(src.base_type_index);
+			if (tmp.second)
+				{
+				switch(tmp.second->_decl.keyword())
+				{
+				default: _fatal_code("invalid state",3); 
+				case union_struct_decl::decl_union:
+					INC_INFORM("union ");
+					break;
+				case union_struct_decl::decl_struct:
+					INC_INFORM("struct ");
+					break;
+				case union_struct_decl::decl_class:
+					INC_INFORM("class ");
+//					break;
+				}				
+				}
+			}
+		}
 	INC_INFORM(type_name ? type_name : "<unresolved type>");
 
 	while(0<start_ptr_scan--)
@@ -13778,6 +13834,10 @@
 		{
 		assert(parse_tree::types);
 		render_type(src.type_code,*parse_tree::types,NULL);
+		if (   is_C99_named_specifier_definition(src,"enum")
+			|| is_C99_named_specifier_definition(src,"union")
+			|| is_C99_named_specifier_definition(src,"struct"))
+			INC_INFORM(*src.data<2>());
 		return true;
 		}
 	return false;
@@ -13801,6 +13861,11 @@
 		{
 		assert(parse_tree::types);
 		render_type(src.type_code,*parse_tree::types,NULL);
+		if (   is_C99_named_specifier_definition(src,"enum")
+			|| is_C99_named_specifier_definition(src,"union")
+			|| is_C99_named_specifier_definition(src,"class")
+			|| is_C99_named_specifier_definition(src,"struct"))
+			INC_INFORM(*src.data<2>());
 		return true;
 		}
 	if (is_CPP_namespace(src) && robust_token_is_string<9>(src.index_tokens[1].token,"<unknown>"))

Modified: trunk/tests/zcc/decl.C99/Pass_class_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_def.hpp	2010-09-01 05:33:04 UTC (rev 485)
+++ trunk/tests/zcc/decl.C99/Pass_class_def.hpp	2010-09-05 06:09:17 UTC (rev 486)
@@ -1,8 +1,20 @@
 // decl.C99\Pass_class_def.hpp
 // using singly defined struct
-// (C)2009 Kenneth Boyd, license: MIT.txt
+// (C)2009,2010 Kenneth Boyd, license: MIT.txt
 
 class good_test {
 	int x_factor;
 };
 
+// exercise some declarations
+class good_test x1;
+const class good_test c1;
+class good_test const c2;
+volatile class good_test v1;
+class good_test volatile v2;
+const volatile class good_test cv1;
+volatile const class good_test cv2;
+const class good_test volatile cv3;
+volatile class good_test const cv4;
+class good_test const volatile cv5;
+class good_test volatile const cv6;

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def.h	2010-09-01 05:33:04 UTC (rev 485)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def.h	2010-09-05 06:09:17 UTC (rev 486)
@@ -1,8 +1,20 @@
 // decl.C99\Pass_struct_def.h
 // using singly defined struct
-// (C)2009 Kenneth Boyd, license: MIT.txt
+// (C)2009,2010 Kenneth Boyd, license: MIT.txt
 
 struct good_test {
 	int x_factor;
 };
 
+// exercise some declarations
+struct good_test x1;
+const struct good_test c1;
+struct good_test const c2;
+volatile struct good_test v1;
+struct good_test volatile v2;
+const volatile struct good_test cv1;
+volatile const struct good_test cv2;
+const struct good_test volatile cv3;
+volatile struct good_test const cv4;
+struct good_test const volatile cv5;
+struct good_test volatile const cv6;

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def.hpp	2010-09-01 05:33:04 UTC (rev 485)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def.hpp	2010-09-05 06:09:17 UTC (rev 486)
@@ -1,8 +1,20 @@
 // decl.C99\Pass_struct_def.hpp
 // using singly defined struct
-// (C)2009 Kenneth Boyd, license: MIT.txt
+// (C)2009,2010 Kenneth Boyd, license: MIT.txt
 
 struct good_test {
 	int x_factor;
 };
 
+// exercise some declarations
+struct good_test x1;
+const struct good_test c1;
+struct good_test const c2;
+volatile struct good_test v1;
+struct good_test volatile v2;
+const volatile struct good_test cv1;
+volatile const struct good_test cv2;
+const struct good_test volatile cv3;
+volatile struct good_test const cv4;
+struct good_test const volatile cv5;
+struct good_test volatile const cv6;

Modified: trunk/tests/zcc/decl.C99/Pass_union_def.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def.h	2010-09-01 05:33:04 UTC (rev 485)
+++ trunk/tests/zcc/decl.C99/Pass_union_def.h	2010-09-05 06:09:17 UTC (rev 486)
@@ -1,8 +1,20 @@
 // decl.C99\Pass_union_def.h
 // using singly defined union
-// (C)2009 Kenneth Boyd, license: MIT.txt
+// (C)2009,2010 Kenneth Boyd, license: MIT.txt
 
 union good_test {
 	int x_factor;
 };
 
+// exercise some declarations
+union good_test x1;
+const union good_test c1;
+union good_test const c2;
+volatile union good_test v1;
+union good_test volatile v2;
+const volatile union good_test cv1;
+volatile const union good_test cv2;
+const union good_test volatile cv3;
+volatile union good_test const cv4;
+union good_test const volatile cv5;
+union good_test volatile const cv6;

Modified: trunk/tests/zcc/decl.C99/Pass_union_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def.hpp	2010-09-01 05:33:04 UTC (rev 485)
+++ trunk/tests/zcc/decl.C99/Pass_union_def.hpp	2010-09-05 06:09:17 UTC (rev 486)
@@ -1,8 +1,21 @@
 // decl.C99\Pass_union_def.hpp
 // using singly defined union
-// (C)2009 Kenneth Boyd, license: MIT.txt
+// (C)2009,2010 Kenneth Boyd, license: MIT.txt
 
 union good_test {
 	int x_factor;
 };
 
+// exercise some declarations
+union good_test x1;
+const union good_test c1;
+union good_test const c2;
+volatile union good_test v1;
+union good_test volatile v2;
+const volatile union good_test cv1;
+volatile const union good_test cv2;
+const union good_test volatile cv3;
+volatile union good_test const cv4;
+union good_test const volatile cv5;
+union good_test volatile const cv6;
+



From zaimoni at mail.berlios.de  Mon Sep  6 09:51:19 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Mon,  6 Sep 2010 09:51:19 +0200
Subject: [Zcplusplus-commits] r487 - trunk
Message-ID: <20100906075120.0067B480EBD@sheep.berlios.de>

Author: zaimoni
Date: 2010-09-06 09:51:19 +0200 (Mon, 06 Sep 2010)
New Revision: 487

Modified:
   trunk/CSupport.cpp
Log:
object file reduction (MingW32 4.3.3 release mode)

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-09-05 06:09:17 UTC (rev 486)
+++ trunk/CSupport.cpp	2010-09-06 07:51:19 UTC (rev 487)
@@ -4506,6 +4506,20 @@
 	return false;
 }
 
+static bool is_C99_named_specifier_definitionlike(const parse_tree& src)
+{
+	if (	NULL!=src.index_tokens[0].token.first
+#ifndef NDEBUG
+			&&	NULL!=src.index_tokens[0].src_filename
+#endif
+			&&	NULL!=src.index_tokens[1].token.first
+			&&	src.empty<0>()
+			&&	src.empty<1>()
+			&&	1==src.size<2>() && is_naked_brace_pair(*src.data<2>()))
+		return true;
+	return false;
+}
+
 static bool C99_looks_like_identifier(const parse_tree& x)
 {
 	if (!x.is_atomic()) return false;
@@ -13723,6 +13737,26 @@
 		}
 }
 
+// relies on _fatal_code being noreturn to avoid risk of undefined return value
+static const char* text_from_keyword(const union_struct_decl& x)
+{
+	switch(x.keyword())
+	{
+	default: _fatal_code("invalid state",3); 
+	case union_struct_decl::decl_union: return "union ";
+	case union_struct_decl::decl_struct: return "struct ";
+	case union_struct_decl::decl_class: return "class ";
+	}				
+}
+
+// this needs to line up with the return type for type_spec::qualifier
+static void display_qualifier_text(unsigned char x)
+{
+	if (type_spec::_restrict & x) INC_INFORM("restrict ");
+	if (type_spec::_const    & x) INC_INFORM("const ");
+	if (type_spec::_volatile & x) INC_INFORM("volatile ");
+}
+
 // language-specific printing overrides
 static void render_type(const type_spec& src,const type_system& types, const char* const name)
 {	// function types will need a different naming scheme
@@ -13739,61 +13773,24 @@
 				{
 				if (type_spec::_array & src.qualifier(start_ptr_scan+1)) continue;
 				INC_INFORM('*');
-				if (type_spec::_restrict & src.qualifier(start_ptr_scan+1))
-					INC_INFORM("restrict ");
-				if (type_spec::_const & src.qualifier(start_ptr_scan+1))
-					INC_INFORM("const ");
-				if (type_spec::_volatile & src.qualifier(start_ptr_scan+1))
-					INC_INFORM("volatile ");
+				display_qualifier_text(src.qualifier(start_ptr_scan+1));
 				};
 			INC_INFORM("(");
 			}
 		}
 		
-	if (type_spec::_const & src.qualifier<0>())
-		INC_INFORM("const ");
-	if (type_spec::_volatile & src.qualifier<0>())
-		INC_INFORM("volatile ");
+	display_qualifier_text(src.qualifier<0>());
 
 	if (types.get_enum_def(src.base_type_index))
 		INC_INFORM("enum ");
 	else{
 		zaimoni::POD_pair<const union_struct_decl*,const C_union_struct_def*> tmp;
 		tmp.first = types.get_structdecl(src.base_type_index);
-		if (tmp.first)
-			{
-			switch(tmp.first->keyword())
-			{
-			default: _fatal_code("invalid state",3); 
-			case union_struct_decl::decl_union:
-				INC_INFORM("union ");
-				break;
-			case union_struct_decl::decl_struct:
-				INC_INFORM("struct ");
-				break;
-			case union_struct_decl::decl_class:
-				INC_INFORM("class ");
-//				break;
-			}				
-			}
+		if (tmp.first) INC_INFORM(text_from_keyword(*tmp.first));
 		else{
 			tmp.second = types.get_C_structdef(src.base_type_index);
 			if (tmp.second)
-				{
-				switch(tmp.second->_decl.keyword())
-				{
-				default: _fatal_code("invalid state",3); 
-				case union_struct_decl::decl_union:
-					INC_INFORM("union ");
-					break;
-				case union_struct_decl::decl_struct:
-					INC_INFORM("struct ");
-					break;
-				case union_struct_decl::decl_class:
-					INC_INFORM("class ");
-//					break;
-				}				
-				}
+				INC_INFORM(text_from_keyword(tmp.second->_decl));
 			}
 		}
 	INC_INFORM(type_name ? type_name : "<unresolved type>");
@@ -13802,12 +13799,7 @@
 		{
 		if (type_spec::_array & src.qualifier(start_ptr_scan+1)) continue;
 		INC_INFORM('*');
-		if (type_spec::_restrict & src.qualifier(start_ptr_scan+1))
-			INC_INFORM("restrict ");
-		if (type_spec::_const & src.qualifier(start_ptr_scan+1))
-			INC_INFORM("const ");
-		if (type_spec::_volatile & src.qualifier(start_ptr_scan+1))
-			INC_INFORM("volatile ");		
+		display_qualifier_text(src.qualifier(start_ptr_scan+1));		
 		}
 
 	if (name && *name) INC_INFORM(name);
@@ -13834,9 +13826,7 @@
 		{
 		assert(parse_tree::types);
 		render_type(src.type_code,*parse_tree::types,NULL);
-		if (   is_C99_named_specifier_definition(src,"enum")
-			|| is_C99_named_specifier_definition(src,"union")
-			|| is_C99_named_specifier_definition(src,"struct"))
+		if (is_C99_named_specifier_definitionlike(src))
 			INC_INFORM(*src.data<2>());
 		return true;
 		}
@@ -13861,10 +13851,7 @@
 		{
 		assert(parse_tree::types);
 		render_type(src.type_code,*parse_tree::types,NULL);
-		if (   is_C99_named_specifier_definition(src,"enum")
-			|| is_C99_named_specifier_definition(src,"union")
-			|| is_C99_named_specifier_definition(src,"class")
-			|| is_C99_named_specifier_definition(src,"struct"))
+		if (is_C99_named_specifier_definitionlike(src))
 			INC_INFORM(*src.data<2>());
 		return true;
 		}



From zaimoni at mail.berlios.de  Wed Sep  8 05:17:14 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Wed,  8 Sep 2010 05:17:14 +0200
Subject: [Zcplusplus-commits] r488 - trunk/tests/zcc/decl.C99
Message-ID: <20100908031714.61FCB480FE8@sheep.berlios.de>

Author: zaimoni
Date: 2010-09-08 05:17:14 +0200 (Wed, 08 Sep 2010)
New Revision: 488

Added:
   trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp
   trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp
   trunk/tests/zcc/decl.C99/Pass_union_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp
Log:
C, C++: Verify that definitions that also declar an object are accepted

Added: trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp	2010-09-08 03:17:14 UTC (rev 488)
@@ -0,0 +1,20 @@
+// decl.C99\Pass_class_def_decl.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+class good_test {
+	int x_factor;
+} y;
+
+// exercise some declarations
+class good_test x1;
+const class good_test c1;
+class good_test const c2;
+volatile class good_test v1;
+class good_test volatile v2;
+const volatile class good_test cv1;
+volatile const class good_test cv2;
+const class good_test volatile cv3;
+volatile class good_test const cv4;
+class good_test const volatile cv5;
+class good_test volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h	2010-09-08 03:17:14 UTC (rev 488)
@@ -0,0 +1,20 @@
+// decl.C99\Pass_struct_def_decl.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} y;
+
+// exercise some declarations
+struct good_test x1;
+const struct good_test c1;
+struct good_test const c2;
+volatile struct good_test v1;
+struct good_test volatile v2;
+const volatile struct good_test cv1;
+volatile const struct good_test cv2;
+const struct good_test volatile cv3;
+volatile struct good_test const cv4;
+struct good_test const volatile cv5;
+struct good_test volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp	2010-09-08 03:17:14 UTC (rev 488)
@@ -0,0 +1,20 @@
+// decl.C99\Pass_struct_def_decl.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+struct good_test {
+	int x_factor;
+} y;
+
+// exercise some declarations
+struct good_test x1;
+const struct good_test c1;
+struct good_test const c2;
+volatile struct good_test v1;
+struct good_test volatile v2;
+const volatile struct good_test cv1;
+volatile const struct good_test cv2;
+const struct good_test volatile cv3;
+volatile struct good_test const cv4;
+struct good_test const volatile cv5;
+struct good_test volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_union_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def_decl.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_union_def_decl.h	2010-09-08 03:17:14 UTC (rev 488)
@@ -0,0 +1,20 @@
+// decl.C99\Pass_union_def_decl.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} y;
+
+// exercise some declarations
+union good_test x1;
+const union good_test c1;
+union good_test const c2;
+volatile union good_test v1;
+union good_test volatile v2;
+const volatile union good_test cv1;
+volatile const union good_test cv2;
+const union good_test volatile cv3;
+volatile union good_test const cv4;
+union good_test const volatile cv5;
+union good_test volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp	2010-09-08 03:17:14 UTC (rev 488)
@@ -0,0 +1,21 @@
+// decl.C99\Pass_union_def_decl.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+union good_test {
+	int x_factor;
+} y;
+
+// exercise some declarations
+union good_test x1;
+const union good_test c1;
+union good_test const c2;
+volatile union good_test v1;
+union good_test volatile v2;
+const volatile union good_test cv1;
+volatile const union good_test cv2;
+const union good_test volatile cv3;
+volatile union good_test const cv4;
+union good_test const volatile cv5;
+union good_test volatile const cv6;
+



From zaimoni at mail.berlios.de  Sun Sep 12 06:57:14 2010
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sun, 12 Sep 2010 06:57:14 +0200
Subject: [Zcplusplus-commits] r489 - in trunk: . tests/zcc/decl.C99
Message-ID: <20100912045714.A364E480F4F@sheep.berlios.de>

Author: zaimoni
Date: 2010-09-12 06:57:14 +0200 (Sun, 12 Sep 2010)
New Revision: 489

Added:
   trunk/tests/zcc/decl.C99/Pass_class_anon_def_decl.hpp
   trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.hpp
   trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.hpp
Modified:
   trunk/CSupport.cpp
Log:
minimal check of accepting C/C++ anonymous class/struct/union object declarations

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2010-09-08 03:17:14 UTC (rev 488)
+++ trunk/CSupport.cpp	2010-09-12 04:57:14 UTC (rev 489)
@@ -4583,6 +4583,13 @@
 				src.DestroyNAtAndRotateTo<0>(1,i+1,src.size<0>()-offset);
 				offset += 1;
 				assert(is_C99_anonymous_specifier(src.data<0>()[i],tmp2));
+				// parser is having normal-form issues.  Shove named specifier definitions ahead of any const/volatile type qualifiers
+				size_t j = i;
+				while(0<j && (robust_token_is_string<5>(src.data<0>()[j-1],"const") || robust_token_is_string<8>(src.data<0>()[j-1],"volatile")))
+					{
+					std::swap(src.c_array<0>()[j],src.c_array<0>()[j-1]);
+					--j;
+					};
 				continue;
 				};
 			if (!C99_looks_like_identifier(src.data<0>()[i+1]))
@@ -4671,6 +4678,13 @@
 				src.DestroyNAtAndRotateTo<0>(1,i+1,src.size<0>()-offset);
 				offset += 1;
 				assert(is_C99_anonymous_specifier(src.data<0>()[i],tmp2));
+				// parser is having normal-form issues.  Shove named specifiers ahead of any const/volatile type qualifiers
+				size_t j = i;
+				while(0<j && (robust_token_is_string<5>(src.data<0>()[j-1],"const") || robust_token_is_string<8>(src.data<0>()[j-1],"volatile")))
+					{
+					std::swap(src.c_array<0>()[j],src.c_array<0>()[j-1]);
+					--j;
+					};
 				continue;
 				};
 			if (!CPP_looks_like_identifier(src.data<0>()[i+1]))

Added: trunk/tests/zcc/decl.C99/Pass_class_anon_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_anon_def_decl.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_class_anon_def_decl.hpp	2010-09-12 04:57:14 UTC (rev 489)
@@ -0,0 +1,16 @@
+// decl.C99\Pass_class_anon_def_decl.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+// exercise some declarations
+class {int x_factor;} x1;
+const class {int x_factor;} c1;
+class {int x_factor;} const c2;
+volatile class {int x_factor;} v1;
+class {int x_factor;} volatile v2;
+const volatile class {int x_factor;} cv1;
+volatile const class {int x_factor;} cv2;
+const class {int x_factor;} volatile cv3;
+volatile class {int x_factor;} const cv4;
+class {int x_factor;} const volatile cv5;
+class {int x_factor;} volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.h	2010-09-12 04:57:14 UTC (rev 489)
@@ -0,0 +1,16 @@
+// decl.C99\Pass_struct_anon_def_decl.h
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+// exercise some declarations
+struct {int x_factor;} x1;
+const struct {int x_factor;} c1;
+struct {int x_factor;} const c2;
+volatile struct {int x_factor;} v1;
+struct {int x_factor;} volatile v2;
+const volatile struct {int x_factor;} cv1;
+volatile const struct {int x_factor;} cv2;
+const struct {int x_factor;} volatile cv3;
+volatile struct {int x_factor;} const cv4;
+struct {int x_factor;} const volatile cv5;
+struct {int x_factor;} volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_struct_anon_def_decl.hpp	2010-09-12 04:57:14 UTC (rev 489)
@@ -0,0 +1,16 @@
+// decl.C99\Pass_struct_anon_def_decl.hpp
+// using singly defined struct
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+// exercise some declarations
+struct {int x_factor;} x1;
+const struct {int x_factor;} c1;
+struct {int x_factor;} const c2;
+volatile struct {int x_factor;} v1;
+struct {int x_factor;} volatile v2;
+const volatile struct {int x_factor;} cv1;
+volatile const struct {int x_factor;} cv2;
+const struct {int x_factor;} volatile cv3;
+volatile struct {int x_factor;} const cv4;
+struct {int x_factor;} const volatile cv5;
+struct {int x_factor;} volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.h	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.h	2010-09-12 04:57:14 UTC (rev 489)
@@ -0,0 +1,16 @@
+// decl.C99\Pass_union_anon_def_decl.h
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+// exercise some declarations
+union {int x_factor;} x1;
+const union {int x_factor;} c1;
+union {int x_factor;} const c2;
+volatile union {int x_factor;} v1;
+union {int x_factor;} volatile v2;
+const volatile union {int x_factor;} cv1;
+volatile const union {int x_factor;} cv2;
+const union {int x_factor;} volatile cv3;
+volatile union {int x_factor;} const cv4;
+union {int x_factor;} const volatile cv5;
+union {int x_factor;} volatile const cv6;

Added: trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.hpp	                        (rev 0)
+++ trunk/tests/zcc/decl.C99/Pass_union_anon_def_decl.hpp	2010-09-12 04:57:14 UTC (rev 489)
@@ -0,0 +1,17 @@
+// decl.C99\Pass_union_anon_def_decl.hpp
+// using singly defined union
+// (C)2010 Kenneth Boyd, license: MIT.txt
+
+// exercise some declarations
+union {int x_factor;} x1;
+const union {int x_factor;} c1;
+union {int x_factor;} const c2;
+volatile union {int x_factor;} v1;
+union {int x_factor;} volatile v2;
+const volatile union {int x_factor;} cv1;
+volatile const union {int x_factor;} cv2;
+const union {int x_factor;} volatile cv3;
+volatile union {int x_factor;} const cv4;
+union {int x_factor;} const volatile cv5;
+union {int x_factor;} volatile const cv6;
+



