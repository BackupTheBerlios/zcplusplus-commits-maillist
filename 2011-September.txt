From zaimoni at mail.berlios.de  Sat Sep  3 00:57:32 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 00:57:32 +0200
Subject: [Zcplusplus-commits] r686 - trunk/tools
Message-ID: <20110902225732.A24B7480E54@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 00:57:32 +0200 (Sat, 03 Sep 2011)
New Revision: 686

Modified:
   trunk/tools/decl_infile.py
Log:
update series #1 for generated test cases

Modified: trunk/tools/decl_infile.py
===================================================================
--- trunk/tools/decl_infile.py	2011-08-31 01:10:34 UTC (rev 685)
+++ trunk/tools/decl_infile.py	2011-09-02 22:57:32 UTC (rev 686)
@@ -10,8 +10,11 @@
 target_files3 = ['Pass_enum_def2.hpp', 'Pass_struct_def2.hpp', 'Pass_union_def2.hpp']
 
 invariant_header_lines = [
-'SUFFIXES h hpp\n'
-'OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local\n'
+'SUFFIXES h hpp\n',
+'OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local\n',
+'OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert\n',
+'OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2\n',
+'OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1\n',
 '// (C)2009,2011 Kenneth Boyd, license: MIT.txt\n'
 ]
 
@@ -36,12 +39,12 @@
 					'Pass_union_def2.hpp':'\nunion good_test {\n\tint x_factor\n};\n\n'}
 
 section_comments = ['// ringing the changes on extern\n',
-"// ringing the changes on static\n// (don't test static const -- no chance to initialize before use)\n",
-'// extern/static not in first postion is deprecated, but legal\n',
+"// ringing the changes on static\n",
+'// extern/static not in first position is deprecated, but legal\n',
 '// ringing the changes on THREAD_LOCAL extern\n',
 '// ringing the changes on THREAD_LOCAL static\n',
-'// THREAD_LOCAL extern not in first two postions is deprecated, but legal\n',
-'// THREAD_LOCAL static not in first two postions is deprecated, but legal\n']
+'// THREAD_LOCAL extern not in first two positions is deprecated, but legal\n',
+'// THREAD_LOCAL static not in first two positions is deprecated, but legal\n']
 
 def enum_decl(i):
 	return "enum good_test x"+i
@@ -83,6 +86,15 @@
 			'Pass_union_def.in':union_def, 'Pass_enum_def2.hpp':enum_def,
 			'Pass_struct_def2.hpp':struct_def, 'Pass_union_def2.hpp':union_def}
 
+#so...generally (decl family)
+#* linkage of struct/union/enum good_test... is none in C, namespace-default in C++ (in practice C++ extern)
+#* linkage of variables is static:internal or extern:C/C++ external
+#** that is: 1 or 2
+#** default linkage: extern in general, const is extern/C static/C++ (2/C 1/C++)
+
+# in general, static const non-volatile variations should warn (the optimizer will go wild)
+# on the other hand, C99 6.7.8p10/C1X 6.7.9p10 gives full default initialization (as zero-initialization) so C is fine
+# C++0X 8.5p9: static storage duration is zero-initialized so C++ is fine as well
 test_qualifiers = [
 'extern',
 'extern const',
@@ -91,6 +103,7 @@
 'extern volatile const',
 
 'static',
+'static const',
 'static volatile',
 'static const volatile',
 'static volatile const',
@@ -102,6 +115,7 @@
 'volatile extern const',
 'volatile const extern',
 
+'const static',
 'volatile static',
 'const static volatile',
 'const volatile static',
@@ -120,7 +134,7 @@
 'THREAD_LOCAL extern volatile const',
 
 'static THREAD_LOCAL',
-'static THREAD_LOCAL const',	# next
+'static THREAD_LOCAL const',
 'static THREAD_LOCAL volatile',
 'static THREAD_LOCAL const volatile',
 'static THREAD_LOCAL volatile const',
@@ -202,33 +216,33 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1])
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5]+' '+var_decl[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2])
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9]+' '+var_decl[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10]+' '+var_decl[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3])
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20]+' '+var_decl[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22]+' '+var_decl[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4])
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30]+' '+var_decl[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32]+' '+var_decl[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5])
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40]+' '+var_decl[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42]+' '+var_decl[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6])
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68]+' '+var_decl[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70]+' '+var_decl[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write('// define-declares\n')
@@ -238,35 +252,78 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1])
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5]+' '+var_def[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2])
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9]+' '+var_def[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10]+' '+var_def[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3])
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20]+' '+var_def[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22]+' '+var_def[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4])
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30]+' '+var_def[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32]+' '+var_def[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5])
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40]+' '+var_def[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42]+' '+var_def[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6])
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68]+' '+var_def[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70]+' '+var_def[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
+#	check ZCC compiler extensions
+	TargetFile.write('\n// check ZCC compiler extensions\n')
+	TargetFile.write('#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__\n')
+	TargetFile.write('// the type names should have no linkage in C, external linkage in C++\n')
+	TargetFile.write('STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");\n')
+	for i in xrange(5+5+12+10+10+28+18):
+		TargetFile.write('STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test'+str(i+1)+'),"good_test'+str(i+1)+' has incorrect linkage");\n')
+
+	TargetFile.write('\n// check external linkage of variables\n')	
+	for i in xrange(5):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x_'+str(i+1)+'),"x_'+str(i+1)+' has incorrect linkage");\n')
+
+	for i in xrange(6):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x_'+str(i+11)+'),"x_'+str(i+11)+' has incorrect linkage");\n')
+
+	for i in xrange(10):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x_'+str(i+23)+'),"x_'+str(i+23)+' has incorrect linkage");\n')
+
+	for i in xrange(28):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x_'+str(i+43)+'),"x_'+str(i+43)+' has incorrect linkage");\n')
+
+	TargetFile.write('\n// check internal linkage of variables\n')
+	for i in xrange(5):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x_'+str(i+6)+'),"x_'+str(i+6)+' has incorrect linkage");\n')
+
+	for i in xrange(6):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x_'+str(i+17)+'),"x_'+str(i+17)+' has incorrect linkage");\n')
+
+	for i in xrange(10):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x_'+str(i+33)+'),"x_'+str(i+33)+' has incorrect linkage");\n')
+
+	for i in xrange(28):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x_'+str(i+71)+'),"x_'+str(i+71)+' has incorrect linkage");\n')
+
+	TargetFile.write('#endif\n')
 	TargetFile.close()
 
 def SpawnTestCase2(dest_file):
@@ -283,35 +340,70 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1])
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5]+' '+var_decl[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2])
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9]+' '+var_decl[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10]+' '+var_decl[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3])
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20]+' '+var_decl[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22]+' '+var_decl[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4])
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30]+' '+var_decl[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32]+' '+var_decl[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5])
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40]+' '+var_decl[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42]+' '+var_decl[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6])
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68]+' '+var_decl[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70]+' '+var_decl[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
+#	check ZCC compiler extensions
+	TargetFile.write('\n// check ZCC compiler extensions\n')
+	TargetFile.write('#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__\n')
+
+	TargetFile.write('// the type names should have no linkage in C, external linkage in C++\n')
+	TargetFile.write('STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");\n')
+
+	TargetFile.write('\n// check external linkage of variables\n')	
+	for i in xrange(5):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+
+	for i in xrange(6):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+
+	for i in xrange(10):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+
+	for i in xrange(28):
+		TargetFile.write('STATIC_ASSERT(2==__zcc_linkage(x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+
+	TargetFile.write('\n// check internal linkage of variables\n')
+	for i in xrange(5):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+
+	for i in xrange(6):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+
+	for i in xrange(10):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+
+	for i in xrange(28):
+		TargetFile.write('STATIC_ASSERT(1==__zcc_linkage(x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+
+	TargetFile.write('#endif\n')
+
 	# no define-declares
 	TargetFile.close()
 
@@ -319,7 +411,7 @@
 	TargetFile = open(dest_file,'w')
 	TargetFile.write('// decl.C99/'+dest_file+'\n')
 
-	for line in invariant_header_lines[2:]:
+	for line in invariant_header_lines[5:]:
 		TargetFile.write(line)
 	TargetFile.write(context[dest_file])
 	TargetFile.write(global_define[dest_file])
@@ -332,33 +424,33 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
 	# need: normal decl, def_decl work in namespaces
@@ -371,33 +463,33 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70].replace('THREAD_LOCAL','thread_local')+' '+var_decl[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write('// define-declares\n')
@@ -407,33 +499,33 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70].replace('THREAD_LOCAL','thread_local')+' '+var_def[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
 	# need: keyword suppression works in namespaces
@@ -446,33 +538,33 @@
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[1].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(4):
+	for i in xrange(5):
 		TargetFile.write(test_qualifiers[i+5].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+6))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[2].replace('THREAD_LOCAL','thread_local'))
-	for i in xrange(11):
-		TargetFile.write(test_qualifiers[i+9].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+10))+';\n')
+	for i in xrange(12):
+		TargetFile.write(test_qualifiers[i+10].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+11))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[3].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+20].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+21))+';\n')
+		TargetFile.write(test_qualifiers[i+22].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+23))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[4].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(10):
-		TargetFile.write(test_qualifiers[i+30].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+31))+';\n')
+		TargetFile.write(test_qualifiers[i+32].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+33))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[5].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+40].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+41))+';\n')
+		TargetFile.write(test_qualifiers[i+42].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+43))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write(section_comments[6].replace('THREAD_LOCAL','thread_local'))
 	for i in xrange(28):
-		TargetFile.write(test_qualifiers[i+68].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+69))+';\n')
+		TargetFile.write(test_qualifiers[i+70].replace('THREAD_LOCAL','thread_local')+' '+var_decl_terse[dest_file](str(i+71))+';\n')
 	TargetFile.write('\n')
 
 	TargetFile.write('}	// end namespace test2\n')



From zaimoni at mail.berlios.de  Sat Sep  3 01:02:32 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 01:02:32 +0200
Subject: [Zcplusplus-commits] r687 - trunk/tests/zcc.in/decl.C99
Message-ID: <20110902230233.0A17F480A1C@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 01:02:32 +0200 (Sat, 03 Sep 2011)
New Revision: 687

Modified:
   trunk/tests/zcc.in/decl.C99/Pass_struct_def_decl.in
   trunk/tests/zcc.in/decl.C99/Pass_union_def_decl.in
Log:
update series #1 for generated test cases: base files #1

Modified: trunk/tests/zcc.in/decl.C99/Pass_struct_def_decl.in
===================================================================
--- trunk/tests/zcc.in/decl.C99/Pass_struct_def_decl.in	2011-09-02 22:57:32 UTC (rev 686)
+++ trunk/tests/zcc.in/decl.C99/Pass_struct_def_decl.in	2011-09-02 23:02:32 UTC (rev 687)
@@ -1,5 +1,8 @@
 SUFFIXES h hpp
 OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local
+OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
+OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2
+OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
@@ -15,106 +18,215 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL struct good_test x21;
-extern THREAD_LOCAL const struct good_test x22;
-extern THREAD_LOCAL volatile struct good_test x23;
-extern THREAD_LOCAL const volatile struct good_test x24;
-extern THREAD_LOCAL volatile const struct good_test x25;
-THREAD_LOCAL extern struct good_test x26;
-THREAD_LOCAL extern const struct good_test x27;
-THREAD_LOCAL extern volatile struct good_test x28;
-THREAD_LOCAL extern const volatile struct good_test x29;
-THREAD_LOCAL extern volatile const struct good_test x30;
+extern THREAD_LOCAL struct good_test x23;
+extern THREAD_LOCAL const struct good_test x24;
+extern THREAD_LOCAL volatile struct good_test x25;
+extern THREAD_LOCAL const volatile struct good_test x26;
+extern THREAD_LOCAL volatile const struct good_test x27;
+THREAD_LOCAL extern struct good_test x28;
+THREAD_LOCAL extern const struct good_test x29;
+THREAD_LOCAL extern volatile struct good_test x30;
+THREAD_LOCAL extern const volatile struct good_test x31;
+THREAD_LOCAL extern volatile const struct good_test x32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL struct good_test x31;
-static THREAD_LOCAL const struct good_test x32;
-static THREAD_LOCAL volatile struct good_test x33;
-static THREAD_LOCAL const volatile struct good_test x34;
-static THREAD_LOCAL volatile const struct good_test x35;
-THREAD_LOCAL static struct good_test x36;
-THREAD_LOCAL static const struct good_test x37;
-THREAD_LOCAL static volatile struct good_test x38;
-THREAD_LOCAL static const volatile struct good_test x39;
-THREAD_LOCAL static volatile const struct good_test x40;
+static THREAD_LOCAL struct good_test x33;
+static THREAD_LOCAL const struct good_test x34;
+static THREAD_LOCAL volatile struct good_test x35;
+static THREAD_LOCAL const volatile struct good_test x36;
+static THREAD_LOCAL volatile const struct good_test x37;
+THREAD_LOCAL static struct good_test x38;
+THREAD_LOCAL static const struct good_test x39;
+THREAD_LOCAL static volatile struct good_test x40;
+THREAD_LOCAL static const volatile struct good_test x41;
+THREAD_LOCAL static volatile const struct good_test x42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL struct good_test x41;
-const extern THREAD_LOCAL struct good_test x42;
-extern volatile THREAD_LOCAL struct good_test x43;
-volatile extern THREAD_LOCAL struct good_test x44;
-extern const THREAD_LOCAL volatile struct good_test x45;
-extern const volatile THREAD_LOCAL struct good_test x46;
-const extern THREAD_LOCAL volatile struct good_test x47;
-const extern volatile THREAD_LOCAL struct good_test x48;
-const volatile extern THREAD_LOCAL struct good_test x49;
-extern volatile THREAD_LOCAL const struct good_test x50;
-extern volatile const THREAD_LOCAL struct good_test x51;
-volatile extern THREAD_LOCAL const struct good_test x52;
-volatile extern const THREAD_LOCAL struct good_test x53;
-volatile const extern THREAD_LOCAL struct good_test x54;
-THREAD_LOCAL const extern struct good_test x55;
-const THREAD_LOCAL extern struct good_test x56;
-THREAD_LOCAL volatile extern struct good_test x57;
-volatile THREAD_LOCAL extern struct good_test x58;
-THREAD_LOCAL const extern volatile struct good_test x59;
-THREAD_LOCAL const volatile extern struct good_test x60;
-const THREAD_LOCAL extern volatile struct good_test x61;
-const THREAD_LOCAL volatile extern struct good_test x62;
-const volatile THREAD_LOCAL extern struct good_test x63;
-THREAD_LOCAL volatile extern const struct good_test x64;
-THREAD_LOCAL volatile const extern struct good_test x65;
-volatile THREAD_LOCAL extern const struct good_test x66;
-volatile THREAD_LOCAL const extern struct good_test x67;
-volatile const THREAD_LOCAL extern struct good_test x68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL struct good_test x43;
+const extern THREAD_LOCAL struct good_test x44;
+extern volatile THREAD_LOCAL struct good_test x45;
+volatile extern THREAD_LOCAL struct good_test x46;
+extern const THREAD_LOCAL volatile struct good_test x47;
+extern const volatile THREAD_LOCAL struct good_test x48;
+const extern THREAD_LOCAL volatile struct good_test x49;
+const extern volatile THREAD_LOCAL struct good_test x50;
+const volatile extern THREAD_LOCAL struct good_test x51;
+extern volatile THREAD_LOCAL const struct good_test x52;
+extern volatile const THREAD_LOCAL struct good_test x53;
+volatile extern THREAD_LOCAL const struct good_test x54;
+volatile extern const THREAD_LOCAL struct good_test x55;
+volatile const extern THREAD_LOCAL struct good_test x56;
+THREAD_LOCAL const extern struct good_test x57;
+const THREAD_LOCAL extern struct good_test x58;
+THREAD_LOCAL volatile extern struct good_test x59;
+volatile THREAD_LOCAL extern struct good_test x60;
+THREAD_LOCAL const extern volatile struct good_test x61;
+THREAD_LOCAL const volatile extern struct good_test x62;
+const THREAD_LOCAL extern volatile struct good_test x63;
+const THREAD_LOCAL volatile extern struct good_test x64;
+const volatile THREAD_LOCAL extern struct good_test x65;
+THREAD_LOCAL volatile extern const struct good_test x66;
+THREAD_LOCAL volatile const extern struct good_test x67;
+volatile THREAD_LOCAL extern const struct good_test x68;
+volatile THREAD_LOCAL const extern struct good_test x69;
+volatile const THREAD_LOCAL extern struct good_test x70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL struct good_test x69;
-const static THREAD_LOCAL struct good_test x70;
-static volatile THREAD_LOCAL struct good_test x71;
-volatile static THREAD_LOCAL struct good_test x72;
-static const THREAD_LOCAL volatile struct good_test x73;
-static const volatile THREAD_LOCAL struct good_test x74;
-const static THREAD_LOCAL volatile struct good_test x75;
-const static volatile THREAD_LOCAL struct good_test x76;
-const volatile static THREAD_LOCAL struct good_test x77;
-static volatile THREAD_LOCAL const struct good_test x78;
-static volatile const THREAD_LOCAL struct good_test x79;
-volatile static THREAD_LOCAL const struct good_test x80;
-volatile static const THREAD_LOCAL struct good_test x81;
-volatile const static THREAD_LOCAL struct good_test x82;
-THREAD_LOCAL const static struct good_test x83;
-const THREAD_LOCAL static struct good_test x84;
-THREAD_LOCAL volatile static struct good_test x85;
-volatile THREAD_LOCAL static struct good_test x86;
-THREAD_LOCAL const static volatile struct good_test x87;
-THREAD_LOCAL const volatile static struct good_test x88;
-const THREAD_LOCAL static volatile struct good_test x89;
-const THREAD_LOCAL volatile static struct good_test x90;
-const volatile THREAD_LOCAL static struct good_test x91;
-THREAD_LOCAL volatile static const struct good_test x92;
-THREAD_LOCAL volatile const static struct good_test x93;
-volatile THREAD_LOCAL static const struct good_test x94;
-volatile THREAD_LOCAL const static struct good_test x95;
-volatile const THREAD_LOCAL static struct good_test x96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL struct good_test x71;
+const static THREAD_LOCAL struct good_test x72;
+static volatile THREAD_LOCAL struct good_test x73;
+volatile static THREAD_LOCAL struct good_test x74;
+static const THREAD_LOCAL volatile struct good_test x75;
+static const volatile THREAD_LOCAL struct good_test x76;
+const static THREAD_LOCAL volatile struct good_test x77;
+const static volatile THREAD_LOCAL struct good_test x78;
+const volatile static THREAD_LOCAL struct good_test x79;
+static volatile THREAD_LOCAL const struct good_test x80;
+static volatile const THREAD_LOCAL struct good_test x81;
+volatile static THREAD_LOCAL const struct good_test x82;
+volatile static const THREAD_LOCAL struct good_test x83;
+volatile const static THREAD_LOCAL struct good_test x84;
+THREAD_LOCAL const static struct good_test x85;
+const THREAD_LOCAL static struct good_test x86;
+THREAD_LOCAL volatile static struct good_test x87;
+volatile THREAD_LOCAL static struct good_test x88;
+THREAD_LOCAL const static volatile struct good_test x89;
+THREAD_LOCAL const volatile static struct good_test x90;
+const THREAD_LOCAL static volatile struct good_test x91;
+const THREAD_LOCAL volatile static struct good_test x92;
+const volatile THREAD_LOCAL static struct good_test x93;
+THREAD_LOCAL volatile static const struct good_test x94;
+THREAD_LOCAL volatile const static struct good_test x95;
+volatile THREAD_LOCAL static const struct good_test x96;
+volatile THREAD_LOCAL const static struct good_test x97;
+volatile const THREAD_LOCAL static struct good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+STATIC_ASSERT(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+STATIC_ASSERT(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc.in/decl.C99/Pass_union_def_decl.in
===================================================================
--- trunk/tests/zcc.in/decl.C99/Pass_union_def_decl.in	2011-09-02 22:57:32 UTC (rev 686)
+++ trunk/tests/zcc.in/decl.C99/Pass_union_def_decl.in	2011-09-02 23:02:32 UTC (rev 687)
@@ -1,5 +1,8 @@
 SUFFIXES h hpp
 OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local
+OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
+OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2
+OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
@@ -15,106 +18,215 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL union good_test x21;
-extern THREAD_LOCAL const union good_test x22;
-extern THREAD_LOCAL volatile union good_test x23;
-extern THREAD_LOCAL const volatile union good_test x24;
-extern THREAD_LOCAL volatile const union good_test x25;
-THREAD_LOCAL extern union good_test x26;
-THREAD_LOCAL extern const union good_test x27;
-THREAD_LOCAL extern volatile union good_test x28;
-THREAD_LOCAL extern const volatile union good_test x29;
-THREAD_LOCAL extern volatile const union good_test x30;
+extern THREAD_LOCAL union good_test x23;
+extern THREAD_LOCAL const union good_test x24;
+extern THREAD_LOCAL volatile union good_test x25;
+extern THREAD_LOCAL const volatile union good_test x26;
+extern THREAD_LOCAL volatile const union good_test x27;
+THREAD_LOCAL extern union good_test x28;
+THREAD_LOCAL extern const union good_test x29;
+THREAD_LOCAL extern volatile union good_test x30;
+THREAD_LOCAL extern const volatile union good_test x31;
+THREAD_LOCAL extern volatile const union good_test x32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL union good_test x31;
-static THREAD_LOCAL const union good_test x32;
-static THREAD_LOCAL volatile union good_test x33;
-static THREAD_LOCAL const volatile union good_test x34;
-static THREAD_LOCAL volatile const union good_test x35;
-THREAD_LOCAL static union good_test x36;
-THREAD_LOCAL static const union good_test x37;
-THREAD_LOCAL static volatile union good_test x38;
-THREAD_LOCAL static const volatile union good_test x39;
-THREAD_LOCAL static volatile const union good_test x40;
+static THREAD_LOCAL union good_test x33;
+static THREAD_LOCAL const union good_test x34;
+static THREAD_LOCAL volatile union good_test x35;
+static THREAD_LOCAL const volatile union good_test x36;
+static THREAD_LOCAL volatile const union good_test x37;
+THREAD_LOCAL static union good_test x38;
+THREAD_LOCAL static const union good_test x39;
+THREAD_LOCAL static volatile union good_test x40;
+THREAD_LOCAL static const volatile union good_test x41;
+THREAD_LOCAL static volatile const union good_test x42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL union good_test x41;
-const extern THREAD_LOCAL union good_test x42;
-extern volatile THREAD_LOCAL union good_test x43;
-volatile extern THREAD_LOCAL union good_test x44;
-extern const THREAD_LOCAL volatile union good_test x45;
-extern const volatile THREAD_LOCAL union good_test x46;
-const extern THREAD_LOCAL volatile union good_test x47;
-const extern volatile THREAD_LOCAL union good_test x48;
-const volatile extern THREAD_LOCAL union good_test x49;
-extern volatile THREAD_LOCAL const union good_test x50;
-extern volatile const THREAD_LOCAL union good_test x51;
-volatile extern THREAD_LOCAL const union good_test x52;
-volatile extern const THREAD_LOCAL union good_test x53;
-volatile const extern THREAD_LOCAL union good_test x54;
-THREAD_LOCAL const extern union good_test x55;
-const THREAD_LOCAL extern union good_test x56;
-THREAD_LOCAL volatile extern union good_test x57;
-volatile THREAD_LOCAL extern union good_test x58;
-THREAD_LOCAL const extern volatile union good_test x59;
-THREAD_LOCAL const volatile extern union good_test x60;
-const THREAD_LOCAL extern volatile union good_test x61;
-const THREAD_LOCAL volatile extern union good_test x62;
-const volatile THREAD_LOCAL extern union good_test x63;
-THREAD_LOCAL volatile extern const union good_test x64;
-THREAD_LOCAL volatile const extern union good_test x65;
-volatile THREAD_LOCAL extern const union good_test x66;
-volatile THREAD_LOCAL const extern union good_test x67;
-volatile const THREAD_LOCAL extern union good_test x68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL union good_test x43;
+const extern THREAD_LOCAL union good_test x44;
+extern volatile THREAD_LOCAL union good_test x45;
+volatile extern THREAD_LOCAL union good_test x46;
+extern const THREAD_LOCAL volatile union good_test x47;
+extern const volatile THREAD_LOCAL union good_test x48;
+const extern THREAD_LOCAL volatile union good_test x49;
+const extern volatile THREAD_LOCAL union good_test x50;
+const volatile extern THREAD_LOCAL union good_test x51;
+extern volatile THREAD_LOCAL const union good_test x52;
+extern volatile const THREAD_LOCAL union good_test x53;
+volatile extern THREAD_LOCAL const union good_test x54;
+volatile extern const THREAD_LOCAL union good_test x55;
+volatile const extern THREAD_LOCAL union good_test x56;
+THREAD_LOCAL const extern union good_test x57;
+const THREAD_LOCAL extern union good_test x58;
+THREAD_LOCAL volatile extern union good_test x59;
+volatile THREAD_LOCAL extern union good_test x60;
+THREAD_LOCAL const extern volatile union good_test x61;
+THREAD_LOCAL const volatile extern union good_test x62;
+const THREAD_LOCAL extern volatile union good_test x63;
+const THREAD_LOCAL volatile extern union good_test x64;
+const volatile THREAD_LOCAL extern union good_test x65;
+THREAD_LOCAL volatile extern const union good_test x66;
+THREAD_LOCAL volatile const extern union good_test x67;
+volatile THREAD_LOCAL extern const union good_test x68;
+volatile THREAD_LOCAL const extern union good_test x69;
+volatile const THREAD_LOCAL extern union good_test x70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL union good_test x69;
-const static THREAD_LOCAL union good_test x70;
-static volatile THREAD_LOCAL union good_test x71;
-volatile static THREAD_LOCAL union good_test x72;
-static const THREAD_LOCAL volatile union good_test x73;
-static const volatile THREAD_LOCAL union good_test x74;
-const static THREAD_LOCAL volatile union good_test x75;
-const static volatile THREAD_LOCAL union good_test x76;
-const volatile static THREAD_LOCAL union good_test x77;
-static volatile THREAD_LOCAL const union good_test x78;
-static volatile const THREAD_LOCAL union good_test x79;
-volatile static THREAD_LOCAL const union good_test x80;
-volatile static const THREAD_LOCAL union good_test x81;
-volatile const static THREAD_LOCAL union good_test x82;
-THREAD_LOCAL const static union good_test x83;
-const THREAD_LOCAL static union good_test x84;
-THREAD_LOCAL volatile static union good_test x85;
-volatile THREAD_LOCAL static union good_test x86;
-THREAD_LOCAL const static volatile union good_test x87;
-THREAD_LOCAL const volatile static union good_test x88;
-const THREAD_LOCAL static volatile union good_test x89;
-const THREAD_LOCAL volatile static union good_test x90;
-const volatile THREAD_LOCAL static union good_test x91;
-THREAD_LOCAL volatile static const union good_test x92;
-THREAD_LOCAL volatile const static union good_test x93;
-volatile THREAD_LOCAL static const union good_test x94;
-volatile THREAD_LOCAL const static union good_test x95;
-volatile const THREAD_LOCAL static union good_test x96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL union good_test x71;
+const static THREAD_LOCAL union good_test x72;
+static volatile THREAD_LOCAL union good_test x73;
+volatile static THREAD_LOCAL union good_test x74;
+static const THREAD_LOCAL volatile union good_test x75;
+static const volatile THREAD_LOCAL union good_test x76;
+const static THREAD_LOCAL volatile union good_test x77;
+const static volatile THREAD_LOCAL union good_test x78;
+const volatile static THREAD_LOCAL union good_test x79;
+static volatile THREAD_LOCAL const union good_test x80;
+static volatile const THREAD_LOCAL union good_test x81;
+volatile static THREAD_LOCAL const union good_test x82;
+volatile static const THREAD_LOCAL union good_test x83;
+volatile const static THREAD_LOCAL union good_test x84;
+THREAD_LOCAL const static union good_test x85;
+const THREAD_LOCAL static union good_test x86;
+THREAD_LOCAL volatile static union good_test x87;
+volatile THREAD_LOCAL static union good_test x88;
+THREAD_LOCAL const static volatile union good_test x89;
+THREAD_LOCAL const volatile static union good_test x90;
+const THREAD_LOCAL static volatile union good_test x91;
+const THREAD_LOCAL volatile static union good_test x92;
+const volatile THREAD_LOCAL static union good_test x93;
+THREAD_LOCAL volatile static const union good_test x94;
+THREAD_LOCAL volatile const static union good_test x95;
+volatile THREAD_LOCAL static const union good_test x96;
+volatile THREAD_LOCAL const static union good_test x97;
+volatile const THREAD_LOCAL static union good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+STATIC_ASSERT(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+STATIC_ASSERT(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sat Sep  3 01:03:16 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 01:03:16 +0200
Subject: [Zcplusplus-commits] r688 - trunk/tests/zcc.in/decl.C99
Message-ID: <20110902230316.2545E480A1C@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 01:03:15 +0200 (Sat, 03 Sep 2011)
New Revision: 688

Modified:
   trunk/tests/zcc.in/decl.C99/Pass_enum_def_decl.in
Log:
update series #1 for generated test cases: base files #2

Modified: trunk/tests/zcc.in/decl.C99/Pass_enum_def_decl.in
===================================================================
--- trunk/tests/zcc.in/decl.C99/Pass_enum_def_decl.in	2011-09-02 23:02:32 UTC (rev 687)
+++ trunk/tests/zcc.in/decl.C99/Pass_enum_def_decl.in	2011-09-02 23:03:15 UTC (rev 688)
@@ -1,5 +1,8 @@
 SUFFIXES h hpp
 OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local
+OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
+OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2
+OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
@@ -15,106 +18,215 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL enum good_test x21;
-extern THREAD_LOCAL const enum good_test x22;
-extern THREAD_LOCAL volatile enum good_test x23;
-extern THREAD_LOCAL const volatile enum good_test x24;
-extern THREAD_LOCAL volatile const enum good_test x25;
-THREAD_LOCAL extern enum good_test x26;
-THREAD_LOCAL extern const enum good_test x27;
-THREAD_LOCAL extern volatile enum good_test x28;
-THREAD_LOCAL extern const volatile enum good_test x29;
-THREAD_LOCAL extern volatile const enum good_test x30;
+extern THREAD_LOCAL enum good_test x23;
+extern THREAD_LOCAL const enum good_test x24;
+extern THREAD_LOCAL volatile enum good_test x25;
+extern THREAD_LOCAL const volatile enum good_test x26;
+extern THREAD_LOCAL volatile const enum good_test x27;
+THREAD_LOCAL extern enum good_test x28;
+THREAD_LOCAL extern const enum good_test x29;
+THREAD_LOCAL extern volatile enum good_test x30;
+THREAD_LOCAL extern const volatile enum good_test x31;
+THREAD_LOCAL extern volatile const enum good_test x32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL enum good_test x31;
-static THREAD_LOCAL const enum good_test x32;
-static THREAD_LOCAL volatile enum good_test x33;
-static THREAD_LOCAL const volatile enum good_test x34;
-static THREAD_LOCAL volatile const enum good_test x35;
-THREAD_LOCAL static enum good_test x36;
-THREAD_LOCAL static const enum good_test x37;
-THREAD_LOCAL static volatile enum good_test x38;
-THREAD_LOCAL static const volatile enum good_test x39;
-THREAD_LOCAL static volatile const enum good_test x40;
+static THREAD_LOCAL enum good_test x33;
+static THREAD_LOCAL const enum good_test x34;
+static THREAD_LOCAL volatile enum good_test x35;
+static THREAD_LOCAL const volatile enum good_test x36;
+static THREAD_LOCAL volatile const enum good_test x37;
+THREAD_LOCAL static enum good_test x38;
+THREAD_LOCAL static const enum good_test x39;
+THREAD_LOCAL static volatile enum good_test x40;
+THREAD_LOCAL static const volatile enum good_test x41;
+THREAD_LOCAL static volatile const enum good_test x42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL enum good_test x41;
-const extern THREAD_LOCAL enum good_test x42;
-extern volatile THREAD_LOCAL enum good_test x43;
-volatile extern THREAD_LOCAL enum good_test x44;
-extern const THREAD_LOCAL volatile enum good_test x45;
-extern const volatile THREAD_LOCAL enum good_test x46;
-const extern THREAD_LOCAL volatile enum good_test x47;
-const extern volatile THREAD_LOCAL enum good_test x48;
-const volatile extern THREAD_LOCAL enum good_test x49;
-extern volatile THREAD_LOCAL const enum good_test x50;
-extern volatile const THREAD_LOCAL enum good_test x51;
-volatile extern THREAD_LOCAL const enum good_test x52;
-volatile extern const THREAD_LOCAL enum good_test x53;
-volatile const extern THREAD_LOCAL enum good_test x54;
-THREAD_LOCAL const extern enum good_test x55;
-const THREAD_LOCAL extern enum good_test x56;
-THREAD_LOCAL volatile extern enum good_test x57;
-volatile THREAD_LOCAL extern enum good_test x58;
-THREAD_LOCAL const extern volatile enum good_test x59;
-THREAD_LOCAL const volatile extern enum good_test x60;
-const THREAD_LOCAL extern volatile enum good_test x61;
-const THREAD_LOCAL volatile extern enum good_test x62;
-const volatile THREAD_LOCAL extern enum good_test x63;
-THREAD_LOCAL volatile extern const enum good_test x64;
-THREAD_LOCAL volatile const extern enum good_test x65;
-volatile THREAD_LOCAL extern const enum good_test x66;
-volatile THREAD_LOCAL const extern enum good_test x67;
-volatile const THREAD_LOCAL extern enum good_test x68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL enum good_test x43;
+const extern THREAD_LOCAL enum good_test x44;
+extern volatile THREAD_LOCAL enum good_test x45;
+volatile extern THREAD_LOCAL enum good_test x46;
+extern const THREAD_LOCAL volatile enum good_test x47;
+extern const volatile THREAD_LOCAL enum good_test x48;
+const extern THREAD_LOCAL volatile enum good_test x49;
+const extern volatile THREAD_LOCAL enum good_test x50;
+const volatile extern THREAD_LOCAL enum good_test x51;
+extern volatile THREAD_LOCAL const enum good_test x52;
+extern volatile const THREAD_LOCAL enum good_test x53;
+volatile extern THREAD_LOCAL const enum good_test x54;
+volatile extern const THREAD_LOCAL enum good_test x55;
+volatile const extern THREAD_LOCAL enum good_test x56;
+THREAD_LOCAL const extern enum good_test x57;
+const THREAD_LOCAL extern enum good_test x58;
+THREAD_LOCAL volatile extern enum good_test x59;
+volatile THREAD_LOCAL extern enum good_test x60;
+THREAD_LOCAL const extern volatile enum good_test x61;
+THREAD_LOCAL const volatile extern enum good_test x62;
+const THREAD_LOCAL extern volatile enum good_test x63;
+const THREAD_LOCAL volatile extern enum good_test x64;
+const volatile THREAD_LOCAL extern enum good_test x65;
+THREAD_LOCAL volatile extern const enum good_test x66;
+THREAD_LOCAL volatile const extern enum good_test x67;
+volatile THREAD_LOCAL extern const enum good_test x68;
+volatile THREAD_LOCAL const extern enum good_test x69;
+volatile const THREAD_LOCAL extern enum good_test x70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL enum good_test x69;
-const static THREAD_LOCAL enum good_test x70;
-static volatile THREAD_LOCAL enum good_test x71;
-volatile static THREAD_LOCAL enum good_test x72;
-static const THREAD_LOCAL volatile enum good_test x73;
-static const volatile THREAD_LOCAL enum good_test x74;
-const static THREAD_LOCAL volatile enum good_test x75;
-const static volatile THREAD_LOCAL enum good_test x76;
-const volatile static THREAD_LOCAL enum good_test x77;
-static volatile THREAD_LOCAL const enum good_test x78;
-static volatile const THREAD_LOCAL enum good_test x79;
-volatile static THREAD_LOCAL const enum good_test x80;
-volatile static const THREAD_LOCAL enum good_test x81;
-volatile const static THREAD_LOCAL enum good_test x82;
-THREAD_LOCAL const static enum good_test x83;
-const THREAD_LOCAL static enum good_test x84;
-THREAD_LOCAL volatile static enum good_test x85;
-volatile THREAD_LOCAL static enum good_test x86;
-THREAD_LOCAL const static volatile enum good_test x87;
-THREAD_LOCAL const volatile static enum good_test x88;
-const THREAD_LOCAL static volatile enum good_test x89;
-const THREAD_LOCAL volatile static enum good_test x90;
-const volatile THREAD_LOCAL static enum good_test x91;
-THREAD_LOCAL volatile static const enum good_test x92;
-THREAD_LOCAL volatile const static enum good_test x93;
-volatile THREAD_LOCAL static const enum good_test x94;
-volatile THREAD_LOCAL const static enum good_test x95;
-volatile const THREAD_LOCAL static enum good_test x96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL enum good_test x71;
+const static THREAD_LOCAL enum good_test x72;
+static volatile THREAD_LOCAL enum good_test x73;
+volatile static THREAD_LOCAL enum good_test x74;
+static const THREAD_LOCAL volatile enum good_test x75;
+static const volatile THREAD_LOCAL enum good_test x76;
+const static THREAD_LOCAL volatile enum good_test x77;
+const static volatile THREAD_LOCAL enum good_test x78;
+const volatile static THREAD_LOCAL enum good_test x79;
+static volatile THREAD_LOCAL const enum good_test x80;
+static volatile const THREAD_LOCAL enum good_test x81;
+volatile static THREAD_LOCAL const enum good_test x82;
+volatile static const THREAD_LOCAL enum good_test x83;
+volatile const static THREAD_LOCAL enum good_test x84;
+THREAD_LOCAL const static enum good_test x85;
+const THREAD_LOCAL static enum good_test x86;
+THREAD_LOCAL volatile static enum good_test x87;
+volatile THREAD_LOCAL static enum good_test x88;
+THREAD_LOCAL const static volatile enum good_test x89;
+THREAD_LOCAL const volatile static enum good_test x90;
+const THREAD_LOCAL static volatile enum good_test x91;
+const THREAD_LOCAL volatile static enum good_test x92;
+const volatile THREAD_LOCAL static enum good_test x93;
+THREAD_LOCAL volatile static const enum good_test x94;
+THREAD_LOCAL volatile const static enum good_test x95;
+volatile THREAD_LOCAL static const enum good_test x96;
+volatile THREAD_LOCAL const static enum good_test x97;
+volatile const THREAD_LOCAL static enum good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+STATIC_ASSERT(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+STATIC_ASSERT(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sat Sep  3 01:05:54 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 01:05:54 +0200
Subject: [Zcplusplus-commits] r689 - trunk/tests/zcc/decl.C99
Message-ID: <20110902230554.9C115480A1C@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 01:05:54 +0200 (Sat, 03 Sep 2011)
New Revision: 689

Modified:
   trunk/tests/zcc/decl.C99/Pass_enum_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_enum_def_decl.hpp
Log:
update series #1 for generated test cases: test cases #1

Modified: trunk/tests/zcc/decl.C99/Pass_enum_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_enum_def_decl.h	2011-09-02 23:03:15 UTC (rev 688)
+++ trunk/tests/zcc/decl.C99/Pass_enum_def_decl.h	2011-09-02 23:05:54 UTC (rev 689)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_enum_def_decl.h
+// Pass_enum_def_decl.h
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
@@ -14,106 +14,215 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local enum good_test x21;
-extern _Thread_local const enum good_test x22;
-extern _Thread_local volatile enum good_test x23;
-extern _Thread_local const volatile enum good_test x24;
-extern _Thread_local volatile const enum good_test x25;
-_Thread_local extern enum good_test x26;
-_Thread_local extern const enum good_test x27;
-_Thread_local extern volatile enum good_test x28;
-_Thread_local extern const volatile enum good_test x29;
-_Thread_local extern volatile const enum good_test x30;
+extern _Thread_local enum good_test x23;
+extern _Thread_local const enum good_test x24;
+extern _Thread_local volatile enum good_test x25;
+extern _Thread_local const volatile enum good_test x26;
+extern _Thread_local volatile const enum good_test x27;
+_Thread_local extern enum good_test x28;
+_Thread_local extern const enum good_test x29;
+_Thread_local extern volatile enum good_test x30;
+_Thread_local extern const volatile enum good_test x31;
+_Thread_local extern volatile const enum good_test x32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local enum good_test x31;
-static _Thread_local const enum good_test x32;
-static _Thread_local volatile enum good_test x33;
-static _Thread_local const volatile enum good_test x34;
-static _Thread_local volatile const enum good_test x35;
-_Thread_local static enum good_test x36;
-_Thread_local static const enum good_test x37;
-_Thread_local static volatile enum good_test x38;
-_Thread_local static const volatile enum good_test x39;
-_Thread_local static volatile const enum good_test x40;
+static _Thread_local enum good_test x33;
+static _Thread_local const enum good_test x34;
+static _Thread_local volatile enum good_test x35;
+static _Thread_local const volatile enum good_test x36;
+static _Thread_local volatile const enum good_test x37;
+_Thread_local static enum good_test x38;
+_Thread_local static const enum good_test x39;
+_Thread_local static volatile enum good_test x40;
+_Thread_local static const volatile enum good_test x41;
+_Thread_local static volatile const enum good_test x42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local enum good_test x41;
-const extern _Thread_local enum good_test x42;
-extern volatile _Thread_local enum good_test x43;
-volatile extern _Thread_local enum good_test x44;
-extern const _Thread_local volatile enum good_test x45;
-extern const volatile _Thread_local enum good_test x46;
-const extern _Thread_local volatile enum good_test x47;
-const extern volatile _Thread_local enum good_test x48;
-const volatile extern _Thread_local enum good_test x49;
-extern volatile _Thread_local const enum good_test x50;
-extern volatile const _Thread_local enum good_test x51;
-volatile extern _Thread_local const enum good_test x52;
-volatile extern const _Thread_local enum good_test x53;
-volatile const extern _Thread_local enum good_test x54;
-_Thread_local const extern enum good_test x55;
-const _Thread_local extern enum good_test x56;
-_Thread_local volatile extern enum good_test x57;
-volatile _Thread_local extern enum good_test x58;
-_Thread_local const extern volatile enum good_test x59;
-_Thread_local const volatile extern enum good_test x60;
-const _Thread_local extern volatile enum good_test x61;
-const _Thread_local volatile extern enum good_test x62;
-const volatile _Thread_local extern enum good_test x63;
-_Thread_local volatile extern const enum good_test x64;
-_Thread_local volatile const extern enum good_test x65;
-volatile _Thread_local extern const enum good_test x66;
-volatile _Thread_local const extern enum good_test x67;
-volatile const _Thread_local extern enum good_test x68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local enum good_test x43;
+const extern _Thread_local enum good_test x44;
+extern volatile _Thread_local enum good_test x45;
+volatile extern _Thread_local enum good_test x46;
+extern const _Thread_local volatile enum good_test x47;
+extern const volatile _Thread_local enum good_test x48;
+const extern _Thread_local volatile enum good_test x49;
+const extern volatile _Thread_local enum good_test x50;
+const volatile extern _Thread_local enum good_test x51;
+extern volatile _Thread_local const enum good_test x52;
+extern volatile const _Thread_local enum good_test x53;
+volatile extern _Thread_local const enum good_test x54;
+volatile extern const _Thread_local enum good_test x55;
+volatile const extern _Thread_local enum good_test x56;
+_Thread_local const extern enum good_test x57;
+const _Thread_local extern enum good_test x58;
+_Thread_local volatile extern enum good_test x59;
+volatile _Thread_local extern enum good_test x60;
+_Thread_local const extern volatile enum good_test x61;
+_Thread_local const volatile extern enum good_test x62;
+const _Thread_local extern volatile enum good_test x63;
+const _Thread_local volatile extern enum good_test x64;
+const volatile _Thread_local extern enum good_test x65;
+_Thread_local volatile extern const enum good_test x66;
+_Thread_local volatile const extern enum good_test x67;
+volatile _Thread_local extern const enum good_test x68;
+volatile _Thread_local const extern enum good_test x69;
+volatile const _Thread_local extern enum good_test x70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local enum good_test x69;
-const static _Thread_local enum good_test x70;
-static volatile _Thread_local enum good_test x71;
-volatile static _Thread_local enum good_test x72;
-static const _Thread_local volatile enum good_test x73;
-static const volatile _Thread_local enum good_test x74;
-const static _Thread_local volatile enum good_test x75;
-const static volatile _Thread_local enum good_test x76;
-const volatile static _Thread_local enum good_test x77;
-static volatile _Thread_local const enum good_test x78;
-static volatile const _Thread_local enum good_test x79;
-volatile static _Thread_local const enum good_test x80;
-volatile static const _Thread_local enum good_test x81;
-volatile const static _Thread_local enum good_test x82;
-_Thread_local const static enum good_test x83;
-const _Thread_local static enum good_test x84;
-_Thread_local volatile static enum good_test x85;
-volatile _Thread_local static enum good_test x86;
-_Thread_local const static volatile enum good_test x87;
-_Thread_local const volatile static enum good_test x88;
-const _Thread_local static volatile enum good_test x89;
-const _Thread_local volatile static enum good_test x90;
-const volatile _Thread_local static enum good_test x91;
-_Thread_local volatile static const enum good_test x92;
-_Thread_local volatile const static enum good_test x93;
-volatile _Thread_local static const enum good_test x94;
-volatile _Thread_local const static enum good_test x95;
-volatile const _Thread_local static enum good_test x96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local enum good_test x71;
+const static _Thread_local enum good_test x72;
+static volatile _Thread_local enum good_test x73;
+volatile static _Thread_local enum good_test x74;
+static const _Thread_local volatile enum good_test x75;
+static const volatile _Thread_local enum good_test x76;
+const static _Thread_local volatile enum good_test x77;
+const static volatile _Thread_local enum good_test x78;
+const volatile static _Thread_local enum good_test x79;
+static volatile _Thread_local const enum good_test x80;
+static volatile const _Thread_local enum good_test x81;
+volatile static _Thread_local const enum good_test x82;
+volatile static const _Thread_local enum good_test x83;
+volatile const static _Thread_local enum good_test x84;
+_Thread_local const static enum good_test x85;
+const _Thread_local static enum good_test x86;
+_Thread_local volatile static enum good_test x87;
+volatile _Thread_local static enum good_test x88;
+_Thread_local const static volatile enum good_test x89;
+_Thread_local const volatile static enum good_test x90;
+const _Thread_local static volatile enum good_test x91;
+const _Thread_local volatile static enum good_test x92;
+const volatile _Thread_local static enum good_test x93;
+_Thread_local volatile static const enum good_test x94;
+_Thread_local volatile const static enum good_test x95;
+volatile _Thread_local static const enum good_test x96;
+volatile _Thread_local const static enum good_test x97;
+volatile const _Thread_local static enum good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+_Static_assert(0==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+_Static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+_Static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_enum_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_enum_def_decl.hpp	2011-09-02 23:03:15 UTC (rev 688)
+++ trunk/tests/zcc/decl.C99/Pass_enum_def_decl.hpp	2011-09-02 23:05:54 UTC (rev 689)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_enum_def_decl.hpp
+// Pass_enum_def_decl.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
@@ -14,106 +14,215 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local enum good_test x21;
-extern thread_local const enum good_test x22;
-extern thread_local volatile enum good_test x23;
-extern thread_local const volatile enum good_test x24;
-extern thread_local volatile const enum good_test x25;
-thread_local extern enum good_test x26;
-thread_local extern const enum good_test x27;
-thread_local extern volatile enum good_test x28;
-thread_local extern const volatile enum good_test x29;
-thread_local extern volatile const enum good_test x30;
+extern thread_local enum good_test x23;
+extern thread_local const enum good_test x24;
+extern thread_local volatile enum good_test x25;
+extern thread_local const volatile enum good_test x26;
+extern thread_local volatile const enum good_test x27;
+thread_local extern enum good_test x28;
+thread_local extern const enum good_test x29;
+thread_local extern volatile enum good_test x30;
+thread_local extern const volatile enum good_test x31;
+thread_local extern volatile const enum good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local enum good_test x31;
-static thread_local const enum good_test x32;
-static thread_local volatile enum good_test x33;
-static thread_local const volatile enum good_test x34;
-static thread_local volatile const enum good_test x35;
-thread_local static enum good_test x36;
-thread_local static const enum good_test x37;
-thread_local static volatile enum good_test x38;
-thread_local static const volatile enum good_test x39;
-thread_local static volatile const enum good_test x40;
+static thread_local enum good_test x33;
+static thread_local const enum good_test x34;
+static thread_local volatile enum good_test x35;
+static thread_local const volatile enum good_test x36;
+static thread_local volatile const enum good_test x37;
+thread_local static enum good_test x38;
+thread_local static const enum good_test x39;
+thread_local static volatile enum good_test x40;
+thread_local static const volatile enum good_test x41;
+thread_local static volatile const enum good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local enum good_test x41;
-const extern thread_local enum good_test x42;
-extern volatile thread_local enum good_test x43;
-volatile extern thread_local enum good_test x44;
-extern const thread_local volatile enum good_test x45;
-extern const volatile thread_local enum good_test x46;
-const extern thread_local volatile enum good_test x47;
-const extern volatile thread_local enum good_test x48;
-const volatile extern thread_local enum good_test x49;
-extern volatile thread_local const enum good_test x50;
-extern volatile const thread_local enum good_test x51;
-volatile extern thread_local const enum good_test x52;
-volatile extern const thread_local enum good_test x53;
-volatile const extern thread_local enum good_test x54;
-thread_local const extern enum good_test x55;
-const thread_local extern enum good_test x56;
-thread_local volatile extern enum good_test x57;
-volatile thread_local extern enum good_test x58;
-thread_local const extern volatile enum good_test x59;
-thread_local const volatile extern enum good_test x60;
-const thread_local extern volatile enum good_test x61;
-const thread_local volatile extern enum good_test x62;
-const volatile thread_local extern enum good_test x63;
-thread_local volatile extern const enum good_test x64;
-thread_local volatile const extern enum good_test x65;
-volatile thread_local extern const enum good_test x66;
-volatile thread_local const extern enum good_test x67;
-volatile const thread_local extern enum good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local enum good_test x43;
+const extern thread_local enum good_test x44;
+extern volatile thread_local enum good_test x45;
+volatile extern thread_local enum good_test x46;
+extern const thread_local volatile enum good_test x47;
+extern const volatile thread_local enum good_test x48;
+const extern thread_local volatile enum good_test x49;
+const extern volatile thread_local enum good_test x50;
+const volatile extern thread_local enum good_test x51;
+extern volatile thread_local const enum good_test x52;
+extern volatile const thread_local enum good_test x53;
+volatile extern thread_local const enum good_test x54;
+volatile extern const thread_local enum good_test x55;
+volatile const extern thread_local enum good_test x56;
+thread_local const extern enum good_test x57;
+const thread_local extern enum good_test x58;
+thread_local volatile extern enum good_test x59;
+volatile thread_local extern enum good_test x60;
+thread_local const extern volatile enum good_test x61;
+thread_local const volatile extern enum good_test x62;
+const thread_local extern volatile enum good_test x63;
+const thread_local volatile extern enum good_test x64;
+const volatile thread_local extern enum good_test x65;
+thread_local volatile extern const enum good_test x66;
+thread_local volatile const extern enum good_test x67;
+volatile thread_local extern const enum good_test x68;
+volatile thread_local const extern enum good_test x69;
+volatile const thread_local extern enum good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local enum good_test x69;
-const static thread_local enum good_test x70;
-static volatile thread_local enum good_test x71;
-volatile static thread_local enum good_test x72;
-static const thread_local volatile enum good_test x73;
-static const volatile thread_local enum good_test x74;
-const static thread_local volatile enum good_test x75;
-const static volatile thread_local enum good_test x76;
-const volatile static thread_local enum good_test x77;
-static volatile thread_local const enum good_test x78;
-static volatile const thread_local enum good_test x79;
-volatile static thread_local const enum good_test x80;
-volatile static const thread_local enum good_test x81;
-volatile const static thread_local enum good_test x82;
-thread_local const static enum good_test x83;
-const thread_local static enum good_test x84;
-thread_local volatile static enum good_test x85;
-volatile thread_local static enum good_test x86;
-thread_local const static volatile enum good_test x87;
-thread_local const volatile static enum good_test x88;
-const thread_local static volatile enum good_test x89;
-const thread_local volatile static enum good_test x90;
-const volatile thread_local static enum good_test x91;
-thread_local volatile static const enum good_test x92;
-thread_local volatile const static enum good_test x93;
-volatile thread_local static const enum good_test x94;
-volatile thread_local const static enum good_test x95;
-volatile const thread_local static enum good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local enum good_test x71;
+const static thread_local enum good_test x72;
+static volatile thread_local enum good_test x73;
+volatile static thread_local enum good_test x74;
+static const thread_local volatile enum good_test x75;
+static const volatile thread_local enum good_test x76;
+const static thread_local volatile enum good_test x77;
+const static volatile thread_local enum good_test x78;
+const volatile static thread_local enum good_test x79;
+static volatile thread_local const enum good_test x80;
+static volatile const thread_local enum good_test x81;
+volatile static thread_local const enum good_test x82;
+volatile static const thread_local enum good_test x83;
+volatile const static thread_local enum good_test x84;
+thread_local const static enum good_test x85;
+const thread_local static enum good_test x86;
+thread_local volatile static enum good_test x87;
+volatile thread_local static enum good_test x88;
+thread_local const static volatile enum good_test x89;
+thread_local const volatile static enum good_test x90;
+const thread_local static volatile enum good_test x91;
+const thread_local volatile static enum good_test x92;
+const volatile thread_local static enum good_test x93;
+thread_local volatile static const enum good_test x94;
+thread_local volatile const static enum good_test x95;
+volatile thread_local static const enum good_test x96;
+volatile thread_local const static enum good_test x97;
+volatile const thread_local static enum good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sat Sep  3 01:07:07 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 01:07:07 +0200
Subject: [Zcplusplus-commits] r690 - trunk/tests/zcc/decl.C99
Message-ID: <20110902230707.71208480A1C@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 01:07:07 +0200 (Sat, 03 Sep 2011)
New Revision: 690

Modified:
   trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp
Log:
update series #1 for generated test cases: test cases #2

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h	2011-09-02 23:05:54 UTC (rev 689)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def_decl.h	2011-09-02 23:07:07 UTC (rev 690)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_struct_def_decl.h
+// Pass_struct_def_decl.h
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
@@ -14,106 +14,215 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local struct good_test x21;
-extern _Thread_local const struct good_test x22;
-extern _Thread_local volatile struct good_test x23;
-extern _Thread_local const volatile struct good_test x24;
-extern _Thread_local volatile const struct good_test x25;
-_Thread_local extern struct good_test x26;
-_Thread_local extern const struct good_test x27;
-_Thread_local extern volatile struct good_test x28;
-_Thread_local extern const volatile struct good_test x29;
-_Thread_local extern volatile const struct good_test x30;
+extern _Thread_local struct good_test x23;
+extern _Thread_local const struct good_test x24;
+extern _Thread_local volatile struct good_test x25;
+extern _Thread_local const volatile struct good_test x26;
+extern _Thread_local volatile const struct good_test x27;
+_Thread_local extern struct good_test x28;
+_Thread_local extern const struct good_test x29;
+_Thread_local extern volatile struct good_test x30;
+_Thread_local extern const volatile struct good_test x31;
+_Thread_local extern volatile const struct good_test x32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local struct good_test x31;
-static _Thread_local const struct good_test x32;
-static _Thread_local volatile struct good_test x33;
-static _Thread_local const volatile struct good_test x34;
-static _Thread_local volatile const struct good_test x35;
-_Thread_local static struct good_test x36;
-_Thread_local static const struct good_test x37;
-_Thread_local static volatile struct good_test x38;
-_Thread_local static const volatile struct good_test x39;
-_Thread_local static volatile const struct good_test x40;
+static _Thread_local struct good_test x33;
+static _Thread_local const struct good_test x34;
+static _Thread_local volatile struct good_test x35;
+static _Thread_local const volatile struct good_test x36;
+static _Thread_local volatile const struct good_test x37;
+_Thread_local static struct good_test x38;
+_Thread_local static const struct good_test x39;
+_Thread_local static volatile struct good_test x40;
+_Thread_local static const volatile struct good_test x41;
+_Thread_local static volatile const struct good_test x42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local struct good_test x41;
-const extern _Thread_local struct good_test x42;
-extern volatile _Thread_local struct good_test x43;
-volatile extern _Thread_local struct good_test x44;
-extern const _Thread_local volatile struct good_test x45;
-extern const volatile _Thread_local struct good_test x46;
-const extern _Thread_local volatile struct good_test x47;
-const extern volatile _Thread_local struct good_test x48;
-const volatile extern _Thread_local struct good_test x49;
-extern volatile _Thread_local const struct good_test x50;
-extern volatile const _Thread_local struct good_test x51;
-volatile extern _Thread_local const struct good_test x52;
-volatile extern const _Thread_local struct good_test x53;
-volatile const extern _Thread_local struct good_test x54;
-_Thread_local const extern struct good_test x55;
-const _Thread_local extern struct good_test x56;
-_Thread_local volatile extern struct good_test x57;
-volatile _Thread_local extern struct good_test x58;
-_Thread_local const extern volatile struct good_test x59;
-_Thread_local const volatile extern struct good_test x60;
-const _Thread_local extern volatile struct good_test x61;
-const _Thread_local volatile extern struct good_test x62;
-const volatile _Thread_local extern struct good_test x63;
-_Thread_local volatile extern const struct good_test x64;
-_Thread_local volatile const extern struct good_test x65;
-volatile _Thread_local extern const struct good_test x66;
-volatile _Thread_local const extern struct good_test x67;
-volatile const _Thread_local extern struct good_test x68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local struct good_test x43;
+const extern _Thread_local struct good_test x44;
+extern volatile _Thread_local struct good_test x45;
+volatile extern _Thread_local struct good_test x46;
+extern const _Thread_local volatile struct good_test x47;
+extern const volatile _Thread_local struct good_test x48;
+const extern _Thread_local volatile struct good_test x49;
+const extern volatile _Thread_local struct good_test x50;
+const volatile extern _Thread_local struct good_test x51;
+extern volatile _Thread_local const struct good_test x52;
+extern volatile const _Thread_local struct good_test x53;
+volatile extern _Thread_local const struct good_test x54;
+volatile extern const _Thread_local struct good_test x55;
+volatile const extern _Thread_local struct good_test x56;
+_Thread_local const extern struct good_test x57;
+const _Thread_local extern struct good_test x58;
+_Thread_local volatile extern struct good_test x59;
+volatile _Thread_local extern struct good_test x60;
+_Thread_local const extern volatile struct good_test x61;
+_Thread_local const volatile extern struct good_test x62;
+const _Thread_local extern volatile struct good_test x63;
+const _Thread_local volatile extern struct good_test x64;
+const volatile _Thread_local extern struct good_test x65;
+_Thread_local volatile extern const struct good_test x66;
+_Thread_local volatile const extern struct good_test x67;
+volatile _Thread_local extern const struct good_test x68;
+volatile _Thread_local const extern struct good_test x69;
+volatile const _Thread_local extern struct good_test x70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local struct good_test x69;
-const static _Thread_local struct good_test x70;
-static volatile _Thread_local struct good_test x71;
-volatile static _Thread_local struct good_test x72;
-static const _Thread_local volatile struct good_test x73;
-static const volatile _Thread_local struct good_test x74;
-const static _Thread_local volatile struct good_test x75;
-const static volatile _Thread_local struct good_test x76;
-const volatile static _Thread_local struct good_test x77;
-static volatile _Thread_local const struct good_test x78;
-static volatile const _Thread_local struct good_test x79;
-volatile static _Thread_local const struct good_test x80;
-volatile static const _Thread_local struct good_test x81;
-volatile const static _Thread_local struct good_test x82;
-_Thread_local const static struct good_test x83;
-const _Thread_local static struct good_test x84;
-_Thread_local volatile static struct good_test x85;
-volatile _Thread_local static struct good_test x86;
-_Thread_local const static volatile struct good_test x87;
-_Thread_local const volatile static struct good_test x88;
-const _Thread_local static volatile struct good_test x89;
-const _Thread_local volatile static struct good_test x90;
-const volatile _Thread_local static struct good_test x91;
-_Thread_local volatile static const struct good_test x92;
-_Thread_local volatile const static struct good_test x93;
-volatile _Thread_local static const struct good_test x94;
-volatile _Thread_local const static struct good_test x95;
-volatile const _Thread_local static struct good_test x96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local struct good_test x71;
+const static _Thread_local struct good_test x72;
+static volatile _Thread_local struct good_test x73;
+volatile static _Thread_local struct good_test x74;
+static const _Thread_local volatile struct good_test x75;
+static const volatile _Thread_local struct good_test x76;
+const static _Thread_local volatile struct good_test x77;
+const static volatile _Thread_local struct good_test x78;
+const volatile static _Thread_local struct good_test x79;
+static volatile _Thread_local const struct good_test x80;
+static volatile const _Thread_local struct good_test x81;
+volatile static _Thread_local const struct good_test x82;
+volatile static const _Thread_local struct good_test x83;
+volatile const static _Thread_local struct good_test x84;
+_Thread_local const static struct good_test x85;
+const _Thread_local static struct good_test x86;
+_Thread_local volatile static struct good_test x87;
+volatile _Thread_local static struct good_test x88;
+_Thread_local const static volatile struct good_test x89;
+_Thread_local const volatile static struct good_test x90;
+const _Thread_local static volatile struct good_test x91;
+const _Thread_local volatile static struct good_test x92;
+const volatile _Thread_local static struct good_test x93;
+_Thread_local volatile static const struct good_test x94;
+_Thread_local volatile const static struct good_test x95;
+volatile _Thread_local static const struct good_test x96;
+volatile _Thread_local const static struct good_test x97;
+volatile const _Thread_local static struct good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+_Static_assert(0==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+_Static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+_Static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp	2011-09-02 23:05:54 UTC (rev 689)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def_decl.hpp	2011-09-02 23:07:07 UTC (rev 690)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_struct_def_decl.hpp
+// Pass_struct_def_decl.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
@@ -14,106 +14,215 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local struct good_test x21;
-extern thread_local const struct good_test x22;
-extern thread_local volatile struct good_test x23;
-extern thread_local const volatile struct good_test x24;
-extern thread_local volatile const struct good_test x25;
-thread_local extern struct good_test x26;
-thread_local extern const struct good_test x27;
-thread_local extern volatile struct good_test x28;
-thread_local extern const volatile struct good_test x29;
-thread_local extern volatile const struct good_test x30;
+extern thread_local struct good_test x23;
+extern thread_local const struct good_test x24;
+extern thread_local volatile struct good_test x25;
+extern thread_local const volatile struct good_test x26;
+extern thread_local volatile const struct good_test x27;
+thread_local extern struct good_test x28;
+thread_local extern const struct good_test x29;
+thread_local extern volatile struct good_test x30;
+thread_local extern const volatile struct good_test x31;
+thread_local extern volatile const struct good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local struct good_test x31;
-static thread_local const struct good_test x32;
-static thread_local volatile struct good_test x33;
-static thread_local const volatile struct good_test x34;
-static thread_local volatile const struct good_test x35;
-thread_local static struct good_test x36;
-thread_local static const struct good_test x37;
-thread_local static volatile struct good_test x38;
-thread_local static const volatile struct good_test x39;
-thread_local static volatile const struct good_test x40;
+static thread_local struct good_test x33;
+static thread_local const struct good_test x34;
+static thread_local volatile struct good_test x35;
+static thread_local const volatile struct good_test x36;
+static thread_local volatile const struct good_test x37;
+thread_local static struct good_test x38;
+thread_local static const struct good_test x39;
+thread_local static volatile struct good_test x40;
+thread_local static const volatile struct good_test x41;
+thread_local static volatile const struct good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local struct good_test x41;
-const extern thread_local struct good_test x42;
-extern volatile thread_local struct good_test x43;
-volatile extern thread_local struct good_test x44;
-extern const thread_local volatile struct good_test x45;
-extern const volatile thread_local struct good_test x46;
-const extern thread_local volatile struct good_test x47;
-const extern volatile thread_local struct good_test x48;
-const volatile extern thread_local struct good_test x49;
-extern volatile thread_local const struct good_test x50;
-extern volatile const thread_local struct good_test x51;
-volatile extern thread_local const struct good_test x52;
-volatile extern const thread_local struct good_test x53;
-volatile const extern thread_local struct good_test x54;
-thread_local const extern struct good_test x55;
-const thread_local extern struct good_test x56;
-thread_local volatile extern struct good_test x57;
-volatile thread_local extern struct good_test x58;
-thread_local const extern volatile struct good_test x59;
-thread_local const volatile extern struct good_test x60;
-const thread_local extern volatile struct good_test x61;
-const thread_local volatile extern struct good_test x62;
-const volatile thread_local extern struct good_test x63;
-thread_local volatile extern const struct good_test x64;
-thread_local volatile const extern struct good_test x65;
-volatile thread_local extern const struct good_test x66;
-volatile thread_local const extern struct good_test x67;
-volatile const thread_local extern struct good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local struct good_test x43;
+const extern thread_local struct good_test x44;
+extern volatile thread_local struct good_test x45;
+volatile extern thread_local struct good_test x46;
+extern const thread_local volatile struct good_test x47;
+extern const volatile thread_local struct good_test x48;
+const extern thread_local volatile struct good_test x49;
+const extern volatile thread_local struct good_test x50;
+const volatile extern thread_local struct good_test x51;
+extern volatile thread_local const struct good_test x52;
+extern volatile const thread_local struct good_test x53;
+volatile extern thread_local const struct good_test x54;
+volatile extern const thread_local struct good_test x55;
+volatile const extern thread_local struct good_test x56;
+thread_local const extern struct good_test x57;
+const thread_local extern struct good_test x58;
+thread_local volatile extern struct good_test x59;
+volatile thread_local extern struct good_test x60;
+thread_local const extern volatile struct good_test x61;
+thread_local const volatile extern struct good_test x62;
+const thread_local extern volatile struct good_test x63;
+const thread_local volatile extern struct good_test x64;
+const volatile thread_local extern struct good_test x65;
+thread_local volatile extern const struct good_test x66;
+thread_local volatile const extern struct good_test x67;
+volatile thread_local extern const struct good_test x68;
+volatile thread_local const extern struct good_test x69;
+volatile const thread_local extern struct good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local struct good_test x69;
-const static thread_local struct good_test x70;
-static volatile thread_local struct good_test x71;
-volatile static thread_local struct good_test x72;
-static const thread_local volatile struct good_test x73;
-static const volatile thread_local struct good_test x74;
-const static thread_local volatile struct good_test x75;
-const static volatile thread_local struct good_test x76;
-const volatile static thread_local struct good_test x77;
-static volatile thread_local const struct good_test x78;
-static volatile const thread_local struct good_test x79;
-volatile static thread_local const struct good_test x80;
-volatile static const thread_local struct good_test x81;
-volatile const static thread_local struct good_test x82;
-thread_local const static struct good_test x83;
-const thread_local static struct good_test x84;
-thread_local volatile static struct good_test x85;
-volatile thread_local static struct good_test x86;
-thread_local const static volatile struct good_test x87;
-thread_local const volatile static struct good_test x88;
-const thread_local static volatile struct good_test x89;
-const thread_local volatile static struct good_test x90;
-const volatile thread_local static struct good_test x91;
-thread_local volatile static const struct good_test x92;
-thread_local volatile const static struct good_test x93;
-volatile thread_local static const struct good_test x94;
-volatile thread_local const static struct good_test x95;
-volatile const thread_local static struct good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local struct good_test x71;
+const static thread_local struct good_test x72;
+static volatile thread_local struct good_test x73;
+volatile static thread_local struct good_test x74;
+static const thread_local volatile struct good_test x75;
+static const volatile thread_local struct good_test x76;
+const static thread_local volatile struct good_test x77;
+const static volatile thread_local struct good_test x78;
+const volatile static thread_local struct good_test x79;
+static volatile thread_local const struct good_test x80;
+static volatile const thread_local struct good_test x81;
+volatile static thread_local const struct good_test x82;
+volatile static const thread_local struct good_test x83;
+volatile const static thread_local struct good_test x84;
+thread_local const static struct good_test x85;
+const thread_local static struct good_test x86;
+thread_local volatile static struct good_test x87;
+volatile thread_local static struct good_test x88;
+thread_local const static volatile struct good_test x89;
+thread_local const volatile static struct good_test x90;
+const thread_local static volatile struct good_test x91;
+const thread_local volatile static struct good_test x92;
+const volatile thread_local static struct good_test x93;
+thread_local volatile static const struct good_test x94;
+thread_local volatile const static struct good_test x95;
+volatile thread_local static const struct good_test x96;
+volatile thread_local const static struct good_test x97;
+volatile const thread_local static struct good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sat Sep  3 01:08:46 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 01:08:46 +0200
Subject: [Zcplusplus-commits] r691 - trunk/tests/zcc/decl.C99
Message-ID: <20110902230847.1869C480A1C@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 01:08:46 +0200 (Sat, 03 Sep 2011)
New Revision: 691

Modified:
   trunk/tests/zcc/decl.C99/Pass_union_def_decl.h
   trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp
Log:
update series #1 for generated test cases: test cases #3

Modified: trunk/tests/zcc/decl.C99/Pass_union_def_decl.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def_decl.h	2011-09-02 23:07:07 UTC (rev 690)
+++ trunk/tests/zcc/decl.C99/Pass_union_def_decl.h	2011-09-02 23:08:46 UTC (rev 691)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_union_def_decl.h
+// Pass_union_def_decl.h
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
@@ -14,106 +14,215 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local union good_test x21;
-extern _Thread_local const union good_test x22;
-extern _Thread_local volatile union good_test x23;
-extern _Thread_local const volatile union good_test x24;
-extern _Thread_local volatile const union good_test x25;
-_Thread_local extern union good_test x26;
-_Thread_local extern const union good_test x27;
-_Thread_local extern volatile union good_test x28;
-_Thread_local extern const volatile union good_test x29;
-_Thread_local extern volatile const union good_test x30;
+extern _Thread_local union good_test x23;
+extern _Thread_local const union good_test x24;
+extern _Thread_local volatile union good_test x25;
+extern _Thread_local const volatile union good_test x26;
+extern _Thread_local volatile const union good_test x27;
+_Thread_local extern union good_test x28;
+_Thread_local extern const union good_test x29;
+_Thread_local extern volatile union good_test x30;
+_Thread_local extern const volatile union good_test x31;
+_Thread_local extern volatile const union good_test x32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local union good_test x31;
-static _Thread_local const union good_test x32;
-static _Thread_local volatile union good_test x33;
-static _Thread_local const volatile union good_test x34;
-static _Thread_local volatile const union good_test x35;
-_Thread_local static union good_test x36;
-_Thread_local static const union good_test x37;
-_Thread_local static volatile union good_test x38;
-_Thread_local static const volatile union good_test x39;
-_Thread_local static volatile const union good_test x40;
+static _Thread_local union good_test x33;
+static _Thread_local const union good_test x34;
+static _Thread_local volatile union good_test x35;
+static _Thread_local const volatile union good_test x36;
+static _Thread_local volatile const union good_test x37;
+_Thread_local static union good_test x38;
+_Thread_local static const union good_test x39;
+_Thread_local static volatile union good_test x40;
+_Thread_local static const volatile union good_test x41;
+_Thread_local static volatile const union good_test x42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local union good_test x41;
-const extern _Thread_local union good_test x42;
-extern volatile _Thread_local union good_test x43;
-volatile extern _Thread_local union good_test x44;
-extern const _Thread_local volatile union good_test x45;
-extern const volatile _Thread_local union good_test x46;
-const extern _Thread_local volatile union good_test x47;
-const extern volatile _Thread_local union good_test x48;
-const volatile extern _Thread_local union good_test x49;
-extern volatile _Thread_local const union good_test x50;
-extern volatile const _Thread_local union good_test x51;
-volatile extern _Thread_local const union good_test x52;
-volatile extern const _Thread_local union good_test x53;
-volatile const extern _Thread_local union good_test x54;
-_Thread_local const extern union good_test x55;
-const _Thread_local extern union good_test x56;
-_Thread_local volatile extern union good_test x57;
-volatile _Thread_local extern union good_test x58;
-_Thread_local const extern volatile union good_test x59;
-_Thread_local const volatile extern union good_test x60;
-const _Thread_local extern volatile union good_test x61;
-const _Thread_local volatile extern union good_test x62;
-const volatile _Thread_local extern union good_test x63;
-_Thread_local volatile extern const union good_test x64;
-_Thread_local volatile const extern union good_test x65;
-volatile _Thread_local extern const union good_test x66;
-volatile _Thread_local const extern union good_test x67;
-volatile const _Thread_local extern union good_test x68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local union good_test x43;
+const extern _Thread_local union good_test x44;
+extern volatile _Thread_local union good_test x45;
+volatile extern _Thread_local union good_test x46;
+extern const _Thread_local volatile union good_test x47;
+extern const volatile _Thread_local union good_test x48;
+const extern _Thread_local volatile union good_test x49;
+const extern volatile _Thread_local union good_test x50;
+const volatile extern _Thread_local union good_test x51;
+extern volatile _Thread_local const union good_test x52;
+extern volatile const _Thread_local union good_test x53;
+volatile extern _Thread_local const union good_test x54;
+volatile extern const _Thread_local union good_test x55;
+volatile const extern _Thread_local union good_test x56;
+_Thread_local const extern union good_test x57;
+const _Thread_local extern union good_test x58;
+_Thread_local volatile extern union good_test x59;
+volatile _Thread_local extern union good_test x60;
+_Thread_local const extern volatile union good_test x61;
+_Thread_local const volatile extern union good_test x62;
+const _Thread_local extern volatile union good_test x63;
+const _Thread_local volatile extern union good_test x64;
+const volatile _Thread_local extern union good_test x65;
+_Thread_local volatile extern const union good_test x66;
+_Thread_local volatile const extern union good_test x67;
+volatile _Thread_local extern const union good_test x68;
+volatile _Thread_local const extern union good_test x69;
+volatile const _Thread_local extern union good_test x70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local union good_test x69;
-const static _Thread_local union good_test x70;
-static volatile _Thread_local union good_test x71;
-volatile static _Thread_local union good_test x72;
-static const _Thread_local volatile union good_test x73;
-static const volatile _Thread_local union good_test x74;
-const static _Thread_local volatile union good_test x75;
-const static volatile _Thread_local union good_test x76;
-const volatile static _Thread_local union good_test x77;
-static volatile _Thread_local const union good_test x78;
-static volatile const _Thread_local union good_test x79;
-volatile static _Thread_local const union good_test x80;
-volatile static const _Thread_local union good_test x81;
-volatile const static _Thread_local union good_test x82;
-_Thread_local const static union good_test x83;
-const _Thread_local static union good_test x84;
-_Thread_local volatile static union good_test x85;
-volatile _Thread_local static union good_test x86;
-_Thread_local const static volatile union good_test x87;
-_Thread_local const volatile static union good_test x88;
-const _Thread_local static volatile union good_test x89;
-const _Thread_local volatile static union good_test x90;
-const volatile _Thread_local static union good_test x91;
-_Thread_local volatile static const union good_test x92;
-_Thread_local volatile const static union good_test x93;
-volatile _Thread_local static const union good_test x94;
-volatile _Thread_local const static union good_test x95;
-volatile const _Thread_local static union good_test x96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local union good_test x71;
+const static _Thread_local union good_test x72;
+static volatile _Thread_local union good_test x73;
+volatile static _Thread_local union good_test x74;
+static const _Thread_local volatile union good_test x75;
+static const volatile _Thread_local union good_test x76;
+const static _Thread_local volatile union good_test x77;
+const static volatile _Thread_local union good_test x78;
+const volatile static _Thread_local union good_test x79;
+static volatile _Thread_local const union good_test x80;
+static volatile const _Thread_local union good_test x81;
+volatile static _Thread_local const union good_test x82;
+volatile static const _Thread_local union good_test x83;
+volatile const static _Thread_local union good_test x84;
+_Thread_local const static union good_test x85;
+const _Thread_local static union good_test x86;
+_Thread_local volatile static union good_test x87;
+volatile _Thread_local static union good_test x88;
+_Thread_local const static volatile union good_test x89;
+_Thread_local const volatile static union good_test x90;
+const _Thread_local static volatile union good_test x91;
+const _Thread_local volatile static union good_test x92;
+const volatile _Thread_local static union good_test x93;
+_Thread_local volatile static const union good_test x94;
+_Thread_local volatile const static union good_test x95;
+volatile _Thread_local static const union good_test x96;
+volatile _Thread_local const static union good_test x97;
+volatile const _Thread_local static union good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+_Static_assert(0==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+_Static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+_Static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp	2011-09-02 23:07:07 UTC (rev 690)
+++ trunk/tests/zcc/decl.C99/Pass_union_def_decl.hpp	2011-09-02 23:08:46 UTC (rev 691)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_union_def_decl.hpp
+// Pass_union_def_decl.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
@@ -14,106 +14,215 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local union good_test x21;
-extern thread_local const union good_test x22;
-extern thread_local volatile union good_test x23;
-extern thread_local const volatile union good_test x24;
-extern thread_local volatile const union good_test x25;
-thread_local extern union good_test x26;
-thread_local extern const union good_test x27;
-thread_local extern volatile union good_test x28;
-thread_local extern const volatile union good_test x29;
-thread_local extern volatile const union good_test x30;
+extern thread_local union good_test x23;
+extern thread_local const union good_test x24;
+extern thread_local volatile union good_test x25;
+extern thread_local const volatile union good_test x26;
+extern thread_local volatile const union good_test x27;
+thread_local extern union good_test x28;
+thread_local extern const union good_test x29;
+thread_local extern volatile union good_test x30;
+thread_local extern const volatile union good_test x31;
+thread_local extern volatile const union good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local union good_test x31;
-static thread_local const union good_test x32;
-static thread_local volatile union good_test x33;
-static thread_local const volatile union good_test x34;
-static thread_local volatile const union good_test x35;
-thread_local static union good_test x36;
-thread_local static const union good_test x37;
-thread_local static volatile union good_test x38;
-thread_local static const volatile union good_test x39;
-thread_local static volatile const union good_test x40;
+static thread_local union good_test x33;
+static thread_local const union good_test x34;
+static thread_local volatile union good_test x35;
+static thread_local const volatile union good_test x36;
+static thread_local volatile const union good_test x37;
+thread_local static union good_test x38;
+thread_local static const union good_test x39;
+thread_local static volatile union good_test x40;
+thread_local static const volatile union good_test x41;
+thread_local static volatile const union good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local union good_test x41;
-const extern thread_local union good_test x42;
-extern volatile thread_local union good_test x43;
-volatile extern thread_local union good_test x44;
-extern const thread_local volatile union good_test x45;
-extern const volatile thread_local union good_test x46;
-const extern thread_local volatile union good_test x47;
-const extern volatile thread_local union good_test x48;
-const volatile extern thread_local union good_test x49;
-extern volatile thread_local const union good_test x50;
-extern volatile const thread_local union good_test x51;
-volatile extern thread_local const union good_test x52;
-volatile extern const thread_local union good_test x53;
-volatile const extern thread_local union good_test x54;
-thread_local const extern union good_test x55;
-const thread_local extern union good_test x56;
-thread_local volatile extern union good_test x57;
-volatile thread_local extern union good_test x58;
-thread_local const extern volatile union good_test x59;
-thread_local const volatile extern union good_test x60;
-const thread_local extern volatile union good_test x61;
-const thread_local volatile extern union good_test x62;
-const volatile thread_local extern union good_test x63;
-thread_local volatile extern const union good_test x64;
-thread_local volatile const extern union good_test x65;
-volatile thread_local extern const union good_test x66;
-volatile thread_local const extern union good_test x67;
-volatile const thread_local extern union good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local union good_test x43;
+const extern thread_local union good_test x44;
+extern volatile thread_local union good_test x45;
+volatile extern thread_local union good_test x46;
+extern const thread_local volatile union good_test x47;
+extern const volatile thread_local union good_test x48;
+const extern thread_local volatile union good_test x49;
+const extern volatile thread_local union good_test x50;
+const volatile extern thread_local union good_test x51;
+extern volatile thread_local const union good_test x52;
+extern volatile const thread_local union good_test x53;
+volatile extern thread_local const union good_test x54;
+volatile extern const thread_local union good_test x55;
+volatile const extern thread_local union good_test x56;
+thread_local const extern union good_test x57;
+const thread_local extern union good_test x58;
+thread_local volatile extern union good_test x59;
+volatile thread_local extern union good_test x60;
+thread_local const extern volatile union good_test x61;
+thread_local const volatile extern union good_test x62;
+const thread_local extern volatile union good_test x63;
+const thread_local volatile extern union good_test x64;
+const volatile thread_local extern union good_test x65;
+thread_local volatile extern const union good_test x66;
+thread_local volatile const extern union good_test x67;
+volatile thread_local extern const union good_test x68;
+volatile thread_local const extern union good_test x69;
+volatile const thread_local extern union good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local union good_test x69;
-const static thread_local union good_test x70;
-static volatile thread_local union good_test x71;
-volatile static thread_local union good_test x72;
-static const thread_local volatile union good_test x73;
-static const volatile thread_local union good_test x74;
-const static thread_local volatile union good_test x75;
-const static volatile thread_local union good_test x76;
-const volatile static thread_local union good_test x77;
-static volatile thread_local const union good_test x78;
-static volatile const thread_local union good_test x79;
-volatile static thread_local const union good_test x80;
-volatile static const thread_local union good_test x81;
-volatile const static thread_local union good_test x82;
-thread_local const static union good_test x83;
-const thread_local static union good_test x84;
-thread_local volatile static union good_test x85;
-volatile thread_local static union good_test x86;
-thread_local const static volatile union good_test x87;
-thread_local const volatile static union good_test x88;
-const thread_local static volatile union good_test x89;
-const thread_local volatile static union good_test x90;
-const volatile thread_local static union good_test x91;
-thread_local volatile static const union good_test x92;
-thread_local volatile const static union good_test x93;
-volatile thread_local static const union good_test x94;
-volatile thread_local const static union good_test x95;
-volatile const thread_local static union good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local union good_test x71;
+const static thread_local union good_test x72;
+static volatile thread_local union good_test x73;
+volatile static thread_local union good_test x74;
+static const thread_local volatile union good_test x75;
+static const volatile thread_local union good_test x76;
+const static thread_local volatile union good_test x77;
+const static volatile thread_local union good_test x78;
+const volatile static thread_local union good_test x79;
+static volatile thread_local const union good_test x80;
+static volatile const thread_local union good_test x81;
+volatile static thread_local const union good_test x82;
+volatile static const thread_local union good_test x83;
+volatile const static thread_local union good_test x84;
+thread_local const static union good_test x85;
+const thread_local static union good_test x86;
+thread_local volatile static union good_test x87;
+volatile thread_local static union good_test x88;
+thread_local const static volatile union good_test x89;
+thread_local const volatile static union good_test x90;
+const thread_local static volatile union good_test x91;
+const thread_local volatile static union good_test x92;
+const volatile thread_local static union good_test x93;
+thread_local volatile static const union good_test x94;
+thread_local volatile const static union good_test x95;
+volatile thread_local static const union good_test x96;
+volatile thread_local const static union good_test x97;
+volatile const thread_local static union good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sat Sep  3 01:14:20 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sat,  3 Sep 2011 01:14:20 +0200
Subject: [Zcplusplus-commits] r692 - in trunk/tests: zcc/decl.C99
	zcc.in/decl.C99
Message-ID: <20110902231420.6F561480A1C@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-03 01:14:20 +0200 (Sat, 03 Sep 2011)
New Revision: 692

Modified:
   trunk/tests/zcc.in/decl.C99/Pass_enum_def.in
   trunk/tests/zcc.in/decl.C99/Pass_struct_def.in
   trunk/tests/zcc.in/decl.C99/Pass_union_def.in
   trunk/tests/zcc/decl.C99/Pass_enum_def.h
   trunk/tests/zcc/decl.C99/Pass_enum_def.hpp
   trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp
   trunk/tests/zcc/decl.C99/Pass_struct_def.h
   trunk/tests/zcc/decl.C99/Pass_struct_def.hpp
   trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp
   trunk/tests/zcc/decl.C99/Pass_union_def.h
   trunk/tests/zcc/decl.C99/Pass_union_def.hpp
   trunk/tests/zcc/decl.C99/Pass_union_def2.hpp
Log:
update series #1 for generated test cases: omnibus commit (every single file here exceeds 40K of diff)

Modified: trunk/tests/zcc/decl.C99/Pass_enum_def.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_enum_def.h	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_enum_def.h	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_enum_def.h
+// Pass_enum_def.h
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
@@ -14,108 +14,109 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local enum good_test x21;
-extern _Thread_local const enum good_test x22;
-extern _Thread_local volatile enum good_test x23;
-extern _Thread_local const volatile enum good_test x24;
-extern _Thread_local volatile const enum good_test x25;
-_Thread_local extern enum good_test x26;
-_Thread_local extern const enum good_test x27;
-_Thread_local extern volatile enum good_test x28;
-_Thread_local extern const volatile enum good_test x29;
-_Thread_local extern volatile const enum good_test x30;
+extern _Thread_local enum good_test x23;
+extern _Thread_local const enum good_test x24;
+extern _Thread_local volatile enum good_test x25;
+extern _Thread_local const volatile enum good_test x26;
+extern _Thread_local volatile const enum good_test x27;
+_Thread_local extern enum good_test x28;
+_Thread_local extern const enum good_test x29;
+_Thread_local extern volatile enum good_test x30;
+_Thread_local extern const volatile enum good_test x31;
+_Thread_local extern volatile const enum good_test x32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local enum good_test x31;
-static _Thread_local const enum good_test x32;
-static _Thread_local volatile enum good_test x33;
-static _Thread_local const volatile enum good_test x34;
-static _Thread_local volatile const enum good_test x35;
-_Thread_local static enum good_test x36;
-_Thread_local static const enum good_test x37;
-_Thread_local static volatile enum good_test x38;
-_Thread_local static const volatile enum good_test x39;
-_Thread_local static volatile const enum good_test x40;
+static _Thread_local enum good_test x33;
+static _Thread_local const enum good_test x34;
+static _Thread_local volatile enum good_test x35;
+static _Thread_local const volatile enum good_test x36;
+static _Thread_local volatile const enum good_test x37;
+_Thread_local static enum good_test x38;
+_Thread_local static const enum good_test x39;
+_Thread_local static volatile enum good_test x40;
+_Thread_local static const volatile enum good_test x41;
+_Thread_local static volatile const enum good_test x42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local enum good_test x41;
-const extern _Thread_local enum good_test x42;
-extern volatile _Thread_local enum good_test x43;
-volatile extern _Thread_local enum good_test x44;
-extern const _Thread_local volatile enum good_test x45;
-extern const volatile _Thread_local enum good_test x46;
-const extern _Thread_local volatile enum good_test x47;
-const extern volatile _Thread_local enum good_test x48;
-const volatile extern _Thread_local enum good_test x49;
-extern volatile _Thread_local const enum good_test x50;
-extern volatile const _Thread_local enum good_test x51;
-volatile extern _Thread_local const enum good_test x52;
-volatile extern const _Thread_local enum good_test x53;
-volatile const extern _Thread_local enum good_test x54;
-_Thread_local const extern enum good_test x55;
-const _Thread_local extern enum good_test x56;
-_Thread_local volatile extern enum good_test x57;
-volatile _Thread_local extern enum good_test x58;
-_Thread_local const extern volatile enum good_test x59;
-_Thread_local const volatile extern enum good_test x60;
-const _Thread_local extern volatile enum good_test x61;
-const _Thread_local volatile extern enum good_test x62;
-const volatile _Thread_local extern enum good_test x63;
-_Thread_local volatile extern const enum good_test x64;
-_Thread_local volatile const extern enum good_test x65;
-volatile _Thread_local extern const enum good_test x66;
-volatile _Thread_local const extern enum good_test x67;
-volatile const _Thread_local extern enum good_test x68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local enum good_test x43;
+const extern _Thread_local enum good_test x44;
+extern volatile _Thread_local enum good_test x45;
+volatile extern _Thread_local enum good_test x46;
+extern const _Thread_local volatile enum good_test x47;
+extern const volatile _Thread_local enum good_test x48;
+const extern _Thread_local volatile enum good_test x49;
+const extern volatile _Thread_local enum good_test x50;
+const volatile extern _Thread_local enum good_test x51;
+extern volatile _Thread_local const enum good_test x52;
+extern volatile const _Thread_local enum good_test x53;
+volatile extern _Thread_local const enum good_test x54;
+volatile extern const _Thread_local enum good_test x55;
+volatile const extern _Thread_local enum good_test x56;
+_Thread_local const extern enum good_test x57;
+const _Thread_local extern enum good_test x58;
+_Thread_local volatile extern enum good_test x59;
+volatile _Thread_local extern enum good_test x60;
+_Thread_local const extern volatile enum good_test x61;
+_Thread_local const volatile extern enum good_test x62;
+const _Thread_local extern volatile enum good_test x63;
+const _Thread_local volatile extern enum good_test x64;
+const volatile _Thread_local extern enum good_test x65;
+_Thread_local volatile extern const enum good_test x66;
+_Thread_local volatile const extern enum good_test x67;
+volatile _Thread_local extern const enum good_test x68;
+volatile _Thread_local const extern enum good_test x69;
+volatile const _Thread_local extern enum good_test x70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local enum good_test x69;
-const static _Thread_local enum good_test x70;
-static volatile _Thread_local enum good_test x71;
-volatile static _Thread_local enum good_test x72;
-static const _Thread_local volatile enum good_test x73;
-static const volatile _Thread_local enum good_test x74;
-const static _Thread_local volatile enum good_test x75;
-const static volatile _Thread_local enum good_test x76;
-const volatile static _Thread_local enum good_test x77;
-static volatile _Thread_local const enum good_test x78;
-static volatile const _Thread_local enum good_test x79;
-volatile static _Thread_local const enum good_test x80;
-volatile static const _Thread_local enum good_test x81;
-volatile const static _Thread_local enum good_test x82;
-_Thread_local const static enum good_test x83;
-const _Thread_local static enum good_test x84;
-_Thread_local volatile static enum good_test x85;
-volatile _Thread_local static enum good_test x86;
-_Thread_local const static volatile enum good_test x87;
-_Thread_local const volatile static enum good_test x88;
-const _Thread_local static volatile enum good_test x89;
-const _Thread_local volatile static enum good_test x90;
-const volatile _Thread_local static enum good_test x91;
-_Thread_local volatile static const enum good_test x92;
-_Thread_local volatile const static enum good_test x93;
-volatile _Thread_local static const enum good_test x94;
-volatile _Thread_local const static enum good_test x95;
-volatile const _Thread_local static enum good_test x96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local enum good_test x71;
+const static _Thread_local enum good_test x72;
+static volatile _Thread_local enum good_test x73;
+volatile static _Thread_local enum good_test x74;
+static const _Thread_local volatile enum good_test x75;
+static const volatile _Thread_local enum good_test x76;
+const static _Thread_local volatile enum good_test x77;
+const static volatile _Thread_local enum good_test x78;
+const volatile static _Thread_local enum good_test x79;
+static volatile _Thread_local const enum good_test x80;
+static volatile const _Thread_local enum good_test x81;
+volatile static _Thread_local const enum good_test x82;
+volatile static const _Thread_local enum good_test x83;
+volatile const static _Thread_local enum good_test x84;
+_Thread_local const static enum good_test x85;
+const _Thread_local static enum good_test x86;
+_Thread_local volatile static enum good_test x87;
+volatile _Thread_local static enum good_test x88;
+_Thread_local const static volatile enum good_test x89;
+_Thread_local const volatile static enum good_test x90;
+const _Thread_local static volatile enum good_test x91;
+const _Thread_local volatile static enum good_test x92;
+const volatile _Thread_local static enum good_test x93;
+_Thread_local volatile static const enum good_test x94;
+_Thread_local volatile const static enum good_test x95;
+volatile _Thread_local static const enum good_test x96;
+volatile _Thread_local const static enum good_test x97;
+volatile const _Thread_local static enum good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const enum good_test5 { x_factor5 = 1 } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test6 { x_factor6 = 1 } x_6;
-static volatile enum good_test7 { x_factor7 = 1 } x_7;
-static const volatile enum good_test8 { x_factor8 = 1 } x_8;
-static volatile const enum good_test9 { x_factor9 = 1 } x_9;
+static const enum good_test7 { x_factor7 = 1 } x_7;
+static volatile enum good_test8 { x_factor8 = 1 } x_8;
+static const volatile enum good_test9 { x_factor9 = 1 } x_9;
+static volatile const enum good_test10 { x_factor10 = 1 } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test10 { x_factor10 = 1 } x_10;
-volatile extern enum good_test11 { x_factor11 = 1 } x_11;
-const extern volatile enum good_test12 { x_factor12 = 1 } x_12;
-const volatile extern enum good_test13 { x_factor13 = 1 } x_13;
-volatile extern const enum good_test14 { x_factor14 = 1 } x_14;
-volatile const extern enum good_test15 { x_factor15 = 1 } x_15;
-volatile static enum good_test16 { x_factor16 = 1 } x_16;
-const static volatile enum good_test17 { x_factor17 = 1 } x_17;
-const volatile static enum good_test18 { x_factor18 = 1 } x_18;
-volatile static const enum good_test19 { x_factor19 = 1 } x_19;
-volatile const static enum good_test20 { x_factor20 = 1 } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test11 { x_factor11 = 1 } x_11;
+volatile extern enum good_test12 { x_factor12 = 1 } x_12;
+const extern volatile enum good_test13 { x_factor13 = 1 } x_13;
+const volatile extern enum good_test14 { x_factor14 = 1 } x_14;
+volatile extern const enum good_test15 { x_factor15 = 1 } x_15;
+volatile const extern enum good_test16 { x_factor16 = 1 } x_16;
+const static enum good_test17 { x_factor17 = 1 } x_17;
+volatile static enum good_test18 { x_factor18 = 1 } x_18;
+const static volatile enum good_test19 { x_factor19 = 1 } x_19;
+const volatile static enum good_test20 { x_factor20 = 1 } x_20;
+volatile static const enum good_test21 { x_factor21 = 1 } x_21;
+volatile const static enum good_test22 { x_factor22 = 1 } x_22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local enum good_test21 { x_factor21 = 1 } x_21;
-extern _Thread_local const enum good_test22 { x_factor22 = 1 } x_22;
-extern _Thread_local volatile enum good_test23 { x_factor23 = 1 } x_23;
-extern _Thread_local const volatile enum good_test24 { x_factor24 = 1 } x_24;
-extern _Thread_local volatile const enum good_test25 { x_factor25 = 1 } x_25;
-_Thread_local extern enum good_test26 { x_factor26 = 1 } x_26;
-_Thread_local extern const enum good_test27 { x_factor27 = 1 } x_27;
-_Thread_local extern volatile enum good_test28 { x_factor28 = 1 } x_28;
-_Thread_local extern const volatile enum good_test29 { x_factor29 = 1 } x_29;
-_Thread_local extern volatile const enum good_test30 { x_factor30 = 1 } x_30;
+extern _Thread_local enum good_test23 { x_factor23 = 1 } x_23;
+extern _Thread_local const enum good_test24 { x_factor24 = 1 } x_24;
+extern _Thread_local volatile enum good_test25 { x_factor25 = 1 } x_25;
+extern _Thread_local const volatile enum good_test26 { x_factor26 = 1 } x_26;
+extern _Thread_local volatile const enum good_test27 { x_factor27 = 1 } x_27;
+_Thread_local extern enum good_test28 { x_factor28 = 1 } x_28;
+_Thread_local extern const enum good_test29 { x_factor29 = 1 } x_29;
+_Thread_local extern volatile enum good_test30 { x_factor30 = 1 } x_30;
+_Thread_local extern const volatile enum good_test31 { x_factor31 = 1 } x_31;
+_Thread_local extern volatile const enum good_test32 { x_factor32 = 1 } x_32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local enum good_test31 { x_factor31 = 1 } x_31;
-static _Thread_local const enum good_test32 { x_factor32 = 1 } x_32;
-static _Thread_local volatile enum good_test33 { x_factor33 = 1 } x_33;
-static _Thread_local const volatile enum good_test34 { x_factor34 = 1 } x_34;
-static _Thread_local volatile const enum good_test35 { x_factor35 = 1 } x_35;
-_Thread_local static enum good_test36 { x_factor36 = 1 } x_36;
-_Thread_local static const enum good_test37 { x_factor37 = 1 } x_37;
-_Thread_local static volatile enum good_test38 { x_factor38 = 1 } x_38;
-_Thread_local static const volatile enum good_test39 { x_factor39 = 1 } x_39;
-_Thread_local static volatile const enum good_test40 { x_factor40 = 1 } x_40;
+static _Thread_local enum good_test33 { x_factor33 = 1 } x_33;
+static _Thread_local const enum good_test34 { x_factor34 = 1 } x_34;
+static _Thread_local volatile enum good_test35 { x_factor35 = 1 } x_35;
+static _Thread_local const volatile enum good_test36 { x_factor36 = 1 } x_36;
+static _Thread_local volatile const enum good_test37 { x_factor37 = 1 } x_37;
+_Thread_local static enum good_test38 { x_factor38 = 1 } x_38;
+_Thread_local static const enum good_test39 { x_factor39 = 1 } x_39;
+_Thread_local static volatile enum good_test40 { x_factor40 = 1 } x_40;
+_Thread_local static const volatile enum good_test41 { x_factor41 = 1 } x_41;
+_Thread_local static volatile const enum good_test42 { x_factor42 = 1 } x_42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local enum good_test41 { x_factor41 = 1 } x_41;
-const extern _Thread_local enum good_test42 { x_factor42 = 1 } x_42;
-extern volatile _Thread_local enum good_test43 { x_factor43 = 1 } x_43;
-volatile extern _Thread_local enum good_test44 { x_factor44 = 1 } x_44;
-extern const _Thread_local volatile enum good_test45 { x_factor45 = 1 } x_45;
-extern const volatile _Thread_local enum good_test46 { x_factor46 = 1 } x_46;
-const extern _Thread_local volatile enum good_test47 { x_factor47 = 1 } x_47;
-const extern volatile _Thread_local enum good_test48 { x_factor48 = 1 } x_48;
-const volatile extern _Thread_local enum good_test49 { x_factor49 = 1 } x_49;
-extern volatile _Thread_local const enum good_test50 { x_factor50 = 1 } x_50;
-extern volatile const _Thread_local enum good_test51 { x_factor51 = 1 } x_51;
-volatile extern _Thread_local const enum good_test52 { x_factor52 = 1 } x_52;
-volatile extern const _Thread_local enum good_test53 { x_factor53 = 1 } x_53;
-volatile const extern _Thread_local enum good_test54 { x_factor54 = 1 } x_54;
-_Thread_local const extern enum good_test55 { x_factor55 = 1 } x_55;
-const _Thread_local extern enum good_test56 { x_factor56 = 1 } x_56;
-_Thread_local volatile extern enum good_test57 { x_factor57 = 1 } x_57;
-volatile _Thread_local extern enum good_test58 { x_factor58 = 1 } x_58;
-_Thread_local const extern volatile enum good_test59 { x_factor59 = 1 } x_59;
-_Thread_local const volatile extern enum good_test60 { x_factor60 = 1 } x_60;
-const _Thread_local extern volatile enum good_test61 { x_factor61 = 1 } x_61;
-const _Thread_local volatile extern enum good_test62 { x_factor62 = 1 } x_62;
-const volatile _Thread_local extern enum good_test63 { x_factor63 = 1 } x_63;
-_Thread_local volatile extern const enum good_test64 { x_factor64 = 1 } x_64;
-_Thread_local volatile const extern enum good_test65 { x_factor65 = 1 } x_65;
-volatile _Thread_local extern const enum good_test66 { x_factor66 = 1 } x_66;
-volatile _Thread_local const extern enum good_test67 { x_factor67 = 1 } x_67;
-volatile const _Thread_local extern enum good_test68 { x_factor68 = 1 } x_68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local enum good_test43 { x_factor43 = 1 } x_43;
+const extern _Thread_local enum good_test44 { x_factor44 = 1 } x_44;
+extern volatile _Thread_local enum good_test45 { x_factor45 = 1 } x_45;
+volatile extern _Thread_local enum good_test46 { x_factor46 = 1 } x_46;
+extern const _Thread_local volatile enum good_test47 { x_factor47 = 1 } x_47;
+extern const volatile _Thread_local enum good_test48 { x_factor48 = 1 } x_48;
+const extern _Thread_local volatile enum good_test49 { x_factor49 = 1 } x_49;
+const extern volatile _Thread_local enum good_test50 { x_factor50 = 1 } x_50;
+const volatile extern _Thread_local enum good_test51 { x_factor51 = 1 } x_51;
+extern volatile _Thread_local const enum good_test52 { x_factor52 = 1 } x_52;
+extern volatile const _Thread_local enum good_test53 { x_factor53 = 1 } x_53;
+volatile extern _Thread_local const enum good_test54 { x_factor54 = 1 } x_54;
+volatile extern const _Thread_local enum good_test55 { x_factor55 = 1 } x_55;
+volatile const extern _Thread_local enum good_test56 { x_factor56 = 1 } x_56;
+_Thread_local const extern enum good_test57 { x_factor57 = 1 } x_57;
+const _Thread_local extern enum good_test58 { x_factor58 = 1 } x_58;
+_Thread_local volatile extern enum good_test59 { x_factor59 = 1 } x_59;
+volatile _Thread_local extern enum good_test60 { x_factor60 = 1 } x_60;
+_Thread_local const extern volatile enum good_test61 { x_factor61 = 1 } x_61;
+_Thread_local const volatile extern enum good_test62 { x_factor62 = 1 } x_62;
+const _Thread_local extern volatile enum good_test63 { x_factor63 = 1 } x_63;
+const _Thread_local volatile extern enum good_test64 { x_factor64 = 1 } x_64;
+const volatile _Thread_local extern enum good_test65 { x_factor65 = 1 } x_65;
+_Thread_local volatile extern const enum good_test66 { x_factor66 = 1 } x_66;
+_Thread_local volatile const extern enum good_test67 { x_factor67 = 1 } x_67;
+volatile _Thread_local extern const enum good_test68 { x_factor68 = 1 } x_68;
+volatile _Thread_local const extern enum good_test69 { x_factor69 = 1 } x_69;
+volatile const _Thread_local extern enum good_test70 { x_factor70 = 1 } x_70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local enum good_test69 { x_factor69 = 1 } x_69;
-const static _Thread_local enum good_test70 { x_factor70 = 1 } x_70;
-static volatile _Thread_local enum good_test71 { x_factor71 = 1 } x_71;
-volatile static _Thread_local enum good_test72 { x_factor72 = 1 } x_72;
-static const _Thread_local volatile enum good_test73 { x_factor73 = 1 } x_73;
-static const volatile _Thread_local enum good_test74 { x_factor74 = 1 } x_74;
-const static _Thread_local volatile enum good_test75 { x_factor75 = 1 } x_75;
-const static volatile _Thread_local enum good_test76 { x_factor76 = 1 } x_76;
-const volatile static _Thread_local enum good_test77 { x_factor77 = 1 } x_77;
-static volatile _Thread_local const enum good_test78 { x_factor78 = 1 } x_78;
-static volatile const _Thread_local enum good_test79 { x_factor79 = 1 } x_79;
-volatile static _Thread_local const enum good_test80 { x_factor80 = 1 } x_80;
-volatile static const _Thread_local enum good_test81 { x_factor81 = 1 } x_81;
-volatile const static _Thread_local enum good_test82 { x_factor82 = 1 } x_82;
-_Thread_local const static enum good_test83 { x_factor83 = 1 } x_83;
-const _Thread_local static enum good_test84 { x_factor84 = 1 } x_84;
-_Thread_local volatile static enum good_test85 { x_factor85 = 1 } x_85;
-volatile _Thread_local static enum good_test86 { x_factor86 = 1 } x_86;
-_Thread_local const static volatile enum good_test87 { x_factor87 = 1 } x_87;
-_Thread_local const volatile static enum good_test88 { x_factor88 = 1 } x_88;
-const _Thread_local static volatile enum good_test89 { x_factor89 = 1 } x_89;
-const _Thread_local volatile static enum good_test90 { x_factor90 = 1 } x_90;
-const volatile _Thread_local static enum good_test91 { x_factor91 = 1 } x_91;
-_Thread_local volatile static const enum good_test92 { x_factor92 = 1 } x_92;
-_Thread_local volatile const static enum good_test93 { x_factor93 = 1 } x_93;
-volatile _Thread_local static const enum good_test94 { x_factor94 = 1 } x_94;
-volatile _Thread_local const static enum good_test95 { x_factor95 = 1 } x_95;
-volatile const _Thread_local static enum good_test96 { x_factor96 = 1 } x_96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local enum good_test71 { x_factor71 = 1 } x_71;
+const static _Thread_local enum good_test72 { x_factor72 = 1 } x_72;
+static volatile _Thread_local enum good_test73 { x_factor73 = 1 } x_73;
+volatile static _Thread_local enum good_test74 { x_factor74 = 1 } x_74;
+static const _Thread_local volatile enum good_test75 { x_factor75 = 1 } x_75;
+static const volatile _Thread_local enum good_test76 { x_factor76 = 1 } x_76;
+const static _Thread_local volatile enum good_test77 { x_factor77 = 1 } x_77;
+const static volatile _Thread_local enum good_test78 { x_factor78 = 1 } x_78;
+const volatile static _Thread_local enum good_test79 { x_factor79 = 1 } x_79;
+static volatile _Thread_local const enum good_test80 { x_factor80 = 1 } x_80;
+static volatile const _Thread_local enum good_test81 { x_factor81 = 1 } x_81;
+volatile static _Thread_local const enum good_test82 { x_factor82 = 1 } x_82;
+volatile static const _Thread_local enum good_test83 { x_factor83 = 1 } x_83;
+volatile const static _Thread_local enum good_test84 { x_factor84 = 1 } x_84;
+_Thread_local const static enum good_test85 { x_factor85 = 1 } x_85;
+const _Thread_local static enum good_test86 { x_factor86 = 1 } x_86;
+_Thread_local volatile static enum good_test87 { x_factor87 = 1 } x_87;
+volatile _Thread_local static enum good_test88 { x_factor88 = 1 } x_88;
+_Thread_local const static volatile enum good_test89 { x_factor89 = 1 } x_89;
+_Thread_local const volatile static enum good_test90 { x_factor90 = 1 } x_90;
+const _Thread_local static volatile enum good_test91 { x_factor91 = 1 } x_91;
+const _Thread_local volatile static enum good_test92 { x_factor92 = 1 } x_92;
+const volatile _Thread_local static enum good_test93 { x_factor93 = 1 } x_93;
+_Thread_local volatile static const enum good_test94 { x_factor94 = 1 } x_94;
+_Thread_local volatile const static enum good_test95 { x_factor95 = 1 } x_95;
+volatile _Thread_local static const enum good_test96 { x_factor96 = 1 } x_96;
+volatile _Thread_local const static enum good_test97 { x_factor97 = 1 } x_97;
+volatile const _Thread_local static enum good_test98 { x_factor98 = 1 } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+_Static_assert(0==__zcc_linkage(good_test),"good_test has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+_Static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+_Static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_enum_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_enum_def.hpp	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_enum_def.hpp	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_enum_def.hpp
+// Pass_enum_def.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
@@ -14,108 +14,109 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local enum good_test x21;
-extern thread_local const enum good_test x22;
-extern thread_local volatile enum good_test x23;
-extern thread_local const volatile enum good_test x24;
-extern thread_local volatile const enum good_test x25;
-thread_local extern enum good_test x26;
-thread_local extern const enum good_test x27;
-thread_local extern volatile enum good_test x28;
-thread_local extern const volatile enum good_test x29;
-thread_local extern volatile const enum good_test x30;
+extern thread_local enum good_test x23;
+extern thread_local const enum good_test x24;
+extern thread_local volatile enum good_test x25;
+extern thread_local const volatile enum good_test x26;
+extern thread_local volatile const enum good_test x27;
+thread_local extern enum good_test x28;
+thread_local extern const enum good_test x29;
+thread_local extern volatile enum good_test x30;
+thread_local extern const volatile enum good_test x31;
+thread_local extern volatile const enum good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local enum good_test x31;
-static thread_local const enum good_test x32;
-static thread_local volatile enum good_test x33;
-static thread_local const volatile enum good_test x34;
-static thread_local volatile const enum good_test x35;
-thread_local static enum good_test x36;
-thread_local static const enum good_test x37;
-thread_local static volatile enum good_test x38;
-thread_local static const volatile enum good_test x39;
-thread_local static volatile const enum good_test x40;
+static thread_local enum good_test x33;
+static thread_local const enum good_test x34;
+static thread_local volatile enum good_test x35;
+static thread_local const volatile enum good_test x36;
+static thread_local volatile const enum good_test x37;
+thread_local static enum good_test x38;
+thread_local static const enum good_test x39;
+thread_local static volatile enum good_test x40;
+thread_local static const volatile enum good_test x41;
+thread_local static volatile const enum good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local enum good_test x41;
-const extern thread_local enum good_test x42;
-extern volatile thread_local enum good_test x43;
-volatile extern thread_local enum good_test x44;
-extern const thread_local volatile enum good_test x45;
-extern const volatile thread_local enum good_test x46;
-const extern thread_local volatile enum good_test x47;
-const extern volatile thread_local enum good_test x48;
-const volatile extern thread_local enum good_test x49;
-extern volatile thread_local const enum good_test x50;
-extern volatile const thread_local enum good_test x51;
-volatile extern thread_local const enum good_test x52;
-volatile extern const thread_local enum good_test x53;
-volatile const extern thread_local enum good_test x54;
-thread_local const extern enum good_test x55;
-const thread_local extern enum good_test x56;
-thread_local volatile extern enum good_test x57;
-volatile thread_local extern enum good_test x58;
-thread_local const extern volatile enum good_test x59;
-thread_local const volatile extern enum good_test x60;
-const thread_local extern volatile enum good_test x61;
-const thread_local volatile extern enum good_test x62;
-const volatile thread_local extern enum good_test x63;
-thread_local volatile extern const enum good_test x64;
-thread_local volatile const extern enum good_test x65;
-volatile thread_local extern const enum good_test x66;
-volatile thread_local const extern enum good_test x67;
-volatile const thread_local extern enum good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local enum good_test x43;
+const extern thread_local enum good_test x44;
+extern volatile thread_local enum good_test x45;
+volatile extern thread_local enum good_test x46;
+extern const thread_local volatile enum good_test x47;
+extern const volatile thread_local enum good_test x48;
+const extern thread_local volatile enum good_test x49;
+const extern volatile thread_local enum good_test x50;
+const volatile extern thread_local enum good_test x51;
+extern volatile thread_local const enum good_test x52;
+extern volatile const thread_local enum good_test x53;
+volatile extern thread_local const enum good_test x54;
+volatile extern const thread_local enum good_test x55;
+volatile const extern thread_local enum good_test x56;
+thread_local const extern enum good_test x57;
+const thread_local extern enum good_test x58;
+thread_local volatile extern enum good_test x59;
+volatile thread_local extern enum good_test x60;
+thread_local const extern volatile enum good_test x61;
+thread_local const volatile extern enum good_test x62;
+const thread_local extern volatile enum good_test x63;
+const thread_local volatile extern enum good_test x64;
+const volatile thread_local extern enum good_test x65;
+thread_local volatile extern const enum good_test x66;
+thread_local volatile const extern enum good_test x67;
+volatile thread_local extern const enum good_test x68;
+volatile thread_local const extern enum good_test x69;
+volatile const thread_local extern enum good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local enum good_test x69;
-const static thread_local enum good_test x70;
-static volatile thread_local enum good_test x71;
-volatile static thread_local enum good_test x72;
-static const thread_local volatile enum good_test x73;
-static const volatile thread_local enum good_test x74;
-const static thread_local volatile enum good_test x75;
-const static volatile thread_local enum good_test x76;
-const volatile static thread_local enum good_test x77;
-static volatile thread_local const enum good_test x78;
-static volatile const thread_local enum good_test x79;
-volatile static thread_local const enum good_test x80;
-volatile static const thread_local enum good_test x81;
-volatile const static thread_local enum good_test x82;
-thread_local const static enum good_test x83;
-const thread_local static enum good_test x84;
-thread_local volatile static enum good_test x85;
-volatile thread_local static enum good_test x86;
-thread_local const static volatile enum good_test x87;
-thread_local const volatile static enum good_test x88;
-const thread_local static volatile enum good_test x89;
-const thread_local volatile static enum good_test x90;
-const volatile thread_local static enum good_test x91;
-thread_local volatile static const enum good_test x92;
-thread_local volatile const static enum good_test x93;
-volatile thread_local static const enum good_test x94;
-volatile thread_local const static enum good_test x95;
-volatile const thread_local static enum good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local enum good_test x71;
+const static thread_local enum good_test x72;
+static volatile thread_local enum good_test x73;
+volatile static thread_local enum good_test x74;
+static const thread_local volatile enum good_test x75;
+static const volatile thread_local enum good_test x76;
+const static thread_local volatile enum good_test x77;
+const static volatile thread_local enum good_test x78;
+const volatile static thread_local enum good_test x79;
+static volatile thread_local const enum good_test x80;
+static volatile const thread_local enum good_test x81;
+volatile static thread_local const enum good_test x82;
+volatile static const thread_local enum good_test x83;
+volatile const static thread_local enum good_test x84;
+thread_local const static enum good_test x85;
+const thread_local static enum good_test x86;
+thread_local volatile static enum good_test x87;
+volatile thread_local static enum good_test x88;
+thread_local const static volatile enum good_test x89;
+thread_local const volatile static enum good_test x90;
+const thread_local static volatile enum good_test x91;
+const thread_local volatile static enum good_test x92;
+const volatile thread_local static enum good_test x93;
+thread_local volatile static const enum good_test x94;
+thread_local volatile const static enum good_test x95;
+volatile thread_local static const enum good_test x96;
+volatile thread_local const static enum good_test x97;
+volatile const thread_local static enum good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const enum good_test5 { x_factor5 = 1 } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test6 { x_factor6 = 1 } x_6;
-static volatile enum good_test7 { x_factor7 = 1 } x_7;
-static const volatile enum good_test8 { x_factor8 = 1 } x_8;
-static volatile const enum good_test9 { x_factor9 = 1 } x_9;
+static const enum good_test7 { x_factor7 = 1 } x_7;
+static volatile enum good_test8 { x_factor8 = 1 } x_8;
+static const volatile enum good_test9 { x_factor9 = 1 } x_9;
+static volatile const enum good_test10 { x_factor10 = 1 } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test10 { x_factor10 = 1 } x_10;
-volatile extern enum good_test11 { x_factor11 = 1 } x_11;
-const extern volatile enum good_test12 { x_factor12 = 1 } x_12;
-const volatile extern enum good_test13 { x_factor13 = 1 } x_13;
-volatile extern const enum good_test14 { x_factor14 = 1 } x_14;
-volatile const extern enum good_test15 { x_factor15 = 1 } x_15;
-volatile static enum good_test16 { x_factor16 = 1 } x_16;
-const static volatile enum good_test17 { x_factor17 = 1 } x_17;
-const volatile static enum good_test18 { x_factor18 = 1 } x_18;
-volatile static const enum good_test19 { x_factor19 = 1 } x_19;
-volatile const static enum good_test20 { x_factor20 = 1 } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test11 { x_factor11 = 1 } x_11;
+volatile extern enum good_test12 { x_factor12 = 1 } x_12;
+const extern volatile enum good_test13 { x_factor13 = 1 } x_13;
+const volatile extern enum good_test14 { x_factor14 = 1 } x_14;
+volatile extern const enum good_test15 { x_factor15 = 1 } x_15;
+volatile const extern enum good_test16 { x_factor16 = 1 } x_16;
+const static enum good_test17 { x_factor17 = 1 } x_17;
+volatile static enum good_test18 { x_factor18 = 1 } x_18;
+const static volatile enum good_test19 { x_factor19 = 1 } x_19;
+const volatile static enum good_test20 { x_factor20 = 1 } x_20;
+volatile static const enum good_test21 { x_factor21 = 1 } x_21;
+volatile const static enum good_test22 { x_factor22 = 1 } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local enum good_test21 { x_factor21 = 1 } x_21;
-extern thread_local const enum good_test22 { x_factor22 = 1 } x_22;
-extern thread_local volatile enum good_test23 { x_factor23 = 1 } x_23;
-extern thread_local const volatile enum good_test24 { x_factor24 = 1 } x_24;
-extern thread_local volatile const enum good_test25 { x_factor25 = 1 } x_25;
-thread_local extern enum good_test26 { x_factor26 = 1 } x_26;
-thread_local extern const enum good_test27 { x_factor27 = 1 } x_27;
-thread_local extern volatile enum good_test28 { x_factor28 = 1 } x_28;
-thread_local extern const volatile enum good_test29 { x_factor29 = 1 } x_29;
-thread_local extern volatile const enum good_test30 { x_factor30 = 1 } x_30;
+extern thread_local enum good_test23 { x_factor23 = 1 } x_23;
+extern thread_local const enum good_test24 { x_factor24 = 1 } x_24;
+extern thread_local volatile enum good_test25 { x_factor25 = 1 } x_25;
+extern thread_local const volatile enum good_test26 { x_factor26 = 1 } x_26;
+extern thread_local volatile const enum good_test27 { x_factor27 = 1 } x_27;
+thread_local extern enum good_test28 { x_factor28 = 1 } x_28;
+thread_local extern const enum good_test29 { x_factor29 = 1 } x_29;
+thread_local extern volatile enum good_test30 { x_factor30 = 1 } x_30;
+thread_local extern const volatile enum good_test31 { x_factor31 = 1 } x_31;
+thread_local extern volatile const enum good_test32 { x_factor32 = 1 } x_32;
 
 // ringing the changes on thread_local static
-static thread_local enum good_test31 { x_factor31 = 1 } x_31;
-static thread_local const enum good_test32 { x_factor32 = 1 } x_32;
-static thread_local volatile enum good_test33 { x_factor33 = 1 } x_33;
-static thread_local const volatile enum good_test34 { x_factor34 = 1 } x_34;
-static thread_local volatile const enum good_test35 { x_factor35 = 1 } x_35;
-thread_local static enum good_test36 { x_factor36 = 1 } x_36;
-thread_local static const enum good_test37 { x_factor37 = 1 } x_37;
-thread_local static volatile enum good_test38 { x_factor38 = 1 } x_38;
-thread_local static const volatile enum good_test39 { x_factor39 = 1 } x_39;
-thread_local static volatile const enum good_test40 { x_factor40 = 1 } x_40;
+static thread_local enum good_test33 { x_factor33 = 1 } x_33;
+static thread_local const enum good_test34 { x_factor34 = 1 } x_34;
+static thread_local volatile enum good_test35 { x_factor35 = 1 } x_35;
+static thread_local const volatile enum good_test36 { x_factor36 = 1 } x_36;
+static thread_local volatile const enum good_test37 { x_factor37 = 1 } x_37;
+thread_local static enum good_test38 { x_factor38 = 1 } x_38;
+thread_local static const enum good_test39 { x_factor39 = 1 } x_39;
+thread_local static volatile enum good_test40 { x_factor40 = 1 } x_40;
+thread_local static const volatile enum good_test41 { x_factor41 = 1 } x_41;
+thread_local static volatile const enum good_test42 { x_factor42 = 1 } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local enum good_test41 { x_factor41 = 1 } x_41;
-const extern thread_local enum good_test42 { x_factor42 = 1 } x_42;
-extern volatile thread_local enum good_test43 { x_factor43 = 1 } x_43;
-volatile extern thread_local enum good_test44 { x_factor44 = 1 } x_44;
-extern const thread_local volatile enum good_test45 { x_factor45 = 1 } x_45;
-extern const volatile thread_local enum good_test46 { x_factor46 = 1 } x_46;
-const extern thread_local volatile enum good_test47 { x_factor47 = 1 } x_47;
-const extern volatile thread_local enum good_test48 { x_factor48 = 1 } x_48;
-const volatile extern thread_local enum good_test49 { x_factor49 = 1 } x_49;
-extern volatile thread_local const enum good_test50 { x_factor50 = 1 } x_50;
-extern volatile const thread_local enum good_test51 { x_factor51 = 1 } x_51;
-volatile extern thread_local const enum good_test52 { x_factor52 = 1 } x_52;
-volatile extern const thread_local enum good_test53 { x_factor53 = 1 } x_53;
-volatile const extern thread_local enum good_test54 { x_factor54 = 1 } x_54;
-thread_local const extern enum good_test55 { x_factor55 = 1 } x_55;
-const thread_local extern enum good_test56 { x_factor56 = 1 } x_56;
-thread_local volatile extern enum good_test57 { x_factor57 = 1 } x_57;
-volatile thread_local extern enum good_test58 { x_factor58 = 1 } x_58;
-thread_local const extern volatile enum good_test59 { x_factor59 = 1 } x_59;
-thread_local const volatile extern enum good_test60 { x_factor60 = 1 } x_60;
-const thread_local extern volatile enum good_test61 { x_factor61 = 1 } x_61;
-const thread_local volatile extern enum good_test62 { x_factor62 = 1 } x_62;
-const volatile thread_local extern enum good_test63 { x_factor63 = 1 } x_63;
-thread_local volatile extern const enum good_test64 { x_factor64 = 1 } x_64;
-thread_local volatile const extern enum good_test65 { x_factor65 = 1 } x_65;
-volatile thread_local extern const enum good_test66 { x_factor66 = 1 } x_66;
-volatile thread_local const extern enum good_test67 { x_factor67 = 1 } x_67;
-volatile const thread_local extern enum good_test68 { x_factor68 = 1 } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local enum good_test43 { x_factor43 = 1 } x_43;
+const extern thread_local enum good_test44 { x_factor44 = 1 } x_44;
+extern volatile thread_local enum good_test45 { x_factor45 = 1 } x_45;
+volatile extern thread_local enum good_test46 { x_factor46 = 1 } x_46;
+extern const thread_local volatile enum good_test47 { x_factor47 = 1 } x_47;
+extern const volatile thread_local enum good_test48 { x_factor48 = 1 } x_48;
+const extern thread_local volatile enum good_test49 { x_factor49 = 1 } x_49;
+const extern volatile thread_local enum good_test50 { x_factor50 = 1 } x_50;
+const volatile extern thread_local enum good_test51 { x_factor51 = 1 } x_51;
+extern volatile thread_local const enum good_test52 { x_factor52 = 1 } x_52;
+extern volatile const thread_local enum good_test53 { x_factor53 = 1 } x_53;
+volatile extern thread_local const enum good_test54 { x_factor54 = 1 } x_54;
+volatile extern const thread_local enum good_test55 { x_factor55 = 1 } x_55;
+volatile const extern thread_local enum good_test56 { x_factor56 = 1 } x_56;
+thread_local const extern enum good_test57 { x_factor57 = 1 } x_57;
+const thread_local extern enum good_test58 { x_factor58 = 1 } x_58;
+thread_local volatile extern enum good_test59 { x_factor59 = 1 } x_59;
+volatile thread_local extern enum good_test60 { x_factor60 = 1 } x_60;
+thread_local const extern volatile enum good_test61 { x_factor61 = 1 } x_61;
+thread_local const volatile extern enum good_test62 { x_factor62 = 1 } x_62;
+const thread_local extern volatile enum good_test63 { x_factor63 = 1 } x_63;
+const thread_local volatile extern enum good_test64 { x_factor64 = 1 } x_64;
+const volatile thread_local extern enum good_test65 { x_factor65 = 1 } x_65;
+thread_local volatile extern const enum good_test66 { x_factor66 = 1 } x_66;
+thread_local volatile const extern enum good_test67 { x_factor67 = 1 } x_67;
+volatile thread_local extern const enum good_test68 { x_factor68 = 1 } x_68;
+volatile thread_local const extern enum good_test69 { x_factor69 = 1 } x_69;
+volatile const thread_local extern enum good_test70 { x_factor70 = 1 } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local enum good_test69 { x_factor69 = 1 } x_69;
-const static thread_local enum good_test70 { x_factor70 = 1 } x_70;
-static volatile thread_local enum good_test71 { x_factor71 = 1 } x_71;
-volatile static thread_local enum good_test72 { x_factor72 = 1 } x_72;
-static const thread_local volatile enum good_test73 { x_factor73 = 1 } x_73;
-static const volatile thread_local enum good_test74 { x_factor74 = 1 } x_74;
-const static thread_local volatile enum good_test75 { x_factor75 = 1 } x_75;
-const static volatile thread_local enum good_test76 { x_factor76 = 1 } x_76;
-const volatile static thread_local enum good_test77 { x_factor77 = 1 } x_77;
-static volatile thread_local const enum good_test78 { x_factor78 = 1 } x_78;
-static volatile const thread_local enum good_test79 { x_factor79 = 1 } x_79;
-volatile static thread_local const enum good_test80 { x_factor80 = 1 } x_80;
-volatile static const thread_local enum good_test81 { x_factor81 = 1 } x_81;
-volatile const static thread_local enum good_test82 { x_factor82 = 1 } x_82;
-thread_local const static enum good_test83 { x_factor83 = 1 } x_83;
-const thread_local static enum good_test84 { x_factor84 = 1 } x_84;
-thread_local volatile static enum good_test85 { x_factor85 = 1 } x_85;
-volatile thread_local static enum good_test86 { x_factor86 = 1 } x_86;
-thread_local const static volatile enum good_test87 { x_factor87 = 1 } x_87;
-thread_local const volatile static enum good_test88 { x_factor88 = 1 } x_88;
-const thread_local static volatile enum good_test89 { x_factor89 = 1 } x_89;
-const thread_local volatile static enum good_test90 { x_factor90 = 1 } x_90;
-const volatile thread_local static enum good_test91 { x_factor91 = 1 } x_91;
-thread_local volatile static const enum good_test92 { x_factor92 = 1 } x_92;
-thread_local volatile const static enum good_test93 { x_factor93 = 1 } x_93;
-volatile thread_local static const enum good_test94 { x_factor94 = 1 } x_94;
-volatile thread_local const static enum good_test95 { x_factor95 = 1 } x_95;
-volatile const thread_local static enum good_test96 { x_factor96 = 1 } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local enum good_test71 { x_factor71 = 1 } x_71;
+const static thread_local enum good_test72 { x_factor72 = 1 } x_72;
+static volatile thread_local enum good_test73 { x_factor73 = 1 } x_73;
+volatile static thread_local enum good_test74 { x_factor74 = 1 } x_74;
+static const thread_local volatile enum good_test75 { x_factor75 = 1 } x_75;
+static const volatile thread_local enum good_test76 { x_factor76 = 1 } x_76;
+const static thread_local volatile enum good_test77 { x_factor77 = 1 } x_77;
+const static volatile thread_local enum good_test78 { x_factor78 = 1 } x_78;
+const volatile static thread_local enum good_test79 { x_factor79 = 1 } x_79;
+static volatile thread_local const enum good_test80 { x_factor80 = 1 } x_80;
+static volatile const thread_local enum good_test81 { x_factor81 = 1 } x_81;
+volatile static thread_local const enum good_test82 { x_factor82 = 1 } x_82;
+volatile static const thread_local enum good_test83 { x_factor83 = 1 } x_83;
+volatile const static thread_local enum good_test84 { x_factor84 = 1 } x_84;
+thread_local const static enum good_test85 { x_factor85 = 1 } x_85;
+const thread_local static enum good_test86 { x_factor86 = 1 } x_86;
+thread_local volatile static enum good_test87 { x_factor87 = 1 } x_87;
+volatile thread_local static enum good_test88 { x_factor88 = 1 } x_88;
+thread_local const static volatile enum good_test89 { x_factor89 = 1 } x_89;
+thread_local const volatile static enum good_test90 { x_factor90 = 1 } x_90;
+const thread_local static volatile enum good_test91 { x_factor91 = 1 } x_91;
+const thread_local volatile static enum good_test92 { x_factor92 = 1 } x_92;
+const volatile thread_local static enum good_test93 { x_factor93 = 1 } x_93;
+thread_local volatile static const enum good_test94 { x_factor94 = 1 } x_94;
+thread_local volatile const static enum good_test95 { x_factor95 = 1 } x_95;
+volatile thread_local static const enum good_test96 { x_factor96 = 1 } x_96;
+volatile thread_local const static enum good_test97 { x_factor97 = 1 } x_97;
+volatile const thread_local static enum good_test98 { x_factor98 = 1 } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,5 @@
 // decl.C99/Pass_enum_def2.hpp
+// (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
 enum good_test {
@@ -14,108 +15,109 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 // check that things work properly in namespaces
 namespace test {
@@ -132,108 +134,109 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local enum good_test x21;
-extern thread_local const enum good_test x22;
-extern thread_local volatile enum good_test x23;
-extern thread_local const volatile enum good_test x24;
-extern thread_local volatile const enum good_test x25;
-thread_local extern enum good_test x26;
-thread_local extern const enum good_test x27;
-thread_local extern volatile enum good_test x28;
-thread_local extern const volatile enum good_test x29;
-thread_local extern volatile const enum good_test x30;
+extern thread_local enum good_test x23;
+extern thread_local const enum good_test x24;
+extern thread_local volatile enum good_test x25;
+extern thread_local const volatile enum good_test x26;
+extern thread_local volatile const enum good_test x27;
+thread_local extern enum good_test x28;
+thread_local extern const enum good_test x29;
+thread_local extern volatile enum good_test x30;
+thread_local extern const volatile enum good_test x31;
+thread_local extern volatile const enum good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local enum good_test x31;
-static thread_local const enum good_test x32;
-static thread_local volatile enum good_test x33;
-static thread_local const volatile enum good_test x34;
-static thread_local volatile const enum good_test x35;
-thread_local static enum good_test x36;
-thread_local static const enum good_test x37;
-thread_local static volatile enum good_test x38;
-thread_local static const volatile enum good_test x39;
-thread_local static volatile const enum good_test x40;
+static thread_local enum good_test x33;
+static thread_local const enum good_test x34;
+static thread_local volatile enum good_test x35;
+static thread_local const volatile enum good_test x36;
+static thread_local volatile const enum good_test x37;
+thread_local static enum good_test x38;
+thread_local static const enum good_test x39;
+thread_local static volatile enum good_test x40;
+thread_local static const volatile enum good_test x41;
+thread_local static volatile const enum good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local enum good_test x41;
-const extern thread_local enum good_test x42;
-extern volatile thread_local enum good_test x43;
-volatile extern thread_local enum good_test x44;
-extern const thread_local volatile enum good_test x45;
-extern const volatile thread_local enum good_test x46;
-const extern thread_local volatile enum good_test x47;
-const extern volatile thread_local enum good_test x48;
-const volatile extern thread_local enum good_test x49;
-extern volatile thread_local const enum good_test x50;
-extern volatile const thread_local enum good_test x51;
-volatile extern thread_local const enum good_test x52;
-volatile extern const thread_local enum good_test x53;
-volatile const extern thread_local enum good_test x54;
-thread_local const extern enum good_test x55;
-const thread_local extern enum good_test x56;
-thread_local volatile extern enum good_test x57;
-volatile thread_local extern enum good_test x58;
-thread_local const extern volatile enum good_test x59;
-thread_local const volatile extern enum good_test x60;
-const thread_local extern volatile enum good_test x61;
-const thread_local volatile extern enum good_test x62;
-const volatile thread_local extern enum good_test x63;
-thread_local volatile extern const enum good_test x64;
-thread_local volatile const extern enum good_test x65;
-volatile thread_local extern const enum good_test x66;
-volatile thread_local const extern enum good_test x67;
-volatile const thread_local extern enum good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local enum good_test x43;
+const extern thread_local enum good_test x44;
+extern volatile thread_local enum good_test x45;
+volatile extern thread_local enum good_test x46;
+extern const thread_local volatile enum good_test x47;
+extern const volatile thread_local enum good_test x48;
+const extern thread_local volatile enum good_test x49;
+const extern volatile thread_local enum good_test x50;
+const volatile extern thread_local enum good_test x51;
+extern volatile thread_local const enum good_test x52;
+extern volatile const thread_local enum good_test x53;
+volatile extern thread_local const enum good_test x54;
+volatile extern const thread_local enum good_test x55;
+volatile const extern thread_local enum good_test x56;
+thread_local const extern enum good_test x57;
+const thread_local extern enum good_test x58;
+thread_local volatile extern enum good_test x59;
+volatile thread_local extern enum good_test x60;
+thread_local const extern volatile enum good_test x61;
+thread_local const volatile extern enum good_test x62;
+const thread_local extern volatile enum good_test x63;
+const thread_local volatile extern enum good_test x64;
+const volatile thread_local extern enum good_test x65;
+thread_local volatile extern const enum good_test x66;
+thread_local volatile const extern enum good_test x67;
+volatile thread_local extern const enum good_test x68;
+volatile thread_local const extern enum good_test x69;
+volatile const thread_local extern enum good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local enum good_test x69;
-const static thread_local enum good_test x70;
-static volatile thread_local enum good_test x71;
-volatile static thread_local enum good_test x72;
-static const thread_local volatile enum good_test x73;
-static const volatile thread_local enum good_test x74;
-const static thread_local volatile enum good_test x75;
-const static volatile thread_local enum good_test x76;
-const volatile static thread_local enum good_test x77;
-static volatile thread_local const enum good_test x78;
-static volatile const thread_local enum good_test x79;
-volatile static thread_local const enum good_test x80;
-volatile static const thread_local enum good_test x81;
-volatile const static thread_local enum good_test x82;
-thread_local const static enum good_test x83;
-const thread_local static enum good_test x84;
-thread_local volatile static enum good_test x85;
-volatile thread_local static enum good_test x86;
-thread_local const static volatile enum good_test x87;
-thread_local const volatile static enum good_test x88;
-const thread_local static volatile enum good_test x89;
-const thread_local volatile static enum good_test x90;
-const volatile thread_local static enum good_test x91;
-thread_local volatile static const enum good_test x92;
-thread_local volatile const static enum good_test x93;
-volatile thread_local static const enum good_test x94;
-volatile thread_local const static enum good_test x95;
-volatile const thread_local static enum good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local enum good_test x71;
+const static thread_local enum good_test x72;
+static volatile thread_local enum good_test x73;
+volatile static thread_local enum good_test x74;
+static const thread_local volatile enum good_test x75;
+static const volatile thread_local enum good_test x76;
+const static thread_local volatile enum good_test x77;
+const static volatile thread_local enum good_test x78;
+const volatile static thread_local enum good_test x79;
+static volatile thread_local const enum good_test x80;
+static volatile const thread_local enum good_test x81;
+volatile static thread_local const enum good_test x82;
+volatile static const thread_local enum good_test x83;
+volatile const static thread_local enum good_test x84;
+thread_local const static enum good_test x85;
+const thread_local static enum good_test x86;
+thread_local volatile static enum good_test x87;
+volatile thread_local static enum good_test x88;
+thread_local const static volatile enum good_test x89;
+thread_local const volatile static enum good_test x90;
+const thread_local static volatile enum good_test x91;
+const thread_local volatile static enum good_test x92;
+const volatile thread_local static enum good_test x93;
+thread_local volatile static const enum good_test x94;
+thread_local volatile const static enum good_test x95;
+volatile thread_local static const enum good_test x96;
+volatile thread_local const static enum good_test x97;
+volatile const thread_local static enum good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -244,108 +247,109 @@
 extern volatile const enum good_test5 { x_factor5 = 1 } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test6 { x_factor6 = 1 } x_6;
-static volatile enum good_test7 { x_factor7 = 1 } x_7;
-static const volatile enum good_test8 { x_factor8 = 1 } x_8;
-static volatile const enum good_test9 { x_factor9 = 1 } x_9;
+static const enum good_test7 { x_factor7 = 1 } x_7;
+static volatile enum good_test8 { x_factor8 = 1 } x_8;
+static const volatile enum good_test9 { x_factor9 = 1 } x_9;
+static volatile const enum good_test10 { x_factor10 = 1 } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test10 { x_factor10 = 1 } x_10;
-volatile extern enum good_test11 { x_factor11 = 1 } x_11;
-const extern volatile enum good_test12 { x_factor12 = 1 } x_12;
-const volatile extern enum good_test13 { x_factor13 = 1 } x_13;
-volatile extern const enum good_test14 { x_factor14 = 1 } x_14;
-volatile const extern enum good_test15 { x_factor15 = 1 } x_15;
-volatile static enum good_test16 { x_factor16 = 1 } x_16;
-const static volatile enum good_test17 { x_factor17 = 1 } x_17;
-const volatile static enum good_test18 { x_factor18 = 1 } x_18;
-volatile static const enum good_test19 { x_factor19 = 1 } x_19;
-volatile const static enum good_test20 { x_factor20 = 1 } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test11 { x_factor11 = 1 } x_11;
+volatile extern enum good_test12 { x_factor12 = 1 } x_12;
+const extern volatile enum good_test13 { x_factor13 = 1 } x_13;
+const volatile extern enum good_test14 { x_factor14 = 1 } x_14;
+volatile extern const enum good_test15 { x_factor15 = 1 } x_15;
+volatile const extern enum good_test16 { x_factor16 = 1 } x_16;
+const static enum good_test17 { x_factor17 = 1 } x_17;
+volatile static enum good_test18 { x_factor18 = 1 } x_18;
+const static volatile enum good_test19 { x_factor19 = 1 } x_19;
+const volatile static enum good_test20 { x_factor20 = 1 } x_20;
+volatile static const enum good_test21 { x_factor21 = 1 } x_21;
+volatile const static enum good_test22 { x_factor22 = 1 } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local enum good_test21 { x_factor21 = 1 } x_21;
-extern thread_local const enum good_test22 { x_factor22 = 1 } x_22;
-extern thread_local volatile enum good_test23 { x_factor23 = 1 } x_23;
-extern thread_local const volatile enum good_test24 { x_factor24 = 1 } x_24;
-extern thread_local volatile const enum good_test25 { x_factor25 = 1 } x_25;
-thread_local extern enum good_test26 { x_factor26 = 1 } x_26;
-thread_local extern const enum good_test27 { x_factor27 = 1 } x_27;
-thread_local extern volatile enum good_test28 { x_factor28 = 1 } x_28;
-thread_local extern const volatile enum good_test29 { x_factor29 = 1 } x_29;
-thread_local extern volatile const enum good_test30 { x_factor30 = 1 } x_30;
+extern thread_local enum good_test23 { x_factor23 = 1 } x_23;
+extern thread_local const enum good_test24 { x_factor24 = 1 } x_24;
+extern thread_local volatile enum good_test25 { x_factor25 = 1 } x_25;
+extern thread_local const volatile enum good_test26 { x_factor26 = 1 } x_26;
+extern thread_local volatile const enum good_test27 { x_factor27 = 1 } x_27;
+thread_local extern enum good_test28 { x_factor28 = 1 } x_28;
+thread_local extern const enum good_test29 { x_factor29 = 1 } x_29;
+thread_local extern volatile enum good_test30 { x_factor30 = 1 } x_30;
+thread_local extern const volatile enum good_test31 { x_factor31 = 1 } x_31;
+thread_local extern volatile const enum good_test32 { x_factor32 = 1 } x_32;
 
 // ringing the changes on thread_local static
-static thread_local enum good_test31 { x_factor31 = 1 } x_31;
-static thread_local const enum good_test32 { x_factor32 = 1 } x_32;
-static thread_local volatile enum good_test33 { x_factor33 = 1 } x_33;
-static thread_local const volatile enum good_test34 { x_factor34 = 1 } x_34;
-static thread_local volatile const enum good_test35 { x_factor35 = 1 } x_35;
-thread_local static enum good_test36 { x_factor36 = 1 } x_36;
-thread_local static const enum good_test37 { x_factor37 = 1 } x_37;
-thread_local static volatile enum good_test38 { x_factor38 = 1 } x_38;
-thread_local static const volatile enum good_test39 { x_factor39 = 1 } x_39;
-thread_local static volatile const enum good_test40 { x_factor40 = 1 } x_40;
+static thread_local enum good_test33 { x_factor33 = 1 } x_33;
+static thread_local const enum good_test34 { x_factor34 = 1 } x_34;
+static thread_local volatile enum good_test35 { x_factor35 = 1 } x_35;
+static thread_local const volatile enum good_test36 { x_factor36 = 1 } x_36;
+static thread_local volatile const enum good_test37 { x_factor37 = 1 } x_37;
+thread_local static enum good_test38 { x_factor38 = 1 } x_38;
+thread_local static const enum good_test39 { x_factor39 = 1 } x_39;
+thread_local static volatile enum good_test40 { x_factor40 = 1 } x_40;
+thread_local static const volatile enum good_test41 { x_factor41 = 1 } x_41;
+thread_local static volatile const enum good_test42 { x_factor42 = 1 } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local enum good_test41 { x_factor41 = 1 } x_41;
-const extern thread_local enum good_test42 { x_factor42 = 1 } x_42;
-extern volatile thread_local enum good_test43 { x_factor43 = 1 } x_43;
-volatile extern thread_local enum good_test44 { x_factor44 = 1 } x_44;
-extern const thread_local volatile enum good_test45 { x_factor45 = 1 } x_45;
-extern const volatile thread_local enum good_test46 { x_factor46 = 1 } x_46;
-const extern thread_local volatile enum good_test47 { x_factor47 = 1 } x_47;
-const extern volatile thread_local enum good_test48 { x_factor48 = 1 } x_48;
-const volatile extern thread_local enum good_test49 { x_factor49 = 1 } x_49;
-extern volatile thread_local const enum good_test50 { x_factor50 = 1 } x_50;
-extern volatile const thread_local enum good_test51 { x_factor51 = 1 } x_51;
-volatile extern thread_local const enum good_test52 { x_factor52 = 1 } x_52;
-volatile extern const thread_local enum good_test53 { x_factor53 = 1 } x_53;
-volatile const extern thread_local enum good_test54 { x_factor54 = 1 } x_54;
-thread_local const extern enum good_test55 { x_factor55 = 1 } x_55;
-const thread_local extern enum good_test56 { x_factor56 = 1 } x_56;
-thread_local volatile extern enum good_test57 { x_factor57 = 1 } x_57;
-volatile thread_local extern enum good_test58 { x_factor58 = 1 } x_58;
-thread_local const extern volatile enum good_test59 { x_factor59 = 1 } x_59;
-thread_local const volatile extern enum good_test60 { x_factor60 = 1 } x_60;
-const thread_local extern volatile enum good_test61 { x_factor61 = 1 } x_61;
-const thread_local volatile extern enum good_test62 { x_factor62 = 1 } x_62;
-const volatile thread_local extern enum good_test63 { x_factor63 = 1 } x_63;
-thread_local volatile extern const enum good_test64 { x_factor64 = 1 } x_64;
-thread_local volatile const extern enum good_test65 { x_factor65 = 1 } x_65;
-volatile thread_local extern const enum good_test66 { x_factor66 = 1 } x_66;
-volatile thread_local const extern enum good_test67 { x_factor67 = 1 } x_67;
-volatile const thread_local extern enum good_test68 { x_factor68 = 1 } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local enum good_test43 { x_factor43 = 1 } x_43;
+const extern thread_local enum good_test44 { x_factor44 = 1 } x_44;
+extern volatile thread_local enum good_test45 { x_factor45 = 1 } x_45;
+volatile extern thread_local enum good_test46 { x_factor46 = 1 } x_46;
+extern const thread_local volatile enum good_test47 { x_factor47 = 1 } x_47;
+extern const volatile thread_local enum good_test48 { x_factor48 = 1 } x_48;
+const extern thread_local volatile enum good_test49 { x_factor49 = 1 } x_49;
+const extern volatile thread_local enum good_test50 { x_factor50 = 1 } x_50;
+const volatile extern thread_local enum good_test51 { x_factor51 = 1 } x_51;
+extern volatile thread_local const enum good_test52 { x_factor52 = 1 } x_52;
+extern volatile const thread_local enum good_test53 { x_factor53 = 1 } x_53;
+volatile extern thread_local const enum good_test54 { x_factor54 = 1 } x_54;
+volatile extern const thread_local enum good_test55 { x_factor55 = 1 } x_55;
+volatile const extern thread_local enum good_test56 { x_factor56 = 1 } x_56;
+thread_local const extern enum good_test57 { x_factor57 = 1 } x_57;
+const thread_local extern enum good_test58 { x_factor58 = 1 } x_58;
+thread_local volatile extern enum good_test59 { x_factor59 = 1 } x_59;
+volatile thread_local extern enum good_test60 { x_factor60 = 1 } x_60;
+thread_local const extern volatile enum good_test61 { x_factor61 = 1 } x_61;
+thread_local const volatile extern enum good_test62 { x_factor62 = 1 } x_62;
+const thread_local extern volatile enum good_test63 { x_factor63 = 1 } x_63;
+const thread_local volatile extern enum good_test64 { x_factor64 = 1 } x_64;
+const volatile thread_local extern enum good_test65 { x_factor65 = 1 } x_65;
+thread_local volatile extern const enum good_test66 { x_factor66 = 1 } x_66;
+thread_local volatile const extern enum good_test67 { x_factor67 = 1 } x_67;
+volatile thread_local extern const enum good_test68 { x_factor68 = 1 } x_68;
+volatile thread_local const extern enum good_test69 { x_factor69 = 1 } x_69;
+volatile const thread_local extern enum good_test70 { x_factor70 = 1 } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local enum good_test69 { x_factor69 = 1 } x_69;
-const static thread_local enum good_test70 { x_factor70 = 1 } x_70;
-static volatile thread_local enum good_test71 { x_factor71 = 1 } x_71;
-volatile static thread_local enum good_test72 { x_factor72 = 1 } x_72;
-static const thread_local volatile enum good_test73 { x_factor73 = 1 } x_73;
-static const volatile thread_local enum good_test74 { x_factor74 = 1 } x_74;
-const static thread_local volatile enum good_test75 { x_factor75 = 1 } x_75;
-const static volatile thread_local enum good_test76 { x_factor76 = 1 } x_76;
-const volatile static thread_local enum good_test77 { x_factor77 = 1 } x_77;
-static volatile thread_local const enum good_test78 { x_factor78 = 1 } x_78;
-static volatile const thread_local enum good_test79 { x_factor79 = 1 } x_79;
-volatile static thread_local const enum good_test80 { x_factor80 = 1 } x_80;
-volatile static const thread_local enum good_test81 { x_factor81 = 1 } x_81;
-volatile const static thread_local enum good_test82 { x_factor82 = 1 } x_82;
-thread_local const static enum good_test83 { x_factor83 = 1 } x_83;
-const thread_local static enum good_test84 { x_factor84 = 1 } x_84;
-thread_local volatile static enum good_test85 { x_factor85 = 1 } x_85;
-volatile thread_local static enum good_test86 { x_factor86 = 1 } x_86;
-thread_local const static volatile enum good_test87 { x_factor87 = 1 } x_87;
-thread_local const volatile static enum good_test88 { x_factor88 = 1 } x_88;
-const thread_local static volatile enum good_test89 { x_factor89 = 1 } x_89;
-const thread_local volatile static enum good_test90 { x_factor90 = 1 } x_90;
-const volatile thread_local static enum good_test91 { x_factor91 = 1 } x_91;
-thread_local volatile static const enum good_test92 { x_factor92 = 1 } x_92;
-thread_local volatile const static enum good_test93 { x_factor93 = 1 } x_93;
-volatile thread_local static const enum good_test94 { x_factor94 = 1 } x_94;
-volatile thread_local const static enum good_test95 { x_factor95 = 1 } x_95;
-volatile const thread_local static enum good_test96 { x_factor96 = 1 } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local enum good_test71 { x_factor71 = 1 } x_71;
+const static thread_local enum good_test72 { x_factor72 = 1 } x_72;
+static volatile thread_local enum good_test73 { x_factor73 = 1 } x_73;
+volatile static thread_local enum good_test74 { x_factor74 = 1 } x_74;
+static const thread_local volatile enum good_test75 { x_factor75 = 1 } x_75;
+static const volatile thread_local enum good_test76 { x_factor76 = 1 } x_76;
+const static thread_local volatile enum good_test77 { x_factor77 = 1 } x_77;
+const static volatile thread_local enum good_test78 { x_factor78 = 1 } x_78;
+const volatile static thread_local enum good_test79 { x_factor79 = 1 } x_79;
+static volatile thread_local const enum good_test80 { x_factor80 = 1 } x_80;
+static volatile const thread_local enum good_test81 { x_factor81 = 1 } x_81;
+volatile static thread_local const enum good_test82 { x_factor82 = 1 } x_82;
+volatile static const thread_local enum good_test83 { x_factor83 = 1 } x_83;
+volatile const static thread_local enum good_test84 { x_factor84 = 1 } x_84;
+thread_local const static enum good_test85 { x_factor85 = 1 } x_85;
+const thread_local static enum good_test86 { x_factor86 = 1 } x_86;
+thread_local volatile static enum good_test87 { x_factor87 = 1 } x_87;
+volatile thread_local static enum good_test88 { x_factor88 = 1 } x_88;
+thread_local const static volatile enum good_test89 { x_factor89 = 1 } x_89;
+thread_local const volatile static enum good_test90 { x_factor90 = 1 } x_90;
+const thread_local static volatile enum good_test91 { x_factor91 = 1 } x_91;
+const thread_local volatile static enum good_test92 { x_factor92 = 1 } x_92;
+const volatile thread_local static enum good_test93 { x_factor93 = 1 } x_93;
+thread_local volatile static const enum good_test94 { x_factor94 = 1 } x_94;
+thread_local volatile const static enum good_test95 { x_factor95 = 1 } x_95;
+volatile thread_local static const enum good_test96 { x_factor96 = 1 } x_96;
+volatile thread_local const static enum good_test97 { x_factor97 = 1 } x_97;
+volatile const thread_local static enum good_test98 { x_factor98 = 1 } x_98;
 
 }	// end namespace test
 
@@ -364,107 +368,108 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 }	// end namespace test2

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def.h	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def.h	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_struct_def.h
+// Pass_struct_def.h
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
@@ -14,108 +14,109 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local struct good_test x21;
-extern _Thread_local const struct good_test x22;
-extern _Thread_local volatile struct good_test x23;
-extern _Thread_local const volatile struct good_test x24;
-extern _Thread_local volatile const struct good_test x25;
-_Thread_local extern struct good_test x26;
-_Thread_local extern const struct good_test x27;
-_Thread_local extern volatile struct good_test x28;
-_Thread_local extern const volatile struct good_test x29;
-_Thread_local extern volatile const struct good_test x30;
+extern _Thread_local struct good_test x23;
+extern _Thread_local const struct good_test x24;
+extern _Thread_local volatile struct good_test x25;
+extern _Thread_local const volatile struct good_test x26;
+extern _Thread_local volatile const struct good_test x27;
+_Thread_local extern struct good_test x28;
+_Thread_local extern const struct good_test x29;
+_Thread_local extern volatile struct good_test x30;
+_Thread_local extern const volatile struct good_test x31;
+_Thread_local extern volatile const struct good_test x32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local struct good_test x31;
-static _Thread_local const struct good_test x32;
-static _Thread_local volatile struct good_test x33;
-static _Thread_local const volatile struct good_test x34;
-static _Thread_local volatile const struct good_test x35;
-_Thread_local static struct good_test x36;
-_Thread_local static const struct good_test x37;
-_Thread_local static volatile struct good_test x38;
-_Thread_local static const volatile struct good_test x39;
-_Thread_local static volatile const struct good_test x40;
+static _Thread_local struct good_test x33;
+static _Thread_local const struct good_test x34;
+static _Thread_local volatile struct good_test x35;
+static _Thread_local const volatile struct good_test x36;
+static _Thread_local volatile const struct good_test x37;
+_Thread_local static struct good_test x38;
+_Thread_local static const struct good_test x39;
+_Thread_local static volatile struct good_test x40;
+_Thread_local static const volatile struct good_test x41;
+_Thread_local static volatile const struct good_test x42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local struct good_test x41;
-const extern _Thread_local struct good_test x42;
-extern volatile _Thread_local struct good_test x43;
-volatile extern _Thread_local struct good_test x44;
-extern const _Thread_local volatile struct good_test x45;
-extern const volatile _Thread_local struct good_test x46;
-const extern _Thread_local volatile struct good_test x47;
-const extern volatile _Thread_local struct good_test x48;
-const volatile extern _Thread_local struct good_test x49;
-extern volatile _Thread_local const struct good_test x50;
-extern volatile const _Thread_local struct good_test x51;
-volatile extern _Thread_local const struct good_test x52;
-volatile extern const _Thread_local struct good_test x53;
-volatile const extern _Thread_local struct good_test x54;
-_Thread_local const extern struct good_test x55;
-const _Thread_local extern struct good_test x56;
-_Thread_local volatile extern struct good_test x57;
-volatile _Thread_local extern struct good_test x58;
-_Thread_local const extern volatile struct good_test x59;
-_Thread_local const volatile extern struct good_test x60;
-const _Thread_local extern volatile struct good_test x61;
-const _Thread_local volatile extern struct good_test x62;
-const volatile _Thread_local extern struct good_test x63;
-_Thread_local volatile extern const struct good_test x64;
-_Thread_local volatile const extern struct good_test x65;
-volatile _Thread_local extern const struct good_test x66;
-volatile _Thread_local const extern struct good_test x67;
-volatile const _Thread_local extern struct good_test x68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local struct good_test x43;
+const extern _Thread_local struct good_test x44;
+extern volatile _Thread_local struct good_test x45;
+volatile extern _Thread_local struct good_test x46;
+extern const _Thread_local volatile struct good_test x47;
+extern const volatile _Thread_local struct good_test x48;
+const extern _Thread_local volatile struct good_test x49;
+const extern volatile _Thread_local struct good_test x50;
+const volatile extern _Thread_local struct good_test x51;
+extern volatile _Thread_local const struct good_test x52;
+extern volatile const _Thread_local struct good_test x53;
+volatile extern _Thread_local const struct good_test x54;
+volatile extern const _Thread_local struct good_test x55;
+volatile const extern _Thread_local struct good_test x56;
+_Thread_local const extern struct good_test x57;
+const _Thread_local extern struct good_test x58;
+_Thread_local volatile extern struct good_test x59;
+volatile _Thread_local extern struct good_test x60;
+_Thread_local const extern volatile struct good_test x61;
+_Thread_local const volatile extern struct good_test x62;
+const _Thread_local extern volatile struct good_test x63;
+const _Thread_local volatile extern struct good_test x64;
+const volatile _Thread_local extern struct good_test x65;
+_Thread_local volatile extern const struct good_test x66;
+_Thread_local volatile const extern struct good_test x67;
+volatile _Thread_local extern const struct good_test x68;
+volatile _Thread_local const extern struct good_test x69;
+volatile const _Thread_local extern struct good_test x70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local struct good_test x69;
-const static _Thread_local struct good_test x70;
-static volatile _Thread_local struct good_test x71;
-volatile static _Thread_local struct good_test x72;
-static const _Thread_local volatile struct good_test x73;
-static const volatile _Thread_local struct good_test x74;
-const static _Thread_local volatile struct good_test x75;
-const static volatile _Thread_local struct good_test x76;
-const volatile static _Thread_local struct good_test x77;
-static volatile _Thread_local const struct good_test x78;
-static volatile const _Thread_local struct good_test x79;
-volatile static _Thread_local const struct good_test x80;
-volatile static const _Thread_local struct good_test x81;
-volatile const static _Thread_local struct good_test x82;
-_Thread_local const static struct good_test x83;
-const _Thread_local static struct good_test x84;
-_Thread_local volatile static struct good_test x85;
-volatile _Thread_local static struct good_test x86;
-_Thread_local const static volatile struct good_test x87;
-_Thread_local const volatile static struct good_test x88;
-const _Thread_local static volatile struct good_test x89;
-const _Thread_local volatile static struct good_test x90;
-const volatile _Thread_local static struct good_test x91;
-_Thread_local volatile static const struct good_test x92;
-_Thread_local volatile const static struct good_test x93;
-volatile _Thread_local static const struct good_test x94;
-volatile _Thread_local const static struct good_test x95;
-volatile const _Thread_local static struct good_test x96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local struct good_test x71;
+const static _Thread_local struct good_test x72;
+static volatile _Thread_local struct good_test x73;
+volatile static _Thread_local struct good_test x74;
+static const _Thread_local volatile struct good_test x75;
+static const volatile _Thread_local struct good_test x76;
+const static _Thread_local volatile struct good_test x77;
+const static volatile _Thread_local struct good_test x78;
+const volatile static _Thread_local struct good_test x79;
+static volatile _Thread_local const struct good_test x80;
+static volatile const _Thread_local struct good_test x81;
+volatile static _Thread_local const struct good_test x82;
+volatile static const _Thread_local struct good_test x83;
+volatile const static _Thread_local struct good_test x84;
+_Thread_local const static struct good_test x85;
+const _Thread_local static struct good_test x86;
+_Thread_local volatile static struct good_test x87;
+volatile _Thread_local static struct good_test x88;
+_Thread_local const static volatile struct good_test x89;
+_Thread_local const volatile static struct good_test x90;
+const _Thread_local static volatile struct good_test x91;
+const _Thread_local volatile static struct good_test x92;
+const volatile _Thread_local static struct good_test x93;
+_Thread_local volatile static const struct good_test x94;
+_Thread_local volatile const static struct good_test x95;
+volatile _Thread_local static const struct good_test x96;
+volatile _Thread_local const static struct good_test x97;
+volatile const _Thread_local static struct good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const struct good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test6 { int x_factor6; } x_6;
-static volatile struct good_test7 { int x_factor7; } x_7;
-static const volatile struct good_test8 { int x_factor8; } x_8;
-static volatile const struct good_test9 { int x_factor9; } x_9;
+static const struct good_test7 { int x_factor7; } x_7;
+static volatile struct good_test8 { int x_factor8; } x_8;
+static const volatile struct good_test9 { int x_factor9; } x_9;
+static volatile const struct good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test10 { int x_factor10; } x_10;
-volatile extern struct good_test11 { int x_factor11; } x_11;
-const extern volatile struct good_test12 { int x_factor12; } x_12;
-const volatile extern struct good_test13 { int x_factor13; } x_13;
-volatile extern const struct good_test14 { int x_factor14; } x_14;
-volatile const extern struct good_test15 { int x_factor15; } x_15;
-volatile static struct good_test16 { int x_factor16; } x_16;
-const static volatile struct good_test17 { int x_factor17; } x_17;
-const volatile static struct good_test18 { int x_factor18; } x_18;
-volatile static const struct good_test19 { int x_factor19; } x_19;
-volatile const static struct good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test11 { int x_factor11; } x_11;
+volatile extern struct good_test12 { int x_factor12; } x_12;
+const extern volatile struct good_test13 { int x_factor13; } x_13;
+const volatile extern struct good_test14 { int x_factor14; } x_14;
+volatile extern const struct good_test15 { int x_factor15; } x_15;
+volatile const extern struct good_test16 { int x_factor16; } x_16;
+const static struct good_test17 { int x_factor17; } x_17;
+volatile static struct good_test18 { int x_factor18; } x_18;
+const static volatile struct good_test19 { int x_factor19; } x_19;
+const volatile static struct good_test20 { int x_factor20; } x_20;
+volatile static const struct good_test21 { int x_factor21; } x_21;
+volatile const static struct good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local struct good_test21 { int x_factor21; } x_21;
-extern _Thread_local const struct good_test22 { int x_factor22; } x_22;
-extern _Thread_local volatile struct good_test23 { int x_factor23; } x_23;
-extern _Thread_local const volatile struct good_test24 { int x_factor24; } x_24;
-extern _Thread_local volatile const struct good_test25 { int x_factor25; } x_25;
-_Thread_local extern struct good_test26 { int x_factor26; } x_26;
-_Thread_local extern const struct good_test27 { int x_factor27; } x_27;
-_Thread_local extern volatile struct good_test28 { int x_factor28; } x_28;
-_Thread_local extern const volatile struct good_test29 { int x_factor29; } x_29;
-_Thread_local extern volatile const struct good_test30 { int x_factor30; } x_30;
+extern _Thread_local struct good_test23 { int x_factor23; } x_23;
+extern _Thread_local const struct good_test24 { int x_factor24; } x_24;
+extern _Thread_local volatile struct good_test25 { int x_factor25; } x_25;
+extern _Thread_local const volatile struct good_test26 { int x_factor26; } x_26;
+extern _Thread_local volatile const struct good_test27 { int x_factor27; } x_27;
+_Thread_local extern struct good_test28 { int x_factor28; } x_28;
+_Thread_local extern const struct good_test29 { int x_factor29; } x_29;
+_Thread_local extern volatile struct good_test30 { int x_factor30; } x_30;
+_Thread_local extern const volatile struct good_test31 { int x_factor31; } x_31;
+_Thread_local extern volatile const struct good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local struct good_test31 { int x_factor31; } x_31;
-static _Thread_local const struct good_test32 { int x_factor32; } x_32;
-static _Thread_local volatile struct good_test33 { int x_factor33; } x_33;
-static _Thread_local const volatile struct good_test34 { int x_factor34; } x_34;
-static _Thread_local volatile const struct good_test35 { int x_factor35; } x_35;
-_Thread_local static struct good_test36 { int x_factor36; } x_36;
-_Thread_local static const struct good_test37 { int x_factor37; } x_37;
-_Thread_local static volatile struct good_test38 { int x_factor38; } x_38;
-_Thread_local static const volatile struct good_test39 { int x_factor39; } x_39;
-_Thread_local static volatile const struct good_test40 { int x_factor40; } x_40;
+static _Thread_local struct good_test33 { int x_factor33; } x_33;
+static _Thread_local const struct good_test34 { int x_factor34; } x_34;
+static _Thread_local volatile struct good_test35 { int x_factor35; } x_35;
+static _Thread_local const volatile struct good_test36 { int x_factor36; } x_36;
+static _Thread_local volatile const struct good_test37 { int x_factor37; } x_37;
+_Thread_local static struct good_test38 { int x_factor38; } x_38;
+_Thread_local static const struct good_test39 { int x_factor39; } x_39;
+_Thread_local static volatile struct good_test40 { int x_factor40; } x_40;
+_Thread_local static const volatile struct good_test41 { int x_factor41; } x_41;
+_Thread_local static volatile const struct good_test42 { int x_factor42; } x_42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local struct good_test41 { int x_factor41; } x_41;
-const extern _Thread_local struct good_test42 { int x_factor42; } x_42;
-extern volatile _Thread_local struct good_test43 { int x_factor43; } x_43;
-volatile extern _Thread_local struct good_test44 { int x_factor44; } x_44;
-extern const _Thread_local volatile struct good_test45 { int x_factor45; } x_45;
-extern const volatile _Thread_local struct good_test46 { int x_factor46; } x_46;
-const extern _Thread_local volatile struct good_test47 { int x_factor47; } x_47;
-const extern volatile _Thread_local struct good_test48 { int x_factor48; } x_48;
-const volatile extern _Thread_local struct good_test49 { int x_factor49; } x_49;
-extern volatile _Thread_local const struct good_test50 { int x_factor50; } x_50;
-extern volatile const _Thread_local struct good_test51 { int x_factor51; } x_51;
-volatile extern _Thread_local const struct good_test52 { int x_factor52; } x_52;
-volatile extern const _Thread_local struct good_test53 { int x_factor53; } x_53;
-volatile const extern _Thread_local struct good_test54 { int x_factor54; } x_54;
-_Thread_local const extern struct good_test55 { int x_factor55; } x_55;
-const _Thread_local extern struct good_test56 { int x_factor56; } x_56;
-_Thread_local volatile extern struct good_test57 { int x_factor57; } x_57;
-volatile _Thread_local extern struct good_test58 { int x_factor58; } x_58;
-_Thread_local const extern volatile struct good_test59 { int x_factor59; } x_59;
-_Thread_local const volatile extern struct good_test60 { int x_factor60; } x_60;
-const _Thread_local extern volatile struct good_test61 { int x_factor61; } x_61;
-const _Thread_local volatile extern struct good_test62 { int x_factor62; } x_62;
-const volatile _Thread_local extern struct good_test63 { int x_factor63; } x_63;
-_Thread_local volatile extern const struct good_test64 { int x_factor64; } x_64;
-_Thread_local volatile const extern struct good_test65 { int x_factor65; } x_65;
-volatile _Thread_local extern const struct good_test66 { int x_factor66; } x_66;
-volatile _Thread_local const extern struct good_test67 { int x_factor67; } x_67;
-volatile const _Thread_local extern struct good_test68 { int x_factor68; } x_68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local struct good_test43 { int x_factor43; } x_43;
+const extern _Thread_local struct good_test44 { int x_factor44; } x_44;
+extern volatile _Thread_local struct good_test45 { int x_factor45; } x_45;
+volatile extern _Thread_local struct good_test46 { int x_factor46; } x_46;
+extern const _Thread_local volatile struct good_test47 { int x_factor47; } x_47;
+extern const volatile _Thread_local struct good_test48 { int x_factor48; } x_48;
+const extern _Thread_local volatile struct good_test49 { int x_factor49; } x_49;
+const extern volatile _Thread_local struct good_test50 { int x_factor50; } x_50;
+const volatile extern _Thread_local struct good_test51 { int x_factor51; } x_51;
+extern volatile _Thread_local const struct good_test52 { int x_factor52; } x_52;
+extern volatile const _Thread_local struct good_test53 { int x_factor53; } x_53;
+volatile extern _Thread_local const struct good_test54 { int x_factor54; } x_54;
+volatile extern const _Thread_local struct good_test55 { int x_factor55; } x_55;
+volatile const extern _Thread_local struct good_test56 { int x_factor56; } x_56;
+_Thread_local const extern struct good_test57 { int x_factor57; } x_57;
+const _Thread_local extern struct good_test58 { int x_factor58; } x_58;
+_Thread_local volatile extern struct good_test59 { int x_factor59; } x_59;
+volatile _Thread_local extern struct good_test60 { int x_factor60; } x_60;
+_Thread_local const extern volatile struct good_test61 { int x_factor61; } x_61;
+_Thread_local const volatile extern struct good_test62 { int x_factor62; } x_62;
+const _Thread_local extern volatile struct good_test63 { int x_factor63; } x_63;
+const _Thread_local volatile extern struct good_test64 { int x_factor64; } x_64;
+const volatile _Thread_local extern struct good_test65 { int x_factor65; } x_65;
+_Thread_local volatile extern const struct good_test66 { int x_factor66; } x_66;
+_Thread_local volatile const extern struct good_test67 { int x_factor67; } x_67;
+volatile _Thread_local extern const struct good_test68 { int x_factor68; } x_68;
+volatile _Thread_local const extern struct good_test69 { int x_factor69; } x_69;
+volatile const _Thread_local extern struct good_test70 { int x_factor70; } x_70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local struct good_test69 { int x_factor69; } x_69;
-const static _Thread_local struct good_test70 { int x_factor70; } x_70;
-static volatile _Thread_local struct good_test71 { int x_factor71; } x_71;
-volatile static _Thread_local struct good_test72 { int x_factor72; } x_72;
-static const _Thread_local volatile struct good_test73 { int x_factor73; } x_73;
-static const volatile _Thread_local struct good_test74 { int x_factor74; } x_74;
-const static _Thread_local volatile struct good_test75 { int x_factor75; } x_75;
-const static volatile _Thread_local struct good_test76 { int x_factor76; } x_76;
-const volatile static _Thread_local struct good_test77 { int x_factor77; } x_77;
-static volatile _Thread_local const struct good_test78 { int x_factor78; } x_78;
-static volatile const _Thread_local struct good_test79 { int x_factor79; } x_79;
-volatile static _Thread_local const struct good_test80 { int x_factor80; } x_80;
-volatile static const _Thread_local struct good_test81 { int x_factor81; } x_81;
-volatile const static _Thread_local struct good_test82 { int x_factor82; } x_82;
-_Thread_local const static struct good_test83 { int x_factor83; } x_83;
-const _Thread_local static struct good_test84 { int x_factor84; } x_84;
-_Thread_local volatile static struct good_test85 { int x_factor85; } x_85;
-volatile _Thread_local static struct good_test86 { int x_factor86; } x_86;
-_Thread_local const static volatile struct good_test87 { int x_factor87; } x_87;
-_Thread_local const volatile static struct good_test88 { int x_factor88; } x_88;
-const _Thread_local static volatile struct good_test89 { int x_factor89; } x_89;
-const _Thread_local volatile static struct good_test90 { int x_factor90; } x_90;
-const volatile _Thread_local static struct good_test91 { int x_factor91; } x_91;
-_Thread_local volatile static const struct good_test92 { int x_factor92; } x_92;
-_Thread_local volatile const static struct good_test93 { int x_factor93; } x_93;
-volatile _Thread_local static const struct good_test94 { int x_factor94; } x_94;
-volatile _Thread_local const static struct good_test95 { int x_factor95; } x_95;
-volatile const _Thread_local static struct good_test96 { int x_factor96; } x_96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local struct good_test71 { int x_factor71; } x_71;
+const static _Thread_local struct good_test72 { int x_factor72; } x_72;
+static volatile _Thread_local struct good_test73 { int x_factor73; } x_73;
+volatile static _Thread_local struct good_test74 { int x_factor74; } x_74;
+static const _Thread_local volatile struct good_test75 { int x_factor75; } x_75;
+static const volatile _Thread_local struct good_test76 { int x_factor76; } x_76;
+const static _Thread_local volatile struct good_test77 { int x_factor77; } x_77;
+const static volatile _Thread_local struct good_test78 { int x_factor78; } x_78;
+const volatile static _Thread_local struct good_test79 { int x_factor79; } x_79;
+static volatile _Thread_local const struct good_test80 { int x_factor80; } x_80;
+static volatile const _Thread_local struct good_test81 { int x_factor81; } x_81;
+volatile static _Thread_local const struct good_test82 { int x_factor82; } x_82;
+volatile static const _Thread_local struct good_test83 { int x_factor83; } x_83;
+volatile const static _Thread_local struct good_test84 { int x_factor84; } x_84;
+_Thread_local const static struct good_test85 { int x_factor85; } x_85;
+const _Thread_local static struct good_test86 { int x_factor86; } x_86;
+_Thread_local volatile static struct good_test87 { int x_factor87; } x_87;
+volatile _Thread_local static struct good_test88 { int x_factor88; } x_88;
+_Thread_local const static volatile struct good_test89 { int x_factor89; } x_89;
+_Thread_local const volatile static struct good_test90 { int x_factor90; } x_90;
+const _Thread_local static volatile struct good_test91 { int x_factor91; } x_91;
+const _Thread_local volatile static struct good_test92 { int x_factor92; } x_92;
+const volatile _Thread_local static struct good_test93 { int x_factor93; } x_93;
+_Thread_local volatile static const struct good_test94 { int x_factor94; } x_94;
+_Thread_local volatile const static struct good_test95 { int x_factor95; } x_95;
+volatile _Thread_local static const struct good_test96 { int x_factor96; } x_96;
+volatile _Thread_local const static struct good_test97 { int x_factor97; } x_97;
+volatile const _Thread_local static struct good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+_Static_assert(0==__zcc_linkage(good_test),"good_test has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+_Static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+_Static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def.hpp	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def.hpp	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_struct_def.hpp
+// Pass_struct_def.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
@@ -14,108 +14,109 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local struct good_test x21;
-extern thread_local const struct good_test x22;
-extern thread_local volatile struct good_test x23;
-extern thread_local const volatile struct good_test x24;
-extern thread_local volatile const struct good_test x25;
-thread_local extern struct good_test x26;
-thread_local extern const struct good_test x27;
-thread_local extern volatile struct good_test x28;
-thread_local extern const volatile struct good_test x29;
-thread_local extern volatile const struct good_test x30;
+extern thread_local struct good_test x23;
+extern thread_local const struct good_test x24;
+extern thread_local volatile struct good_test x25;
+extern thread_local const volatile struct good_test x26;
+extern thread_local volatile const struct good_test x27;
+thread_local extern struct good_test x28;
+thread_local extern const struct good_test x29;
+thread_local extern volatile struct good_test x30;
+thread_local extern const volatile struct good_test x31;
+thread_local extern volatile const struct good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local struct good_test x31;
-static thread_local const struct good_test x32;
-static thread_local volatile struct good_test x33;
-static thread_local const volatile struct good_test x34;
-static thread_local volatile const struct good_test x35;
-thread_local static struct good_test x36;
-thread_local static const struct good_test x37;
-thread_local static volatile struct good_test x38;
-thread_local static const volatile struct good_test x39;
-thread_local static volatile const struct good_test x40;
+static thread_local struct good_test x33;
+static thread_local const struct good_test x34;
+static thread_local volatile struct good_test x35;
+static thread_local const volatile struct good_test x36;
+static thread_local volatile const struct good_test x37;
+thread_local static struct good_test x38;
+thread_local static const struct good_test x39;
+thread_local static volatile struct good_test x40;
+thread_local static const volatile struct good_test x41;
+thread_local static volatile const struct good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local struct good_test x41;
-const extern thread_local struct good_test x42;
-extern volatile thread_local struct good_test x43;
-volatile extern thread_local struct good_test x44;
-extern const thread_local volatile struct good_test x45;
-extern const volatile thread_local struct good_test x46;
-const extern thread_local volatile struct good_test x47;
-const extern volatile thread_local struct good_test x48;
-const volatile extern thread_local struct good_test x49;
-extern volatile thread_local const struct good_test x50;
-extern volatile const thread_local struct good_test x51;
-volatile extern thread_local const struct good_test x52;
-volatile extern const thread_local struct good_test x53;
-volatile const extern thread_local struct good_test x54;
-thread_local const extern struct good_test x55;
-const thread_local extern struct good_test x56;
-thread_local volatile extern struct good_test x57;
-volatile thread_local extern struct good_test x58;
-thread_local const extern volatile struct good_test x59;
-thread_local const volatile extern struct good_test x60;
-const thread_local extern volatile struct good_test x61;
-const thread_local volatile extern struct good_test x62;
-const volatile thread_local extern struct good_test x63;
-thread_local volatile extern const struct good_test x64;
-thread_local volatile const extern struct good_test x65;
-volatile thread_local extern const struct good_test x66;
-volatile thread_local const extern struct good_test x67;
-volatile const thread_local extern struct good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local struct good_test x43;
+const extern thread_local struct good_test x44;
+extern volatile thread_local struct good_test x45;
+volatile extern thread_local struct good_test x46;
+extern const thread_local volatile struct good_test x47;
+extern const volatile thread_local struct good_test x48;
+const extern thread_local volatile struct good_test x49;
+const extern volatile thread_local struct good_test x50;
+const volatile extern thread_local struct good_test x51;
+extern volatile thread_local const struct good_test x52;
+extern volatile const thread_local struct good_test x53;
+volatile extern thread_local const struct good_test x54;
+volatile extern const thread_local struct good_test x55;
+volatile const extern thread_local struct good_test x56;
+thread_local const extern struct good_test x57;
+const thread_local extern struct good_test x58;
+thread_local volatile extern struct good_test x59;
+volatile thread_local extern struct good_test x60;
+thread_local const extern volatile struct good_test x61;
+thread_local const volatile extern struct good_test x62;
+const thread_local extern volatile struct good_test x63;
+const thread_local volatile extern struct good_test x64;
+const volatile thread_local extern struct good_test x65;
+thread_local volatile extern const struct good_test x66;
+thread_local volatile const extern struct good_test x67;
+volatile thread_local extern const struct good_test x68;
+volatile thread_local const extern struct good_test x69;
+volatile const thread_local extern struct good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local struct good_test x69;
-const static thread_local struct good_test x70;
-static volatile thread_local struct good_test x71;
-volatile static thread_local struct good_test x72;
-static const thread_local volatile struct good_test x73;
-static const volatile thread_local struct good_test x74;
-const static thread_local volatile struct good_test x75;
-const static volatile thread_local struct good_test x76;
-const volatile static thread_local struct good_test x77;
-static volatile thread_local const struct good_test x78;
-static volatile const thread_local struct good_test x79;
-volatile static thread_local const struct good_test x80;
-volatile static const thread_local struct good_test x81;
-volatile const static thread_local struct good_test x82;
-thread_local const static struct good_test x83;
-const thread_local static struct good_test x84;
-thread_local volatile static struct good_test x85;
-volatile thread_local static struct good_test x86;
-thread_local const static volatile struct good_test x87;
-thread_local const volatile static struct good_test x88;
-const thread_local static volatile struct good_test x89;
-const thread_local volatile static struct good_test x90;
-const volatile thread_local static struct good_test x91;
-thread_local volatile static const struct good_test x92;
-thread_local volatile const static struct good_test x93;
-volatile thread_local static const struct good_test x94;
-volatile thread_local const static struct good_test x95;
-volatile const thread_local static struct good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local struct good_test x71;
+const static thread_local struct good_test x72;
+static volatile thread_local struct good_test x73;
+volatile static thread_local struct good_test x74;
+static const thread_local volatile struct good_test x75;
+static const volatile thread_local struct good_test x76;
+const static thread_local volatile struct good_test x77;
+const static volatile thread_local struct good_test x78;
+const volatile static thread_local struct good_test x79;
+static volatile thread_local const struct good_test x80;
+static volatile const thread_local struct good_test x81;
+volatile static thread_local const struct good_test x82;
+volatile static const thread_local struct good_test x83;
+volatile const static thread_local struct good_test x84;
+thread_local const static struct good_test x85;
+const thread_local static struct good_test x86;
+thread_local volatile static struct good_test x87;
+volatile thread_local static struct good_test x88;
+thread_local const static volatile struct good_test x89;
+thread_local const volatile static struct good_test x90;
+const thread_local static volatile struct good_test x91;
+const thread_local volatile static struct good_test x92;
+const volatile thread_local static struct good_test x93;
+thread_local volatile static const struct good_test x94;
+thread_local volatile const static struct good_test x95;
+volatile thread_local static const struct good_test x96;
+volatile thread_local const static struct good_test x97;
+volatile const thread_local static struct good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const struct good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test6 { int x_factor6; } x_6;
-static volatile struct good_test7 { int x_factor7; } x_7;
-static const volatile struct good_test8 { int x_factor8; } x_8;
-static volatile const struct good_test9 { int x_factor9; } x_9;
+static const struct good_test7 { int x_factor7; } x_7;
+static volatile struct good_test8 { int x_factor8; } x_8;
+static const volatile struct good_test9 { int x_factor9; } x_9;
+static volatile const struct good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test10 { int x_factor10; } x_10;
-volatile extern struct good_test11 { int x_factor11; } x_11;
-const extern volatile struct good_test12 { int x_factor12; } x_12;
-const volatile extern struct good_test13 { int x_factor13; } x_13;
-volatile extern const struct good_test14 { int x_factor14; } x_14;
-volatile const extern struct good_test15 { int x_factor15; } x_15;
-volatile static struct good_test16 { int x_factor16; } x_16;
-const static volatile struct good_test17 { int x_factor17; } x_17;
-const volatile static struct good_test18 { int x_factor18; } x_18;
-volatile static const struct good_test19 { int x_factor19; } x_19;
-volatile const static struct good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test11 { int x_factor11; } x_11;
+volatile extern struct good_test12 { int x_factor12; } x_12;
+const extern volatile struct good_test13 { int x_factor13; } x_13;
+const volatile extern struct good_test14 { int x_factor14; } x_14;
+volatile extern const struct good_test15 { int x_factor15; } x_15;
+volatile const extern struct good_test16 { int x_factor16; } x_16;
+const static struct good_test17 { int x_factor17; } x_17;
+volatile static struct good_test18 { int x_factor18; } x_18;
+const static volatile struct good_test19 { int x_factor19; } x_19;
+const volatile static struct good_test20 { int x_factor20; } x_20;
+volatile static const struct good_test21 { int x_factor21; } x_21;
+volatile const static struct good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local struct good_test21 { int x_factor21; } x_21;
-extern thread_local const struct good_test22 { int x_factor22; } x_22;
-extern thread_local volatile struct good_test23 { int x_factor23; } x_23;
-extern thread_local const volatile struct good_test24 { int x_factor24; } x_24;
-extern thread_local volatile const struct good_test25 { int x_factor25; } x_25;
-thread_local extern struct good_test26 { int x_factor26; } x_26;
-thread_local extern const struct good_test27 { int x_factor27; } x_27;
-thread_local extern volatile struct good_test28 { int x_factor28; } x_28;
-thread_local extern const volatile struct good_test29 { int x_factor29; } x_29;
-thread_local extern volatile const struct good_test30 { int x_factor30; } x_30;
+extern thread_local struct good_test23 { int x_factor23; } x_23;
+extern thread_local const struct good_test24 { int x_factor24; } x_24;
+extern thread_local volatile struct good_test25 { int x_factor25; } x_25;
+extern thread_local const volatile struct good_test26 { int x_factor26; } x_26;
+extern thread_local volatile const struct good_test27 { int x_factor27; } x_27;
+thread_local extern struct good_test28 { int x_factor28; } x_28;
+thread_local extern const struct good_test29 { int x_factor29; } x_29;
+thread_local extern volatile struct good_test30 { int x_factor30; } x_30;
+thread_local extern const volatile struct good_test31 { int x_factor31; } x_31;
+thread_local extern volatile const struct good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on thread_local static
-static thread_local struct good_test31 { int x_factor31; } x_31;
-static thread_local const struct good_test32 { int x_factor32; } x_32;
-static thread_local volatile struct good_test33 { int x_factor33; } x_33;
-static thread_local const volatile struct good_test34 { int x_factor34; } x_34;
-static thread_local volatile const struct good_test35 { int x_factor35; } x_35;
-thread_local static struct good_test36 { int x_factor36; } x_36;
-thread_local static const struct good_test37 { int x_factor37; } x_37;
-thread_local static volatile struct good_test38 { int x_factor38; } x_38;
-thread_local static const volatile struct good_test39 { int x_factor39; } x_39;
-thread_local static volatile const struct good_test40 { int x_factor40; } x_40;
+static thread_local struct good_test33 { int x_factor33; } x_33;
+static thread_local const struct good_test34 { int x_factor34; } x_34;
+static thread_local volatile struct good_test35 { int x_factor35; } x_35;
+static thread_local const volatile struct good_test36 { int x_factor36; } x_36;
+static thread_local volatile const struct good_test37 { int x_factor37; } x_37;
+thread_local static struct good_test38 { int x_factor38; } x_38;
+thread_local static const struct good_test39 { int x_factor39; } x_39;
+thread_local static volatile struct good_test40 { int x_factor40; } x_40;
+thread_local static const volatile struct good_test41 { int x_factor41; } x_41;
+thread_local static volatile const struct good_test42 { int x_factor42; } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local struct good_test41 { int x_factor41; } x_41;
-const extern thread_local struct good_test42 { int x_factor42; } x_42;
-extern volatile thread_local struct good_test43 { int x_factor43; } x_43;
-volatile extern thread_local struct good_test44 { int x_factor44; } x_44;
-extern const thread_local volatile struct good_test45 { int x_factor45; } x_45;
-extern const volatile thread_local struct good_test46 { int x_factor46; } x_46;
-const extern thread_local volatile struct good_test47 { int x_factor47; } x_47;
-const extern volatile thread_local struct good_test48 { int x_factor48; } x_48;
-const volatile extern thread_local struct good_test49 { int x_factor49; } x_49;
-extern volatile thread_local const struct good_test50 { int x_factor50; } x_50;
-extern volatile const thread_local struct good_test51 { int x_factor51; } x_51;
-volatile extern thread_local const struct good_test52 { int x_factor52; } x_52;
-volatile extern const thread_local struct good_test53 { int x_factor53; } x_53;
-volatile const extern thread_local struct good_test54 { int x_factor54; } x_54;
-thread_local const extern struct good_test55 { int x_factor55; } x_55;
-const thread_local extern struct good_test56 { int x_factor56; } x_56;
-thread_local volatile extern struct good_test57 { int x_factor57; } x_57;
-volatile thread_local extern struct good_test58 { int x_factor58; } x_58;
-thread_local const extern volatile struct good_test59 { int x_factor59; } x_59;
-thread_local const volatile extern struct good_test60 { int x_factor60; } x_60;
-const thread_local extern volatile struct good_test61 { int x_factor61; } x_61;
-const thread_local volatile extern struct good_test62 { int x_factor62; } x_62;
-const volatile thread_local extern struct good_test63 { int x_factor63; } x_63;
-thread_local volatile extern const struct good_test64 { int x_factor64; } x_64;
-thread_local volatile const extern struct good_test65 { int x_factor65; } x_65;
-volatile thread_local extern const struct good_test66 { int x_factor66; } x_66;
-volatile thread_local const extern struct good_test67 { int x_factor67; } x_67;
-volatile const thread_local extern struct good_test68 { int x_factor68; } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local struct good_test43 { int x_factor43; } x_43;
+const extern thread_local struct good_test44 { int x_factor44; } x_44;
+extern volatile thread_local struct good_test45 { int x_factor45; } x_45;
+volatile extern thread_local struct good_test46 { int x_factor46; } x_46;
+extern const thread_local volatile struct good_test47 { int x_factor47; } x_47;
+extern const volatile thread_local struct good_test48 { int x_factor48; } x_48;
+const extern thread_local volatile struct good_test49 { int x_factor49; } x_49;
+const extern volatile thread_local struct good_test50 { int x_factor50; } x_50;
+const volatile extern thread_local struct good_test51 { int x_factor51; } x_51;
+extern volatile thread_local const struct good_test52 { int x_factor52; } x_52;
+extern volatile const thread_local struct good_test53 { int x_factor53; } x_53;
+volatile extern thread_local const struct good_test54 { int x_factor54; } x_54;
+volatile extern const thread_local struct good_test55 { int x_factor55; } x_55;
+volatile const extern thread_local struct good_test56 { int x_factor56; } x_56;
+thread_local const extern struct good_test57 { int x_factor57; } x_57;
+const thread_local extern struct good_test58 { int x_factor58; } x_58;
+thread_local volatile extern struct good_test59 { int x_factor59; } x_59;
+volatile thread_local extern struct good_test60 { int x_factor60; } x_60;
+thread_local const extern volatile struct good_test61 { int x_factor61; } x_61;
+thread_local const volatile extern struct good_test62 { int x_factor62; } x_62;
+const thread_local extern volatile struct good_test63 { int x_factor63; } x_63;
+const thread_local volatile extern struct good_test64 { int x_factor64; } x_64;
+const volatile thread_local extern struct good_test65 { int x_factor65; } x_65;
+thread_local volatile extern const struct good_test66 { int x_factor66; } x_66;
+thread_local volatile const extern struct good_test67 { int x_factor67; } x_67;
+volatile thread_local extern const struct good_test68 { int x_factor68; } x_68;
+volatile thread_local const extern struct good_test69 { int x_factor69; } x_69;
+volatile const thread_local extern struct good_test70 { int x_factor70; } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local struct good_test69 { int x_factor69; } x_69;
-const static thread_local struct good_test70 { int x_factor70; } x_70;
-static volatile thread_local struct good_test71 { int x_factor71; } x_71;
-volatile static thread_local struct good_test72 { int x_factor72; } x_72;
-static const thread_local volatile struct good_test73 { int x_factor73; } x_73;
-static const volatile thread_local struct good_test74 { int x_factor74; } x_74;
-const static thread_local volatile struct good_test75 { int x_factor75; } x_75;
-const static volatile thread_local struct good_test76 { int x_factor76; } x_76;
-const volatile static thread_local struct good_test77 { int x_factor77; } x_77;
-static volatile thread_local const struct good_test78 { int x_factor78; } x_78;
-static volatile const thread_local struct good_test79 { int x_factor79; } x_79;
-volatile static thread_local const struct good_test80 { int x_factor80; } x_80;
-volatile static const thread_local struct good_test81 { int x_factor81; } x_81;
-volatile const static thread_local struct good_test82 { int x_factor82; } x_82;
-thread_local const static struct good_test83 { int x_factor83; } x_83;
-const thread_local static struct good_test84 { int x_factor84; } x_84;
-thread_local volatile static struct good_test85 { int x_factor85; } x_85;
-volatile thread_local static struct good_test86 { int x_factor86; } x_86;
-thread_local const static volatile struct good_test87 { int x_factor87; } x_87;
-thread_local const volatile static struct good_test88 { int x_factor88; } x_88;
-const thread_local static volatile struct good_test89 { int x_factor89; } x_89;
-const thread_local volatile static struct good_test90 { int x_factor90; } x_90;
-const volatile thread_local static struct good_test91 { int x_factor91; } x_91;
-thread_local volatile static const struct good_test92 { int x_factor92; } x_92;
-thread_local volatile const static struct good_test93 { int x_factor93; } x_93;
-volatile thread_local static const struct good_test94 { int x_factor94; } x_94;
-volatile thread_local const static struct good_test95 { int x_factor95; } x_95;
-volatile const thread_local static struct good_test96 { int x_factor96; } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local struct good_test71 { int x_factor71; } x_71;
+const static thread_local struct good_test72 { int x_factor72; } x_72;
+static volatile thread_local struct good_test73 { int x_factor73; } x_73;
+volatile static thread_local struct good_test74 { int x_factor74; } x_74;
+static const thread_local volatile struct good_test75 { int x_factor75; } x_75;
+static const volatile thread_local struct good_test76 { int x_factor76; } x_76;
+const static thread_local volatile struct good_test77 { int x_factor77; } x_77;
+const static volatile thread_local struct good_test78 { int x_factor78; } x_78;
+const volatile static thread_local struct good_test79 { int x_factor79; } x_79;
+static volatile thread_local const struct good_test80 { int x_factor80; } x_80;
+static volatile const thread_local struct good_test81 { int x_factor81; } x_81;
+volatile static thread_local const struct good_test82 { int x_factor82; } x_82;
+volatile static const thread_local struct good_test83 { int x_factor83; } x_83;
+volatile const static thread_local struct good_test84 { int x_factor84; } x_84;
+thread_local const static struct good_test85 { int x_factor85; } x_85;
+const thread_local static struct good_test86 { int x_factor86; } x_86;
+thread_local volatile static struct good_test87 { int x_factor87; } x_87;
+volatile thread_local static struct good_test88 { int x_factor88; } x_88;
+thread_local const static volatile struct good_test89 { int x_factor89; } x_89;
+thread_local const volatile static struct good_test90 { int x_factor90; } x_90;
+const thread_local static volatile struct good_test91 { int x_factor91; } x_91;
+const thread_local volatile static struct good_test92 { int x_factor92; } x_92;
+const volatile thread_local static struct good_test93 { int x_factor93; } x_93;
+thread_local volatile static const struct good_test94 { int x_factor94; } x_94;
+thread_local volatile const static struct good_test95 { int x_factor95; } x_95;
+volatile thread_local static const struct good_test96 { int x_factor96; } x_96;
+volatile thread_local const static struct good_test97 { int x_factor97; } x_97;
+volatile const thread_local static struct good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,5 @@
 // decl.C99/Pass_struct_def2.hpp
+// (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
 struct good_test {
@@ -14,108 +15,109 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 // check that things work properly in namespaces
 namespace test {
@@ -132,108 +134,109 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local struct good_test x21;
-extern thread_local const struct good_test x22;
-extern thread_local volatile struct good_test x23;
-extern thread_local const volatile struct good_test x24;
-extern thread_local volatile const struct good_test x25;
-thread_local extern struct good_test x26;
-thread_local extern const struct good_test x27;
-thread_local extern volatile struct good_test x28;
-thread_local extern const volatile struct good_test x29;
-thread_local extern volatile const struct good_test x30;
+extern thread_local struct good_test x23;
+extern thread_local const struct good_test x24;
+extern thread_local volatile struct good_test x25;
+extern thread_local const volatile struct good_test x26;
+extern thread_local volatile const struct good_test x27;
+thread_local extern struct good_test x28;
+thread_local extern const struct good_test x29;
+thread_local extern volatile struct good_test x30;
+thread_local extern const volatile struct good_test x31;
+thread_local extern volatile const struct good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local struct good_test x31;
-static thread_local const struct good_test x32;
-static thread_local volatile struct good_test x33;
-static thread_local const volatile struct good_test x34;
-static thread_local volatile const struct good_test x35;
-thread_local static struct good_test x36;
-thread_local static const struct good_test x37;
-thread_local static volatile struct good_test x38;
-thread_local static const volatile struct good_test x39;
-thread_local static volatile const struct good_test x40;
+static thread_local struct good_test x33;
+static thread_local const struct good_test x34;
+static thread_local volatile struct good_test x35;
+static thread_local const volatile struct good_test x36;
+static thread_local volatile const struct good_test x37;
+thread_local static struct good_test x38;
+thread_local static const struct good_test x39;
+thread_local static volatile struct good_test x40;
+thread_local static const volatile struct good_test x41;
+thread_local static volatile const struct good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local struct good_test x41;
-const extern thread_local struct good_test x42;
-extern volatile thread_local struct good_test x43;
-volatile extern thread_local struct good_test x44;
-extern const thread_local volatile struct good_test x45;
-extern const volatile thread_local struct good_test x46;
-const extern thread_local volatile struct good_test x47;
-const extern volatile thread_local struct good_test x48;
-const volatile extern thread_local struct good_test x49;
-extern volatile thread_local const struct good_test x50;
-extern volatile const thread_local struct good_test x51;
-volatile extern thread_local const struct good_test x52;
-volatile extern const thread_local struct good_test x53;
-volatile const extern thread_local struct good_test x54;
-thread_local const extern struct good_test x55;
-const thread_local extern struct good_test x56;
-thread_local volatile extern struct good_test x57;
-volatile thread_local extern struct good_test x58;
-thread_local const extern volatile struct good_test x59;
-thread_local const volatile extern struct good_test x60;
-const thread_local extern volatile struct good_test x61;
-const thread_local volatile extern struct good_test x62;
-const volatile thread_local extern struct good_test x63;
-thread_local volatile extern const struct good_test x64;
-thread_local volatile const extern struct good_test x65;
-volatile thread_local extern const struct good_test x66;
-volatile thread_local const extern struct good_test x67;
-volatile const thread_local extern struct good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local struct good_test x43;
+const extern thread_local struct good_test x44;
+extern volatile thread_local struct good_test x45;
+volatile extern thread_local struct good_test x46;
+extern const thread_local volatile struct good_test x47;
+extern const volatile thread_local struct good_test x48;
+const extern thread_local volatile struct good_test x49;
+const extern volatile thread_local struct good_test x50;
+const volatile extern thread_local struct good_test x51;
+extern volatile thread_local const struct good_test x52;
+extern volatile const thread_local struct good_test x53;
+volatile extern thread_local const struct good_test x54;
+volatile extern const thread_local struct good_test x55;
+volatile const extern thread_local struct good_test x56;
+thread_local const extern struct good_test x57;
+const thread_local extern struct good_test x58;
+thread_local volatile extern struct good_test x59;
+volatile thread_local extern struct good_test x60;
+thread_local const extern volatile struct good_test x61;
+thread_local const volatile extern struct good_test x62;
+const thread_local extern volatile struct good_test x63;
+const thread_local volatile extern struct good_test x64;
+const volatile thread_local extern struct good_test x65;
+thread_local volatile extern const struct good_test x66;
+thread_local volatile const extern struct good_test x67;
+volatile thread_local extern const struct good_test x68;
+volatile thread_local const extern struct good_test x69;
+volatile const thread_local extern struct good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local struct good_test x69;
-const static thread_local struct good_test x70;
-static volatile thread_local struct good_test x71;
-volatile static thread_local struct good_test x72;
-static const thread_local volatile struct good_test x73;
-static const volatile thread_local struct good_test x74;
-const static thread_local volatile struct good_test x75;
-const static volatile thread_local struct good_test x76;
-const volatile static thread_local struct good_test x77;
-static volatile thread_local const struct good_test x78;
-static volatile const thread_local struct good_test x79;
-volatile static thread_local const struct good_test x80;
-volatile static const thread_local struct good_test x81;
-volatile const static thread_local struct good_test x82;
-thread_local const static struct good_test x83;
-const thread_local static struct good_test x84;
-thread_local volatile static struct good_test x85;
-volatile thread_local static struct good_test x86;
-thread_local const static volatile struct good_test x87;
-thread_local const volatile static struct good_test x88;
-const thread_local static volatile struct good_test x89;
-const thread_local volatile static struct good_test x90;
-const volatile thread_local static struct good_test x91;
-thread_local volatile static const struct good_test x92;
-thread_local volatile const static struct good_test x93;
-volatile thread_local static const struct good_test x94;
-volatile thread_local const static struct good_test x95;
-volatile const thread_local static struct good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local struct good_test x71;
+const static thread_local struct good_test x72;
+static volatile thread_local struct good_test x73;
+volatile static thread_local struct good_test x74;
+static const thread_local volatile struct good_test x75;
+static const volatile thread_local struct good_test x76;
+const static thread_local volatile struct good_test x77;
+const static volatile thread_local struct good_test x78;
+const volatile static thread_local struct good_test x79;
+static volatile thread_local const struct good_test x80;
+static volatile const thread_local struct good_test x81;
+volatile static thread_local const struct good_test x82;
+volatile static const thread_local struct good_test x83;
+volatile const static thread_local struct good_test x84;
+thread_local const static struct good_test x85;
+const thread_local static struct good_test x86;
+thread_local volatile static struct good_test x87;
+volatile thread_local static struct good_test x88;
+thread_local const static volatile struct good_test x89;
+thread_local const volatile static struct good_test x90;
+const thread_local static volatile struct good_test x91;
+const thread_local volatile static struct good_test x92;
+const volatile thread_local static struct good_test x93;
+thread_local volatile static const struct good_test x94;
+thread_local volatile const static struct good_test x95;
+volatile thread_local static const struct good_test x96;
+volatile thread_local const static struct good_test x97;
+volatile const thread_local static struct good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -244,108 +247,109 @@
 extern volatile const struct good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test6 { int x_factor6; } x_6;
-static volatile struct good_test7 { int x_factor7; } x_7;
-static const volatile struct good_test8 { int x_factor8; } x_8;
-static volatile const struct good_test9 { int x_factor9; } x_9;
+static const struct good_test7 { int x_factor7; } x_7;
+static volatile struct good_test8 { int x_factor8; } x_8;
+static const volatile struct good_test9 { int x_factor9; } x_9;
+static volatile const struct good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test10 { int x_factor10; } x_10;
-volatile extern struct good_test11 { int x_factor11; } x_11;
-const extern volatile struct good_test12 { int x_factor12; } x_12;
-const volatile extern struct good_test13 { int x_factor13; } x_13;
-volatile extern const struct good_test14 { int x_factor14; } x_14;
-volatile const extern struct good_test15 { int x_factor15; } x_15;
-volatile static struct good_test16 { int x_factor16; } x_16;
-const static volatile struct good_test17 { int x_factor17; } x_17;
-const volatile static struct good_test18 { int x_factor18; } x_18;
-volatile static const struct good_test19 { int x_factor19; } x_19;
-volatile const static struct good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test11 { int x_factor11; } x_11;
+volatile extern struct good_test12 { int x_factor12; } x_12;
+const extern volatile struct good_test13 { int x_factor13; } x_13;
+const volatile extern struct good_test14 { int x_factor14; } x_14;
+volatile extern const struct good_test15 { int x_factor15; } x_15;
+volatile const extern struct good_test16 { int x_factor16; } x_16;
+const static struct good_test17 { int x_factor17; } x_17;
+volatile static struct good_test18 { int x_factor18; } x_18;
+const static volatile struct good_test19 { int x_factor19; } x_19;
+const volatile static struct good_test20 { int x_factor20; } x_20;
+volatile static const struct good_test21 { int x_factor21; } x_21;
+volatile const static struct good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local struct good_test21 { int x_factor21; } x_21;
-extern thread_local const struct good_test22 { int x_factor22; } x_22;
-extern thread_local volatile struct good_test23 { int x_factor23; } x_23;
-extern thread_local const volatile struct good_test24 { int x_factor24; } x_24;
-extern thread_local volatile const struct good_test25 { int x_factor25; } x_25;
-thread_local extern struct good_test26 { int x_factor26; } x_26;
-thread_local extern const struct good_test27 { int x_factor27; } x_27;
-thread_local extern volatile struct good_test28 { int x_factor28; } x_28;
-thread_local extern const volatile struct good_test29 { int x_factor29; } x_29;
-thread_local extern volatile const struct good_test30 { int x_factor30; } x_30;
+extern thread_local struct good_test23 { int x_factor23; } x_23;
+extern thread_local const struct good_test24 { int x_factor24; } x_24;
+extern thread_local volatile struct good_test25 { int x_factor25; } x_25;
+extern thread_local const volatile struct good_test26 { int x_factor26; } x_26;
+extern thread_local volatile const struct good_test27 { int x_factor27; } x_27;
+thread_local extern struct good_test28 { int x_factor28; } x_28;
+thread_local extern const struct good_test29 { int x_factor29; } x_29;
+thread_local extern volatile struct good_test30 { int x_factor30; } x_30;
+thread_local extern const volatile struct good_test31 { int x_factor31; } x_31;
+thread_local extern volatile const struct good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on thread_local static
-static thread_local struct good_test31 { int x_factor31; } x_31;
-static thread_local const struct good_test32 { int x_factor32; } x_32;
-static thread_local volatile struct good_test33 { int x_factor33; } x_33;
-static thread_local const volatile struct good_test34 { int x_factor34; } x_34;
-static thread_local volatile const struct good_test35 { int x_factor35; } x_35;
-thread_local static struct good_test36 { int x_factor36; } x_36;
-thread_local static const struct good_test37 { int x_factor37; } x_37;
-thread_local static volatile struct good_test38 { int x_factor38; } x_38;
-thread_local static const volatile struct good_test39 { int x_factor39; } x_39;
-thread_local static volatile const struct good_test40 { int x_factor40; } x_40;
+static thread_local struct good_test33 { int x_factor33; } x_33;
+static thread_local const struct good_test34 { int x_factor34; } x_34;
+static thread_local volatile struct good_test35 { int x_factor35; } x_35;
+static thread_local const volatile struct good_test36 { int x_factor36; } x_36;
+static thread_local volatile const struct good_test37 { int x_factor37; } x_37;
+thread_local static struct good_test38 { int x_factor38; } x_38;
+thread_local static const struct good_test39 { int x_factor39; } x_39;
+thread_local static volatile struct good_test40 { int x_factor40; } x_40;
+thread_local static const volatile struct good_test41 { int x_factor41; } x_41;
+thread_local static volatile const struct good_test42 { int x_factor42; } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local struct good_test41 { int x_factor41; } x_41;
-const extern thread_local struct good_test42 { int x_factor42; } x_42;
-extern volatile thread_local struct good_test43 { int x_factor43; } x_43;
-volatile extern thread_local struct good_test44 { int x_factor44; } x_44;
-extern const thread_local volatile struct good_test45 { int x_factor45; } x_45;
-extern const volatile thread_local struct good_test46 { int x_factor46; } x_46;
-const extern thread_local volatile struct good_test47 { int x_factor47; } x_47;
-const extern volatile thread_local struct good_test48 { int x_factor48; } x_48;
-const volatile extern thread_local struct good_test49 { int x_factor49; } x_49;
-extern volatile thread_local const struct good_test50 { int x_factor50; } x_50;
-extern volatile const thread_local struct good_test51 { int x_factor51; } x_51;
-volatile extern thread_local const struct good_test52 { int x_factor52; } x_52;
-volatile extern const thread_local struct good_test53 { int x_factor53; } x_53;
-volatile const extern thread_local struct good_test54 { int x_factor54; } x_54;
-thread_local const extern struct good_test55 { int x_factor55; } x_55;
-const thread_local extern struct good_test56 { int x_factor56; } x_56;
-thread_local volatile extern struct good_test57 { int x_factor57; } x_57;
-volatile thread_local extern struct good_test58 { int x_factor58; } x_58;
-thread_local const extern volatile struct good_test59 { int x_factor59; } x_59;
-thread_local const volatile extern struct good_test60 { int x_factor60; } x_60;
-const thread_local extern volatile struct good_test61 { int x_factor61; } x_61;
-const thread_local volatile extern struct good_test62 { int x_factor62; } x_62;
-const volatile thread_local extern struct good_test63 { int x_factor63; } x_63;
-thread_local volatile extern const struct good_test64 { int x_factor64; } x_64;
-thread_local volatile const extern struct good_test65 { int x_factor65; } x_65;
-volatile thread_local extern const struct good_test66 { int x_factor66; } x_66;
-volatile thread_local const extern struct good_test67 { int x_factor67; } x_67;
-volatile const thread_local extern struct good_test68 { int x_factor68; } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local struct good_test43 { int x_factor43; } x_43;
+const extern thread_local struct good_test44 { int x_factor44; } x_44;
+extern volatile thread_local struct good_test45 { int x_factor45; } x_45;
+volatile extern thread_local struct good_test46 { int x_factor46; } x_46;
+extern const thread_local volatile struct good_test47 { int x_factor47; } x_47;
+extern const volatile thread_local struct good_test48 { int x_factor48; } x_48;
+const extern thread_local volatile struct good_test49 { int x_factor49; } x_49;
+const extern volatile thread_local struct good_test50 { int x_factor50; } x_50;
+const volatile extern thread_local struct good_test51 { int x_factor51; } x_51;
+extern volatile thread_local const struct good_test52 { int x_factor52; } x_52;
+extern volatile const thread_local struct good_test53 { int x_factor53; } x_53;
+volatile extern thread_local const struct good_test54 { int x_factor54; } x_54;
+volatile extern const thread_local struct good_test55 { int x_factor55; } x_55;
+volatile const extern thread_local struct good_test56 { int x_factor56; } x_56;
+thread_local const extern struct good_test57 { int x_factor57; } x_57;
+const thread_local extern struct good_test58 { int x_factor58; } x_58;
+thread_local volatile extern struct good_test59 { int x_factor59; } x_59;
+volatile thread_local extern struct good_test60 { int x_factor60; } x_60;
+thread_local const extern volatile struct good_test61 { int x_factor61; } x_61;
+thread_local const volatile extern struct good_test62 { int x_factor62; } x_62;
+const thread_local extern volatile struct good_test63 { int x_factor63; } x_63;
+const thread_local volatile extern struct good_test64 { int x_factor64; } x_64;
+const volatile thread_local extern struct good_test65 { int x_factor65; } x_65;
+thread_local volatile extern const struct good_test66 { int x_factor66; } x_66;
+thread_local volatile const extern struct good_test67 { int x_factor67; } x_67;
+volatile thread_local extern const struct good_test68 { int x_factor68; } x_68;
+volatile thread_local const extern struct good_test69 { int x_factor69; } x_69;
+volatile const thread_local extern struct good_test70 { int x_factor70; } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local struct good_test69 { int x_factor69; } x_69;
-const static thread_local struct good_test70 { int x_factor70; } x_70;
-static volatile thread_local struct good_test71 { int x_factor71; } x_71;
-volatile static thread_local struct good_test72 { int x_factor72; } x_72;
-static const thread_local volatile struct good_test73 { int x_factor73; } x_73;
-static const volatile thread_local struct good_test74 { int x_factor74; } x_74;
-const static thread_local volatile struct good_test75 { int x_factor75; } x_75;
-const static volatile thread_local struct good_test76 { int x_factor76; } x_76;
-const volatile static thread_local struct good_test77 { int x_factor77; } x_77;
-static volatile thread_local const struct good_test78 { int x_factor78; } x_78;
-static volatile const thread_local struct good_test79 { int x_factor79; } x_79;
-volatile static thread_local const struct good_test80 { int x_factor80; } x_80;
-volatile static const thread_local struct good_test81 { int x_factor81; } x_81;
-volatile const static thread_local struct good_test82 { int x_factor82; } x_82;
-thread_local const static struct good_test83 { int x_factor83; } x_83;
-const thread_local static struct good_test84 { int x_factor84; } x_84;
-thread_local volatile static struct good_test85 { int x_factor85; } x_85;
-volatile thread_local static struct good_test86 { int x_factor86; } x_86;
-thread_local const static volatile struct good_test87 { int x_factor87; } x_87;
-thread_local const volatile static struct good_test88 { int x_factor88; } x_88;
-const thread_local static volatile struct good_test89 { int x_factor89; } x_89;
-const thread_local volatile static struct good_test90 { int x_factor90; } x_90;
-const volatile thread_local static struct good_test91 { int x_factor91; } x_91;
-thread_local volatile static const struct good_test92 { int x_factor92; } x_92;
-thread_local volatile const static struct good_test93 { int x_factor93; } x_93;
-volatile thread_local static const struct good_test94 { int x_factor94; } x_94;
-volatile thread_local const static struct good_test95 { int x_factor95; } x_95;
-volatile const thread_local static struct good_test96 { int x_factor96; } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local struct good_test71 { int x_factor71; } x_71;
+const static thread_local struct good_test72 { int x_factor72; } x_72;
+static volatile thread_local struct good_test73 { int x_factor73; } x_73;
+volatile static thread_local struct good_test74 { int x_factor74; } x_74;
+static const thread_local volatile struct good_test75 { int x_factor75; } x_75;
+static const volatile thread_local struct good_test76 { int x_factor76; } x_76;
+const static thread_local volatile struct good_test77 { int x_factor77; } x_77;
+const static volatile thread_local struct good_test78 { int x_factor78; } x_78;
+const volatile static thread_local struct good_test79 { int x_factor79; } x_79;
+static volatile thread_local const struct good_test80 { int x_factor80; } x_80;
+static volatile const thread_local struct good_test81 { int x_factor81; } x_81;
+volatile static thread_local const struct good_test82 { int x_factor82; } x_82;
+volatile static const thread_local struct good_test83 { int x_factor83; } x_83;
+volatile const static thread_local struct good_test84 { int x_factor84; } x_84;
+thread_local const static struct good_test85 { int x_factor85; } x_85;
+const thread_local static struct good_test86 { int x_factor86; } x_86;
+thread_local volatile static struct good_test87 { int x_factor87; } x_87;
+volatile thread_local static struct good_test88 { int x_factor88; } x_88;
+thread_local const static volatile struct good_test89 { int x_factor89; } x_89;
+thread_local const volatile static struct good_test90 { int x_factor90; } x_90;
+const thread_local static volatile struct good_test91 { int x_factor91; } x_91;
+const thread_local volatile static struct good_test92 { int x_factor92; } x_92;
+const volatile thread_local static struct good_test93 { int x_factor93; } x_93;
+thread_local volatile static const struct good_test94 { int x_factor94; } x_94;
+thread_local volatile const static struct good_test95 { int x_factor95; } x_95;
+volatile thread_local static const struct good_test96 { int x_factor96; } x_96;
+volatile thread_local const static struct good_test97 { int x_factor97; } x_97;
+volatile const thread_local static struct good_test98 { int x_factor98; } x_98;
 
 }	// end namespace test
 
@@ -364,107 +368,108 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 }	// end namespace test2

Modified: trunk/tests/zcc/decl.C99/Pass_union_def.h
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def.h	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_union_def.h	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_union_def.h
+// Pass_union_def.h
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
@@ -14,108 +14,109 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local union good_test x21;
-extern _Thread_local const union good_test x22;
-extern _Thread_local volatile union good_test x23;
-extern _Thread_local const volatile union good_test x24;
-extern _Thread_local volatile const union good_test x25;
-_Thread_local extern union good_test x26;
-_Thread_local extern const union good_test x27;
-_Thread_local extern volatile union good_test x28;
-_Thread_local extern const volatile union good_test x29;
-_Thread_local extern volatile const union good_test x30;
+extern _Thread_local union good_test x23;
+extern _Thread_local const union good_test x24;
+extern _Thread_local volatile union good_test x25;
+extern _Thread_local const volatile union good_test x26;
+extern _Thread_local volatile const union good_test x27;
+_Thread_local extern union good_test x28;
+_Thread_local extern const union good_test x29;
+_Thread_local extern volatile union good_test x30;
+_Thread_local extern const volatile union good_test x31;
+_Thread_local extern volatile const union good_test x32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local union good_test x31;
-static _Thread_local const union good_test x32;
-static _Thread_local volatile union good_test x33;
-static _Thread_local const volatile union good_test x34;
-static _Thread_local volatile const union good_test x35;
-_Thread_local static union good_test x36;
-_Thread_local static const union good_test x37;
-_Thread_local static volatile union good_test x38;
-_Thread_local static const volatile union good_test x39;
-_Thread_local static volatile const union good_test x40;
+static _Thread_local union good_test x33;
+static _Thread_local const union good_test x34;
+static _Thread_local volatile union good_test x35;
+static _Thread_local const volatile union good_test x36;
+static _Thread_local volatile const union good_test x37;
+_Thread_local static union good_test x38;
+_Thread_local static const union good_test x39;
+_Thread_local static volatile union good_test x40;
+_Thread_local static const volatile union good_test x41;
+_Thread_local static volatile const union good_test x42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local union good_test x41;
-const extern _Thread_local union good_test x42;
-extern volatile _Thread_local union good_test x43;
-volatile extern _Thread_local union good_test x44;
-extern const _Thread_local volatile union good_test x45;
-extern const volatile _Thread_local union good_test x46;
-const extern _Thread_local volatile union good_test x47;
-const extern volatile _Thread_local union good_test x48;
-const volatile extern _Thread_local union good_test x49;
-extern volatile _Thread_local const union good_test x50;
-extern volatile const _Thread_local union good_test x51;
-volatile extern _Thread_local const union good_test x52;
-volatile extern const _Thread_local union good_test x53;
-volatile const extern _Thread_local union good_test x54;
-_Thread_local const extern union good_test x55;
-const _Thread_local extern union good_test x56;
-_Thread_local volatile extern union good_test x57;
-volatile _Thread_local extern union good_test x58;
-_Thread_local const extern volatile union good_test x59;
-_Thread_local const volatile extern union good_test x60;
-const _Thread_local extern volatile union good_test x61;
-const _Thread_local volatile extern union good_test x62;
-const volatile _Thread_local extern union good_test x63;
-_Thread_local volatile extern const union good_test x64;
-_Thread_local volatile const extern union good_test x65;
-volatile _Thread_local extern const union good_test x66;
-volatile _Thread_local const extern union good_test x67;
-volatile const _Thread_local extern union good_test x68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local union good_test x43;
+const extern _Thread_local union good_test x44;
+extern volatile _Thread_local union good_test x45;
+volatile extern _Thread_local union good_test x46;
+extern const _Thread_local volatile union good_test x47;
+extern const volatile _Thread_local union good_test x48;
+const extern _Thread_local volatile union good_test x49;
+const extern volatile _Thread_local union good_test x50;
+const volatile extern _Thread_local union good_test x51;
+extern volatile _Thread_local const union good_test x52;
+extern volatile const _Thread_local union good_test x53;
+volatile extern _Thread_local const union good_test x54;
+volatile extern const _Thread_local union good_test x55;
+volatile const extern _Thread_local union good_test x56;
+_Thread_local const extern union good_test x57;
+const _Thread_local extern union good_test x58;
+_Thread_local volatile extern union good_test x59;
+volatile _Thread_local extern union good_test x60;
+_Thread_local const extern volatile union good_test x61;
+_Thread_local const volatile extern union good_test x62;
+const _Thread_local extern volatile union good_test x63;
+const _Thread_local volatile extern union good_test x64;
+const volatile _Thread_local extern union good_test x65;
+_Thread_local volatile extern const union good_test x66;
+_Thread_local volatile const extern union good_test x67;
+volatile _Thread_local extern const union good_test x68;
+volatile _Thread_local const extern union good_test x69;
+volatile const _Thread_local extern union good_test x70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local union good_test x69;
-const static _Thread_local union good_test x70;
-static volatile _Thread_local union good_test x71;
-volatile static _Thread_local union good_test x72;
-static const _Thread_local volatile union good_test x73;
-static const volatile _Thread_local union good_test x74;
-const static _Thread_local volatile union good_test x75;
-const static volatile _Thread_local union good_test x76;
-const volatile static _Thread_local union good_test x77;
-static volatile _Thread_local const union good_test x78;
-static volatile const _Thread_local union good_test x79;
-volatile static _Thread_local const union good_test x80;
-volatile static const _Thread_local union good_test x81;
-volatile const static _Thread_local union good_test x82;
-_Thread_local const static union good_test x83;
-const _Thread_local static union good_test x84;
-_Thread_local volatile static union good_test x85;
-volatile _Thread_local static union good_test x86;
-_Thread_local const static volatile union good_test x87;
-_Thread_local const volatile static union good_test x88;
-const _Thread_local static volatile union good_test x89;
-const _Thread_local volatile static union good_test x90;
-const volatile _Thread_local static union good_test x91;
-_Thread_local volatile static const union good_test x92;
-_Thread_local volatile const static union good_test x93;
-volatile _Thread_local static const union good_test x94;
-volatile _Thread_local const static union good_test x95;
-volatile const _Thread_local static union good_test x96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local union good_test x71;
+const static _Thread_local union good_test x72;
+static volatile _Thread_local union good_test x73;
+volatile static _Thread_local union good_test x74;
+static const _Thread_local volatile union good_test x75;
+static const volatile _Thread_local union good_test x76;
+const static _Thread_local volatile union good_test x77;
+const static volatile _Thread_local union good_test x78;
+const volatile static _Thread_local union good_test x79;
+static volatile _Thread_local const union good_test x80;
+static volatile const _Thread_local union good_test x81;
+volatile static _Thread_local const union good_test x82;
+volatile static const _Thread_local union good_test x83;
+volatile const static _Thread_local union good_test x84;
+_Thread_local const static union good_test x85;
+const _Thread_local static union good_test x86;
+_Thread_local volatile static union good_test x87;
+volatile _Thread_local static union good_test x88;
+_Thread_local const static volatile union good_test x89;
+_Thread_local const volatile static union good_test x90;
+const _Thread_local static volatile union good_test x91;
+const _Thread_local volatile static union good_test x92;
+const volatile _Thread_local static union good_test x93;
+_Thread_local volatile static const union good_test x94;
+_Thread_local volatile const static union good_test x95;
+volatile _Thread_local static const union good_test x96;
+volatile _Thread_local const static union good_test x97;
+volatile const _Thread_local static union good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const union good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test6 { int x_factor6; } x_6;
-static volatile union good_test7 { int x_factor7; } x_7;
-static const volatile union good_test8 { int x_factor8; } x_8;
-static volatile const union good_test9 { int x_factor9; } x_9;
+static const union good_test7 { int x_factor7; } x_7;
+static volatile union good_test8 { int x_factor8; } x_8;
+static const volatile union good_test9 { int x_factor9; } x_9;
+static volatile const union good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test10 { int x_factor10; } x_10;
-volatile extern union good_test11 { int x_factor11; } x_11;
-const extern volatile union good_test12 { int x_factor12; } x_12;
-const volatile extern union good_test13 { int x_factor13; } x_13;
-volatile extern const union good_test14 { int x_factor14; } x_14;
-volatile const extern union good_test15 { int x_factor15; } x_15;
-volatile static union good_test16 { int x_factor16; } x_16;
-const static volatile union good_test17 { int x_factor17; } x_17;
-const volatile static union good_test18 { int x_factor18; } x_18;
-volatile static const union good_test19 { int x_factor19; } x_19;
-volatile const static union good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test11 { int x_factor11; } x_11;
+volatile extern union good_test12 { int x_factor12; } x_12;
+const extern volatile union good_test13 { int x_factor13; } x_13;
+const volatile extern union good_test14 { int x_factor14; } x_14;
+volatile extern const union good_test15 { int x_factor15; } x_15;
+volatile const extern union good_test16 { int x_factor16; } x_16;
+const static union good_test17 { int x_factor17; } x_17;
+volatile static union good_test18 { int x_factor18; } x_18;
+const static volatile union good_test19 { int x_factor19; } x_19;
+const volatile static union good_test20 { int x_factor20; } x_20;
+volatile static const union good_test21 { int x_factor21; } x_21;
+volatile const static union good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on _Thread_local extern
-extern _Thread_local union good_test21 { int x_factor21; } x_21;
-extern _Thread_local const union good_test22 { int x_factor22; } x_22;
-extern _Thread_local volatile union good_test23 { int x_factor23; } x_23;
-extern _Thread_local const volatile union good_test24 { int x_factor24; } x_24;
-extern _Thread_local volatile const union good_test25 { int x_factor25; } x_25;
-_Thread_local extern union good_test26 { int x_factor26; } x_26;
-_Thread_local extern const union good_test27 { int x_factor27; } x_27;
-_Thread_local extern volatile union good_test28 { int x_factor28; } x_28;
-_Thread_local extern const volatile union good_test29 { int x_factor29; } x_29;
-_Thread_local extern volatile const union good_test30 { int x_factor30; } x_30;
+extern _Thread_local union good_test23 { int x_factor23; } x_23;
+extern _Thread_local const union good_test24 { int x_factor24; } x_24;
+extern _Thread_local volatile union good_test25 { int x_factor25; } x_25;
+extern _Thread_local const volatile union good_test26 { int x_factor26; } x_26;
+extern _Thread_local volatile const union good_test27 { int x_factor27; } x_27;
+_Thread_local extern union good_test28 { int x_factor28; } x_28;
+_Thread_local extern const union good_test29 { int x_factor29; } x_29;
+_Thread_local extern volatile union good_test30 { int x_factor30; } x_30;
+_Thread_local extern const volatile union good_test31 { int x_factor31; } x_31;
+_Thread_local extern volatile const union good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on _Thread_local static
-static _Thread_local union good_test31 { int x_factor31; } x_31;
-static _Thread_local const union good_test32 { int x_factor32; } x_32;
-static _Thread_local volatile union good_test33 { int x_factor33; } x_33;
-static _Thread_local const volatile union good_test34 { int x_factor34; } x_34;
-static _Thread_local volatile const union good_test35 { int x_factor35; } x_35;
-_Thread_local static union good_test36 { int x_factor36; } x_36;
-_Thread_local static const union good_test37 { int x_factor37; } x_37;
-_Thread_local static volatile union good_test38 { int x_factor38; } x_38;
-_Thread_local static const volatile union good_test39 { int x_factor39; } x_39;
-_Thread_local static volatile const union good_test40 { int x_factor40; } x_40;
+static _Thread_local union good_test33 { int x_factor33; } x_33;
+static _Thread_local const union good_test34 { int x_factor34; } x_34;
+static _Thread_local volatile union good_test35 { int x_factor35; } x_35;
+static _Thread_local const volatile union good_test36 { int x_factor36; } x_36;
+static _Thread_local volatile const union good_test37 { int x_factor37; } x_37;
+_Thread_local static union good_test38 { int x_factor38; } x_38;
+_Thread_local static const union good_test39 { int x_factor39; } x_39;
+_Thread_local static volatile union good_test40 { int x_factor40; } x_40;
+_Thread_local static const volatile union good_test41 { int x_factor41; } x_41;
+_Thread_local static volatile const union good_test42 { int x_factor42; } x_42;
 
-// _Thread_local extern not in first two postions is deprecated, but legal
-extern const _Thread_local union good_test41 { int x_factor41; } x_41;
-const extern _Thread_local union good_test42 { int x_factor42; } x_42;
-extern volatile _Thread_local union good_test43 { int x_factor43; } x_43;
-volatile extern _Thread_local union good_test44 { int x_factor44; } x_44;
-extern const _Thread_local volatile union good_test45 { int x_factor45; } x_45;
-extern const volatile _Thread_local union good_test46 { int x_factor46; } x_46;
-const extern _Thread_local volatile union good_test47 { int x_factor47; } x_47;
-const extern volatile _Thread_local union good_test48 { int x_factor48; } x_48;
-const volatile extern _Thread_local union good_test49 { int x_factor49; } x_49;
-extern volatile _Thread_local const union good_test50 { int x_factor50; } x_50;
-extern volatile const _Thread_local union good_test51 { int x_factor51; } x_51;
-volatile extern _Thread_local const union good_test52 { int x_factor52; } x_52;
-volatile extern const _Thread_local union good_test53 { int x_factor53; } x_53;
-volatile const extern _Thread_local union good_test54 { int x_factor54; } x_54;
-_Thread_local const extern union good_test55 { int x_factor55; } x_55;
-const _Thread_local extern union good_test56 { int x_factor56; } x_56;
-_Thread_local volatile extern union good_test57 { int x_factor57; } x_57;
-volatile _Thread_local extern union good_test58 { int x_factor58; } x_58;
-_Thread_local const extern volatile union good_test59 { int x_factor59; } x_59;
-_Thread_local const volatile extern union good_test60 { int x_factor60; } x_60;
-const _Thread_local extern volatile union good_test61 { int x_factor61; } x_61;
-const _Thread_local volatile extern union good_test62 { int x_factor62; } x_62;
-const volatile _Thread_local extern union good_test63 { int x_factor63; } x_63;
-_Thread_local volatile extern const union good_test64 { int x_factor64; } x_64;
-_Thread_local volatile const extern union good_test65 { int x_factor65; } x_65;
-volatile _Thread_local extern const union good_test66 { int x_factor66; } x_66;
-volatile _Thread_local const extern union good_test67 { int x_factor67; } x_67;
-volatile const _Thread_local extern union good_test68 { int x_factor68; } x_68;
+// _Thread_local extern not in first two positions is deprecated, but legal
+extern const _Thread_local union good_test43 { int x_factor43; } x_43;
+const extern _Thread_local union good_test44 { int x_factor44; } x_44;
+extern volatile _Thread_local union good_test45 { int x_factor45; } x_45;
+volatile extern _Thread_local union good_test46 { int x_factor46; } x_46;
+extern const _Thread_local volatile union good_test47 { int x_factor47; } x_47;
+extern const volatile _Thread_local union good_test48 { int x_factor48; } x_48;
+const extern _Thread_local volatile union good_test49 { int x_factor49; } x_49;
+const extern volatile _Thread_local union good_test50 { int x_factor50; } x_50;
+const volatile extern _Thread_local union good_test51 { int x_factor51; } x_51;
+extern volatile _Thread_local const union good_test52 { int x_factor52; } x_52;
+extern volatile const _Thread_local union good_test53 { int x_factor53; } x_53;
+volatile extern _Thread_local const union good_test54 { int x_factor54; } x_54;
+volatile extern const _Thread_local union good_test55 { int x_factor55; } x_55;
+volatile const extern _Thread_local union good_test56 { int x_factor56; } x_56;
+_Thread_local const extern union good_test57 { int x_factor57; } x_57;
+const _Thread_local extern union good_test58 { int x_factor58; } x_58;
+_Thread_local volatile extern union good_test59 { int x_factor59; } x_59;
+volatile _Thread_local extern union good_test60 { int x_factor60; } x_60;
+_Thread_local const extern volatile union good_test61 { int x_factor61; } x_61;
+_Thread_local const volatile extern union good_test62 { int x_factor62; } x_62;
+const _Thread_local extern volatile union good_test63 { int x_factor63; } x_63;
+const _Thread_local volatile extern union good_test64 { int x_factor64; } x_64;
+const volatile _Thread_local extern union good_test65 { int x_factor65; } x_65;
+_Thread_local volatile extern const union good_test66 { int x_factor66; } x_66;
+_Thread_local volatile const extern union good_test67 { int x_factor67; } x_67;
+volatile _Thread_local extern const union good_test68 { int x_factor68; } x_68;
+volatile _Thread_local const extern union good_test69 { int x_factor69; } x_69;
+volatile const _Thread_local extern union good_test70 { int x_factor70; } x_70;
 
-// _Thread_local static not in first two postions is deprecated, but legal
-static const _Thread_local union good_test69 { int x_factor69; } x_69;
-const static _Thread_local union good_test70 { int x_factor70; } x_70;
-static volatile _Thread_local union good_test71 { int x_factor71; } x_71;
-volatile static _Thread_local union good_test72 { int x_factor72; } x_72;
-static const _Thread_local volatile union good_test73 { int x_factor73; } x_73;
-static const volatile _Thread_local union good_test74 { int x_factor74; } x_74;
-const static _Thread_local volatile union good_test75 { int x_factor75; } x_75;
-const static volatile _Thread_local union good_test76 { int x_factor76; } x_76;
-const volatile static _Thread_local union good_test77 { int x_factor77; } x_77;
-static volatile _Thread_local const union good_test78 { int x_factor78; } x_78;
-static volatile const _Thread_local union good_test79 { int x_factor79; } x_79;
-volatile static _Thread_local const union good_test80 { int x_factor80; } x_80;
-volatile static const _Thread_local union good_test81 { int x_factor81; } x_81;
-volatile const static _Thread_local union good_test82 { int x_factor82; } x_82;
-_Thread_local const static union good_test83 { int x_factor83; } x_83;
-const _Thread_local static union good_test84 { int x_factor84; } x_84;
-_Thread_local volatile static union good_test85 { int x_factor85; } x_85;
-volatile _Thread_local static union good_test86 { int x_factor86; } x_86;
-_Thread_local const static volatile union good_test87 { int x_factor87; } x_87;
-_Thread_local const volatile static union good_test88 { int x_factor88; } x_88;
-const _Thread_local static volatile union good_test89 { int x_factor89; } x_89;
-const _Thread_local volatile static union good_test90 { int x_factor90; } x_90;
-const volatile _Thread_local static union good_test91 { int x_factor91; } x_91;
-_Thread_local volatile static const union good_test92 { int x_factor92; } x_92;
-_Thread_local volatile const static union good_test93 { int x_factor93; } x_93;
-volatile _Thread_local static const union good_test94 { int x_factor94; } x_94;
-volatile _Thread_local const static union good_test95 { int x_factor95; } x_95;
-volatile const _Thread_local static union good_test96 { int x_factor96; } x_96;
+// _Thread_local static not in first two positions is deprecated, but legal
+static const _Thread_local union good_test71 { int x_factor71; } x_71;
+const static _Thread_local union good_test72 { int x_factor72; } x_72;
+static volatile _Thread_local union good_test73 { int x_factor73; } x_73;
+volatile static _Thread_local union good_test74 { int x_factor74; } x_74;
+static const _Thread_local volatile union good_test75 { int x_factor75; } x_75;
+static const volatile _Thread_local union good_test76 { int x_factor76; } x_76;
+const static _Thread_local volatile union good_test77 { int x_factor77; } x_77;
+const static volatile _Thread_local union good_test78 { int x_factor78; } x_78;
+const volatile static _Thread_local union good_test79 { int x_factor79; } x_79;
+static volatile _Thread_local const union good_test80 { int x_factor80; } x_80;
+static volatile const _Thread_local union good_test81 { int x_factor81; } x_81;
+volatile static _Thread_local const union good_test82 { int x_factor82; } x_82;
+volatile static const _Thread_local union good_test83 { int x_factor83; } x_83;
+volatile const static _Thread_local union good_test84 { int x_factor84; } x_84;
+_Thread_local const static union good_test85 { int x_factor85; } x_85;
+const _Thread_local static union good_test86 { int x_factor86; } x_86;
+_Thread_local volatile static union good_test87 { int x_factor87; } x_87;
+volatile _Thread_local static union good_test88 { int x_factor88; } x_88;
+_Thread_local const static volatile union good_test89 { int x_factor89; } x_89;
+_Thread_local const volatile static union good_test90 { int x_factor90; } x_90;
+const _Thread_local static volatile union good_test91 { int x_factor91; } x_91;
+const _Thread_local volatile static union good_test92 { int x_factor92; } x_92;
+const volatile _Thread_local static union good_test93 { int x_factor93; } x_93;
+_Thread_local volatile static const union good_test94 { int x_factor94; } x_94;
+_Thread_local volatile const static union good_test95 { int x_factor95; } x_95;
+volatile _Thread_local static const union good_test96 { int x_factor96; } x_96;
+volatile _Thread_local const static union good_test97 { int x_factor97; } x_97;
+volatile const _Thread_local static union good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+_Static_assert(0==__zcc_linkage(good_test),"good_test has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+_Static_assert(0==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+_Static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+_Static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+_Static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+_Static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_union_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def.hpp	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_union_def.hpp	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_union_def.hpp
+// Pass_union_def.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
@@ -14,108 +14,109 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local union good_test x21;
-extern thread_local const union good_test x22;
-extern thread_local volatile union good_test x23;
-extern thread_local const volatile union good_test x24;
-extern thread_local volatile const union good_test x25;
-thread_local extern union good_test x26;
-thread_local extern const union good_test x27;
-thread_local extern volatile union good_test x28;
-thread_local extern const volatile union good_test x29;
-thread_local extern volatile const union good_test x30;
+extern thread_local union good_test x23;
+extern thread_local const union good_test x24;
+extern thread_local volatile union good_test x25;
+extern thread_local const volatile union good_test x26;
+extern thread_local volatile const union good_test x27;
+thread_local extern union good_test x28;
+thread_local extern const union good_test x29;
+thread_local extern volatile union good_test x30;
+thread_local extern const volatile union good_test x31;
+thread_local extern volatile const union good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local union good_test x31;
-static thread_local const union good_test x32;
-static thread_local volatile union good_test x33;
-static thread_local const volatile union good_test x34;
-static thread_local volatile const union good_test x35;
-thread_local static union good_test x36;
-thread_local static const union good_test x37;
-thread_local static volatile union good_test x38;
-thread_local static const volatile union good_test x39;
-thread_local static volatile const union good_test x40;
+static thread_local union good_test x33;
+static thread_local const union good_test x34;
+static thread_local volatile union good_test x35;
+static thread_local const volatile union good_test x36;
+static thread_local volatile const union good_test x37;
+thread_local static union good_test x38;
+thread_local static const union good_test x39;
+thread_local static volatile union good_test x40;
+thread_local static const volatile union good_test x41;
+thread_local static volatile const union good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local union good_test x41;
-const extern thread_local union good_test x42;
-extern volatile thread_local union good_test x43;
-volatile extern thread_local union good_test x44;
-extern const thread_local volatile union good_test x45;
-extern const volatile thread_local union good_test x46;
-const extern thread_local volatile union good_test x47;
-const extern volatile thread_local union good_test x48;
-const volatile extern thread_local union good_test x49;
-extern volatile thread_local const union good_test x50;
-extern volatile const thread_local union good_test x51;
-volatile extern thread_local const union good_test x52;
-volatile extern const thread_local union good_test x53;
-volatile const extern thread_local union good_test x54;
-thread_local const extern union good_test x55;
-const thread_local extern union good_test x56;
-thread_local volatile extern union good_test x57;
-volatile thread_local extern union good_test x58;
-thread_local const extern volatile union good_test x59;
-thread_local const volatile extern union good_test x60;
-const thread_local extern volatile union good_test x61;
-const thread_local volatile extern union good_test x62;
-const volatile thread_local extern union good_test x63;
-thread_local volatile extern const union good_test x64;
-thread_local volatile const extern union good_test x65;
-volatile thread_local extern const union good_test x66;
-volatile thread_local const extern union good_test x67;
-volatile const thread_local extern union good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local union good_test x43;
+const extern thread_local union good_test x44;
+extern volatile thread_local union good_test x45;
+volatile extern thread_local union good_test x46;
+extern const thread_local volatile union good_test x47;
+extern const volatile thread_local union good_test x48;
+const extern thread_local volatile union good_test x49;
+const extern volatile thread_local union good_test x50;
+const volatile extern thread_local union good_test x51;
+extern volatile thread_local const union good_test x52;
+extern volatile const thread_local union good_test x53;
+volatile extern thread_local const union good_test x54;
+volatile extern const thread_local union good_test x55;
+volatile const extern thread_local union good_test x56;
+thread_local const extern union good_test x57;
+const thread_local extern union good_test x58;
+thread_local volatile extern union good_test x59;
+volatile thread_local extern union good_test x60;
+thread_local const extern volatile union good_test x61;
+thread_local const volatile extern union good_test x62;
+const thread_local extern volatile union good_test x63;
+const thread_local volatile extern union good_test x64;
+const volatile thread_local extern union good_test x65;
+thread_local volatile extern const union good_test x66;
+thread_local volatile const extern union good_test x67;
+volatile thread_local extern const union good_test x68;
+volatile thread_local const extern union good_test x69;
+volatile const thread_local extern union good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local union good_test x69;
-const static thread_local union good_test x70;
-static volatile thread_local union good_test x71;
-volatile static thread_local union good_test x72;
-static const thread_local volatile union good_test x73;
-static const volatile thread_local union good_test x74;
-const static thread_local volatile union good_test x75;
-const static volatile thread_local union good_test x76;
-const volatile static thread_local union good_test x77;
-static volatile thread_local const union good_test x78;
-static volatile const thread_local union good_test x79;
-volatile static thread_local const union good_test x80;
-volatile static const thread_local union good_test x81;
-volatile const static thread_local union good_test x82;
-thread_local const static union good_test x83;
-const thread_local static union good_test x84;
-thread_local volatile static union good_test x85;
-volatile thread_local static union good_test x86;
-thread_local const static volatile union good_test x87;
-thread_local const volatile static union good_test x88;
-const thread_local static volatile union good_test x89;
-const thread_local volatile static union good_test x90;
-const volatile thread_local static union good_test x91;
-thread_local volatile static const union good_test x92;
-thread_local volatile const static union good_test x93;
-volatile thread_local static const union good_test x94;
-volatile thread_local const static union good_test x95;
-volatile const thread_local static union good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local union good_test x71;
+const static thread_local union good_test x72;
+static volatile thread_local union good_test x73;
+volatile static thread_local union good_test x74;
+static const thread_local volatile union good_test x75;
+static const volatile thread_local union good_test x76;
+const static thread_local volatile union good_test x77;
+const static volatile thread_local union good_test x78;
+const volatile static thread_local union good_test x79;
+static volatile thread_local const union good_test x80;
+static volatile const thread_local union good_test x81;
+volatile static thread_local const union good_test x82;
+volatile static const thread_local union good_test x83;
+volatile const static thread_local union good_test x84;
+thread_local const static union good_test x85;
+const thread_local static union good_test x86;
+thread_local volatile static union good_test x87;
+volatile thread_local static union good_test x88;
+thread_local const static volatile union good_test x89;
+thread_local const volatile static union good_test x90;
+const thread_local static volatile union good_test x91;
+const thread_local volatile static union good_test x92;
+const volatile thread_local static union good_test x93;
+thread_local volatile static const union good_test x94;
+thread_local volatile const static union good_test x95;
+volatile thread_local static const union good_test x96;
+volatile thread_local const static union good_test x97;
+volatile const thread_local static union good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const union good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test6 { int x_factor6; } x_6;
-static volatile union good_test7 { int x_factor7; } x_7;
-static const volatile union good_test8 { int x_factor8; } x_8;
-static volatile const union good_test9 { int x_factor9; } x_9;
+static const union good_test7 { int x_factor7; } x_7;
+static volatile union good_test8 { int x_factor8; } x_8;
+static const volatile union good_test9 { int x_factor9; } x_9;
+static volatile const union good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test10 { int x_factor10; } x_10;
-volatile extern union good_test11 { int x_factor11; } x_11;
-const extern volatile union good_test12 { int x_factor12; } x_12;
-const volatile extern union good_test13 { int x_factor13; } x_13;
-volatile extern const union good_test14 { int x_factor14; } x_14;
-volatile const extern union good_test15 { int x_factor15; } x_15;
-volatile static union good_test16 { int x_factor16; } x_16;
-const static volatile union good_test17 { int x_factor17; } x_17;
-const volatile static union good_test18 { int x_factor18; } x_18;
-volatile static const union good_test19 { int x_factor19; } x_19;
-volatile const static union good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test11 { int x_factor11; } x_11;
+volatile extern union good_test12 { int x_factor12; } x_12;
+const extern volatile union good_test13 { int x_factor13; } x_13;
+const volatile extern union good_test14 { int x_factor14; } x_14;
+volatile extern const union good_test15 { int x_factor15; } x_15;
+volatile const extern union good_test16 { int x_factor16; } x_16;
+const static union good_test17 { int x_factor17; } x_17;
+volatile static union good_test18 { int x_factor18; } x_18;
+const static volatile union good_test19 { int x_factor19; } x_19;
+const volatile static union good_test20 { int x_factor20; } x_20;
+volatile static const union good_test21 { int x_factor21; } x_21;
+volatile const static union good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local union good_test21 { int x_factor21; } x_21;
-extern thread_local const union good_test22 { int x_factor22; } x_22;
-extern thread_local volatile union good_test23 { int x_factor23; } x_23;
-extern thread_local const volatile union good_test24 { int x_factor24; } x_24;
-extern thread_local volatile const union good_test25 { int x_factor25; } x_25;
-thread_local extern union good_test26 { int x_factor26; } x_26;
-thread_local extern const union good_test27 { int x_factor27; } x_27;
-thread_local extern volatile union good_test28 { int x_factor28; } x_28;
-thread_local extern const volatile union good_test29 { int x_factor29; } x_29;
-thread_local extern volatile const union good_test30 { int x_factor30; } x_30;
+extern thread_local union good_test23 { int x_factor23; } x_23;
+extern thread_local const union good_test24 { int x_factor24; } x_24;
+extern thread_local volatile union good_test25 { int x_factor25; } x_25;
+extern thread_local const volatile union good_test26 { int x_factor26; } x_26;
+extern thread_local volatile const union good_test27 { int x_factor27; } x_27;
+thread_local extern union good_test28 { int x_factor28; } x_28;
+thread_local extern const union good_test29 { int x_factor29; } x_29;
+thread_local extern volatile union good_test30 { int x_factor30; } x_30;
+thread_local extern const volatile union good_test31 { int x_factor31; } x_31;
+thread_local extern volatile const union good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on thread_local static
-static thread_local union good_test31 { int x_factor31; } x_31;
-static thread_local const union good_test32 { int x_factor32; } x_32;
-static thread_local volatile union good_test33 { int x_factor33; } x_33;
-static thread_local const volatile union good_test34 { int x_factor34; } x_34;
-static thread_local volatile const union good_test35 { int x_factor35; } x_35;
-thread_local static union good_test36 { int x_factor36; } x_36;
-thread_local static const union good_test37 { int x_factor37; } x_37;
-thread_local static volatile union good_test38 { int x_factor38; } x_38;
-thread_local static const volatile union good_test39 { int x_factor39; } x_39;
-thread_local static volatile const union good_test40 { int x_factor40; } x_40;
+static thread_local union good_test33 { int x_factor33; } x_33;
+static thread_local const union good_test34 { int x_factor34; } x_34;
+static thread_local volatile union good_test35 { int x_factor35; } x_35;
+static thread_local const volatile union good_test36 { int x_factor36; } x_36;
+static thread_local volatile const union good_test37 { int x_factor37; } x_37;
+thread_local static union good_test38 { int x_factor38; } x_38;
+thread_local static const union good_test39 { int x_factor39; } x_39;
+thread_local static volatile union good_test40 { int x_factor40; } x_40;
+thread_local static const volatile union good_test41 { int x_factor41; } x_41;
+thread_local static volatile const union good_test42 { int x_factor42; } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local union good_test41 { int x_factor41; } x_41;
-const extern thread_local union good_test42 { int x_factor42; } x_42;
-extern volatile thread_local union good_test43 { int x_factor43; } x_43;
-volatile extern thread_local union good_test44 { int x_factor44; } x_44;
-extern const thread_local volatile union good_test45 { int x_factor45; } x_45;
-extern const volatile thread_local union good_test46 { int x_factor46; } x_46;
-const extern thread_local volatile union good_test47 { int x_factor47; } x_47;
-const extern volatile thread_local union good_test48 { int x_factor48; } x_48;
-const volatile extern thread_local union good_test49 { int x_factor49; } x_49;
-extern volatile thread_local const union good_test50 { int x_factor50; } x_50;
-extern volatile const thread_local union good_test51 { int x_factor51; } x_51;
-volatile extern thread_local const union good_test52 { int x_factor52; } x_52;
-volatile extern const thread_local union good_test53 { int x_factor53; } x_53;
-volatile const extern thread_local union good_test54 { int x_factor54; } x_54;
-thread_local const extern union good_test55 { int x_factor55; } x_55;
-const thread_local extern union good_test56 { int x_factor56; } x_56;
-thread_local volatile extern union good_test57 { int x_factor57; } x_57;
-volatile thread_local extern union good_test58 { int x_factor58; } x_58;
-thread_local const extern volatile union good_test59 { int x_factor59; } x_59;
-thread_local const volatile extern union good_test60 { int x_factor60; } x_60;
-const thread_local extern volatile union good_test61 { int x_factor61; } x_61;
-const thread_local volatile extern union good_test62 { int x_factor62; } x_62;
-const volatile thread_local extern union good_test63 { int x_factor63; } x_63;
-thread_local volatile extern const union good_test64 { int x_factor64; } x_64;
-thread_local volatile const extern union good_test65 { int x_factor65; } x_65;
-volatile thread_local extern const union good_test66 { int x_factor66; } x_66;
-volatile thread_local const extern union good_test67 { int x_factor67; } x_67;
-volatile const thread_local extern union good_test68 { int x_factor68; } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local union good_test43 { int x_factor43; } x_43;
+const extern thread_local union good_test44 { int x_factor44; } x_44;
+extern volatile thread_local union good_test45 { int x_factor45; } x_45;
+volatile extern thread_local union good_test46 { int x_factor46; } x_46;
+extern const thread_local volatile union good_test47 { int x_factor47; } x_47;
+extern const volatile thread_local union good_test48 { int x_factor48; } x_48;
+const extern thread_local volatile union good_test49 { int x_factor49; } x_49;
+const extern volatile thread_local union good_test50 { int x_factor50; } x_50;
+const volatile extern thread_local union good_test51 { int x_factor51; } x_51;
+extern volatile thread_local const union good_test52 { int x_factor52; } x_52;
+extern volatile const thread_local union good_test53 { int x_factor53; } x_53;
+volatile extern thread_local const union good_test54 { int x_factor54; } x_54;
+volatile extern const thread_local union good_test55 { int x_factor55; } x_55;
+volatile const extern thread_local union good_test56 { int x_factor56; } x_56;
+thread_local const extern union good_test57 { int x_factor57; } x_57;
+const thread_local extern union good_test58 { int x_factor58; } x_58;
+thread_local volatile extern union good_test59 { int x_factor59; } x_59;
+volatile thread_local extern union good_test60 { int x_factor60; } x_60;
+thread_local const extern volatile union good_test61 { int x_factor61; } x_61;
+thread_local const volatile extern union good_test62 { int x_factor62; } x_62;
+const thread_local extern volatile union good_test63 { int x_factor63; } x_63;
+const thread_local volatile extern union good_test64 { int x_factor64; } x_64;
+const volatile thread_local extern union good_test65 { int x_factor65; } x_65;
+thread_local volatile extern const union good_test66 { int x_factor66; } x_66;
+thread_local volatile const extern union good_test67 { int x_factor67; } x_67;
+volatile thread_local extern const union good_test68 { int x_factor68; } x_68;
+volatile thread_local const extern union good_test69 { int x_factor69; } x_69;
+volatile const thread_local extern union good_test70 { int x_factor70; } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local union good_test69 { int x_factor69; } x_69;
-const static thread_local union good_test70 { int x_factor70; } x_70;
-static volatile thread_local union good_test71 { int x_factor71; } x_71;
-volatile static thread_local union good_test72 { int x_factor72; } x_72;
-static const thread_local volatile union good_test73 { int x_factor73; } x_73;
-static const volatile thread_local union good_test74 { int x_factor74; } x_74;
-const static thread_local volatile union good_test75 { int x_factor75; } x_75;
-const static volatile thread_local union good_test76 { int x_factor76; } x_76;
-const volatile static thread_local union good_test77 { int x_factor77; } x_77;
-static volatile thread_local const union good_test78 { int x_factor78; } x_78;
-static volatile const thread_local union good_test79 { int x_factor79; } x_79;
-volatile static thread_local const union good_test80 { int x_factor80; } x_80;
-volatile static const thread_local union good_test81 { int x_factor81; } x_81;
-volatile const static thread_local union good_test82 { int x_factor82; } x_82;
-thread_local const static union good_test83 { int x_factor83; } x_83;
-const thread_local static union good_test84 { int x_factor84; } x_84;
-thread_local volatile static union good_test85 { int x_factor85; } x_85;
-volatile thread_local static union good_test86 { int x_factor86; } x_86;
-thread_local const static volatile union good_test87 { int x_factor87; } x_87;
-thread_local const volatile static union good_test88 { int x_factor88; } x_88;
-const thread_local static volatile union good_test89 { int x_factor89; } x_89;
-const thread_local volatile static union good_test90 { int x_factor90; } x_90;
-const volatile thread_local static union good_test91 { int x_factor91; } x_91;
-thread_local volatile static const union good_test92 { int x_factor92; } x_92;
-thread_local volatile const static union good_test93 { int x_factor93; } x_93;
-volatile thread_local static const union good_test94 { int x_factor94; } x_94;
-volatile thread_local const static union good_test95 { int x_factor95; } x_95;
-volatile const thread_local static union good_test96 { int x_factor96; } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local union good_test71 { int x_factor71; } x_71;
+const static thread_local union good_test72 { int x_factor72; } x_72;
+static volatile thread_local union good_test73 { int x_factor73; } x_73;
+volatile static thread_local union good_test74 { int x_factor74; } x_74;
+static const thread_local volatile union good_test75 { int x_factor75; } x_75;
+static const volatile thread_local union good_test76 { int x_factor76; } x_76;
+const static thread_local volatile union good_test77 { int x_factor77; } x_77;
+const static volatile thread_local union good_test78 { int x_factor78; } x_78;
+const volatile static thread_local union good_test79 { int x_factor79; } x_79;
+static volatile thread_local const union good_test80 { int x_factor80; } x_80;
+static volatile const thread_local union good_test81 { int x_factor81; } x_81;
+volatile static thread_local const union good_test82 { int x_factor82; } x_82;
+volatile static const thread_local union good_test83 { int x_factor83; } x_83;
+volatile const static thread_local union good_test84 { int x_factor84; } x_84;
+thread_local const static union good_test85 { int x_factor85; } x_85;
+const thread_local static union good_test86 { int x_factor86; } x_86;
+thread_local volatile static union good_test87 { int x_factor87; } x_87;
+volatile thread_local static union good_test88 { int x_factor88; } x_88;
+thread_local const static volatile union good_test89 { int x_factor89; } x_89;
+thread_local const volatile static union good_test90 { int x_factor90; } x_90;
+const thread_local static volatile union good_test91 { int x_factor91; } x_91;
+const thread_local volatile static union good_test92 { int x_factor92; } x_92;
+const volatile thread_local static union good_test93 { int x_factor93; } x_93;
+thread_local volatile static const union good_test94 { int x_factor94; } x_94;
+thread_local volatile const static union good_test95 { int x_factor95; } x_95;
+volatile thread_local static const union good_test96 { int x_factor96; } x_96;
+volatile thread_local const static union good_test97 { int x_factor97; } x_97;
+volatile const thread_local static union good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_union_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def2.hpp	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc/decl.C99/Pass_union_def2.hpp	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,4 +1,5 @@
 // decl.C99/Pass_union_def2.hpp
+// (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
 union good_test {
@@ -14,108 +15,109 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 // check that things work properly in namespaces
 namespace test {
@@ -132,108 +134,109 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local union good_test x21;
-extern thread_local const union good_test x22;
-extern thread_local volatile union good_test x23;
-extern thread_local const volatile union good_test x24;
-extern thread_local volatile const union good_test x25;
-thread_local extern union good_test x26;
-thread_local extern const union good_test x27;
-thread_local extern volatile union good_test x28;
-thread_local extern const volatile union good_test x29;
-thread_local extern volatile const union good_test x30;
+extern thread_local union good_test x23;
+extern thread_local const union good_test x24;
+extern thread_local volatile union good_test x25;
+extern thread_local const volatile union good_test x26;
+extern thread_local volatile const union good_test x27;
+thread_local extern union good_test x28;
+thread_local extern const union good_test x29;
+thread_local extern volatile union good_test x30;
+thread_local extern const volatile union good_test x31;
+thread_local extern volatile const union good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local union good_test x31;
-static thread_local const union good_test x32;
-static thread_local volatile union good_test x33;
-static thread_local const volatile union good_test x34;
-static thread_local volatile const union good_test x35;
-thread_local static union good_test x36;
-thread_local static const union good_test x37;
-thread_local static volatile union good_test x38;
-thread_local static const volatile union good_test x39;
-thread_local static volatile const union good_test x40;
+static thread_local union good_test x33;
+static thread_local const union good_test x34;
+static thread_local volatile union good_test x35;
+static thread_local const volatile union good_test x36;
+static thread_local volatile const union good_test x37;
+thread_local static union good_test x38;
+thread_local static const union good_test x39;
+thread_local static volatile union good_test x40;
+thread_local static const volatile union good_test x41;
+thread_local static volatile const union good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local union good_test x41;
-const extern thread_local union good_test x42;
-extern volatile thread_local union good_test x43;
-volatile extern thread_local union good_test x44;
-extern const thread_local volatile union good_test x45;
-extern const volatile thread_local union good_test x46;
-const extern thread_local volatile union good_test x47;
-const extern volatile thread_local union good_test x48;
-const volatile extern thread_local union good_test x49;
-extern volatile thread_local const union good_test x50;
-extern volatile const thread_local union good_test x51;
-volatile extern thread_local const union good_test x52;
-volatile extern const thread_local union good_test x53;
-volatile const extern thread_local union good_test x54;
-thread_local const extern union good_test x55;
-const thread_local extern union good_test x56;
-thread_local volatile extern union good_test x57;
-volatile thread_local extern union good_test x58;
-thread_local const extern volatile union good_test x59;
-thread_local const volatile extern union good_test x60;
-const thread_local extern volatile union good_test x61;
-const thread_local volatile extern union good_test x62;
-const volatile thread_local extern union good_test x63;
-thread_local volatile extern const union good_test x64;
-thread_local volatile const extern union good_test x65;
-volatile thread_local extern const union good_test x66;
-volatile thread_local const extern union good_test x67;
-volatile const thread_local extern union good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local union good_test x43;
+const extern thread_local union good_test x44;
+extern volatile thread_local union good_test x45;
+volatile extern thread_local union good_test x46;
+extern const thread_local volatile union good_test x47;
+extern const volatile thread_local union good_test x48;
+const extern thread_local volatile union good_test x49;
+const extern volatile thread_local union good_test x50;
+const volatile extern thread_local union good_test x51;
+extern volatile thread_local const union good_test x52;
+extern volatile const thread_local union good_test x53;
+volatile extern thread_local const union good_test x54;
+volatile extern const thread_local union good_test x55;
+volatile const extern thread_local union good_test x56;
+thread_local const extern union good_test x57;
+const thread_local extern union good_test x58;
+thread_local volatile extern union good_test x59;
+volatile thread_local extern union good_test x60;
+thread_local const extern volatile union good_test x61;
+thread_local const volatile extern union good_test x62;
+const thread_local extern volatile union good_test x63;
+const thread_local volatile extern union good_test x64;
+const volatile thread_local extern union good_test x65;
+thread_local volatile extern const union good_test x66;
+thread_local volatile const extern union good_test x67;
+volatile thread_local extern const union good_test x68;
+volatile thread_local const extern union good_test x69;
+volatile const thread_local extern union good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local union good_test x69;
-const static thread_local union good_test x70;
-static volatile thread_local union good_test x71;
-volatile static thread_local union good_test x72;
-static const thread_local volatile union good_test x73;
-static const volatile thread_local union good_test x74;
-const static thread_local volatile union good_test x75;
-const static volatile thread_local union good_test x76;
-const volatile static thread_local union good_test x77;
-static volatile thread_local const union good_test x78;
-static volatile const thread_local union good_test x79;
-volatile static thread_local const union good_test x80;
-volatile static const thread_local union good_test x81;
-volatile const static thread_local union good_test x82;
-thread_local const static union good_test x83;
-const thread_local static union good_test x84;
-thread_local volatile static union good_test x85;
-volatile thread_local static union good_test x86;
-thread_local const static volatile union good_test x87;
-thread_local const volatile static union good_test x88;
-const thread_local static volatile union good_test x89;
-const thread_local volatile static union good_test x90;
-const volatile thread_local static union good_test x91;
-thread_local volatile static const union good_test x92;
-thread_local volatile const static union good_test x93;
-volatile thread_local static const union good_test x94;
-volatile thread_local const static union good_test x95;
-volatile const thread_local static union good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local union good_test x71;
+const static thread_local union good_test x72;
+static volatile thread_local union good_test x73;
+volatile static thread_local union good_test x74;
+static const thread_local volatile union good_test x75;
+static const volatile thread_local union good_test x76;
+const static thread_local volatile union good_test x77;
+const static volatile thread_local union good_test x78;
+const volatile static thread_local union good_test x79;
+static volatile thread_local const union good_test x80;
+static volatile const thread_local union good_test x81;
+volatile static thread_local const union good_test x82;
+volatile static const thread_local union good_test x83;
+volatile const static thread_local union good_test x84;
+thread_local const static union good_test x85;
+const thread_local static union good_test x86;
+thread_local volatile static union good_test x87;
+volatile thread_local static union good_test x88;
+thread_local const static volatile union good_test x89;
+thread_local const volatile static union good_test x90;
+const thread_local static volatile union good_test x91;
+const thread_local volatile static union good_test x92;
+const volatile thread_local static union good_test x93;
+thread_local volatile static const union good_test x94;
+thread_local volatile const static union good_test x95;
+volatile thread_local static const union good_test x96;
+volatile thread_local const static union good_test x97;
+volatile const thread_local static union good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -244,108 +247,109 @@
 extern volatile const union good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test6 { int x_factor6; } x_6;
-static volatile union good_test7 { int x_factor7; } x_7;
-static const volatile union good_test8 { int x_factor8; } x_8;
-static volatile const union good_test9 { int x_factor9; } x_9;
+static const union good_test7 { int x_factor7; } x_7;
+static volatile union good_test8 { int x_factor8; } x_8;
+static const volatile union good_test9 { int x_factor9; } x_9;
+static volatile const union good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test10 { int x_factor10; } x_10;
-volatile extern union good_test11 { int x_factor11; } x_11;
-const extern volatile union good_test12 { int x_factor12; } x_12;
-const volatile extern union good_test13 { int x_factor13; } x_13;
-volatile extern const union good_test14 { int x_factor14; } x_14;
-volatile const extern union good_test15 { int x_factor15; } x_15;
-volatile static union good_test16 { int x_factor16; } x_16;
-const static volatile union good_test17 { int x_factor17; } x_17;
-const volatile static union good_test18 { int x_factor18; } x_18;
-volatile static const union good_test19 { int x_factor19; } x_19;
-volatile const static union good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test11 { int x_factor11; } x_11;
+volatile extern union good_test12 { int x_factor12; } x_12;
+const extern volatile union good_test13 { int x_factor13; } x_13;
+const volatile extern union good_test14 { int x_factor14; } x_14;
+volatile extern const union good_test15 { int x_factor15; } x_15;
+volatile const extern union good_test16 { int x_factor16; } x_16;
+const static union good_test17 { int x_factor17; } x_17;
+volatile static union good_test18 { int x_factor18; } x_18;
+const static volatile union good_test19 { int x_factor19; } x_19;
+const volatile static union good_test20 { int x_factor20; } x_20;
+volatile static const union good_test21 { int x_factor21; } x_21;
+volatile const static union good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local union good_test21 { int x_factor21; } x_21;
-extern thread_local const union good_test22 { int x_factor22; } x_22;
-extern thread_local volatile union good_test23 { int x_factor23; } x_23;
-extern thread_local const volatile union good_test24 { int x_factor24; } x_24;
-extern thread_local volatile const union good_test25 { int x_factor25; } x_25;
-thread_local extern union good_test26 { int x_factor26; } x_26;
-thread_local extern const union good_test27 { int x_factor27; } x_27;
-thread_local extern volatile union good_test28 { int x_factor28; } x_28;
-thread_local extern const volatile union good_test29 { int x_factor29; } x_29;
-thread_local extern volatile const union good_test30 { int x_factor30; } x_30;
+extern thread_local union good_test23 { int x_factor23; } x_23;
+extern thread_local const union good_test24 { int x_factor24; } x_24;
+extern thread_local volatile union good_test25 { int x_factor25; } x_25;
+extern thread_local const volatile union good_test26 { int x_factor26; } x_26;
+extern thread_local volatile const union good_test27 { int x_factor27; } x_27;
+thread_local extern union good_test28 { int x_factor28; } x_28;
+thread_local extern const union good_test29 { int x_factor29; } x_29;
+thread_local extern volatile union good_test30 { int x_factor30; } x_30;
+thread_local extern const volatile union good_test31 { int x_factor31; } x_31;
+thread_local extern volatile const union good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on thread_local static
-static thread_local union good_test31 { int x_factor31; } x_31;
-static thread_local const union good_test32 { int x_factor32; } x_32;
-static thread_local volatile union good_test33 { int x_factor33; } x_33;
-static thread_local const volatile union good_test34 { int x_factor34; } x_34;
-static thread_local volatile const union good_test35 { int x_factor35; } x_35;
-thread_local static union good_test36 { int x_factor36; } x_36;
-thread_local static const union good_test37 { int x_factor37; } x_37;
-thread_local static volatile union good_test38 { int x_factor38; } x_38;
-thread_local static const volatile union good_test39 { int x_factor39; } x_39;
-thread_local static volatile const union good_test40 { int x_factor40; } x_40;
+static thread_local union good_test33 { int x_factor33; } x_33;
+static thread_local const union good_test34 { int x_factor34; } x_34;
+static thread_local volatile union good_test35 { int x_factor35; } x_35;
+static thread_local const volatile union good_test36 { int x_factor36; } x_36;
+static thread_local volatile const union good_test37 { int x_factor37; } x_37;
+thread_local static union good_test38 { int x_factor38; } x_38;
+thread_local static const union good_test39 { int x_factor39; } x_39;
+thread_local static volatile union good_test40 { int x_factor40; } x_40;
+thread_local static const volatile union good_test41 { int x_factor41; } x_41;
+thread_local static volatile const union good_test42 { int x_factor42; } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local union good_test41 { int x_factor41; } x_41;
-const extern thread_local union good_test42 { int x_factor42; } x_42;
-extern volatile thread_local union good_test43 { int x_factor43; } x_43;
-volatile extern thread_local union good_test44 { int x_factor44; } x_44;
-extern const thread_local volatile union good_test45 { int x_factor45; } x_45;
-extern const volatile thread_local union good_test46 { int x_factor46; } x_46;
-const extern thread_local volatile union good_test47 { int x_factor47; } x_47;
-const extern volatile thread_local union good_test48 { int x_factor48; } x_48;
-const volatile extern thread_local union good_test49 { int x_factor49; } x_49;
-extern volatile thread_local const union good_test50 { int x_factor50; } x_50;
-extern volatile const thread_local union good_test51 { int x_factor51; } x_51;
-volatile extern thread_local const union good_test52 { int x_factor52; } x_52;
-volatile extern const thread_local union good_test53 { int x_factor53; } x_53;
-volatile const extern thread_local union good_test54 { int x_factor54; } x_54;
-thread_local const extern union good_test55 { int x_factor55; } x_55;
-const thread_local extern union good_test56 { int x_factor56; } x_56;
-thread_local volatile extern union good_test57 { int x_factor57; } x_57;
-volatile thread_local extern union good_test58 { int x_factor58; } x_58;
-thread_local const extern volatile union good_test59 { int x_factor59; } x_59;
-thread_local const volatile extern union good_test60 { int x_factor60; } x_60;
-const thread_local extern volatile union good_test61 { int x_factor61; } x_61;
-const thread_local volatile extern union good_test62 { int x_factor62; } x_62;
-const volatile thread_local extern union good_test63 { int x_factor63; } x_63;
-thread_local volatile extern const union good_test64 { int x_factor64; } x_64;
-thread_local volatile const extern union good_test65 { int x_factor65; } x_65;
-volatile thread_local extern const union good_test66 { int x_factor66; } x_66;
-volatile thread_local const extern union good_test67 { int x_factor67; } x_67;
-volatile const thread_local extern union good_test68 { int x_factor68; } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local union good_test43 { int x_factor43; } x_43;
+const extern thread_local union good_test44 { int x_factor44; } x_44;
+extern volatile thread_local union good_test45 { int x_factor45; } x_45;
+volatile extern thread_local union good_test46 { int x_factor46; } x_46;
+extern const thread_local volatile union good_test47 { int x_factor47; } x_47;
+extern const volatile thread_local union good_test48 { int x_factor48; } x_48;
+const extern thread_local volatile union good_test49 { int x_factor49; } x_49;
+const extern volatile thread_local union good_test50 { int x_factor50; } x_50;
+const volatile extern thread_local union good_test51 { int x_factor51; } x_51;
+extern volatile thread_local const union good_test52 { int x_factor52; } x_52;
+extern volatile const thread_local union good_test53 { int x_factor53; } x_53;
+volatile extern thread_local const union good_test54 { int x_factor54; } x_54;
+volatile extern const thread_local union good_test55 { int x_factor55; } x_55;
+volatile const extern thread_local union good_test56 { int x_factor56; } x_56;
+thread_local const extern union good_test57 { int x_factor57; } x_57;
+const thread_local extern union good_test58 { int x_factor58; } x_58;
+thread_local volatile extern union good_test59 { int x_factor59; } x_59;
+volatile thread_local extern union good_test60 { int x_factor60; } x_60;
+thread_local const extern volatile union good_test61 { int x_factor61; } x_61;
+thread_local const volatile extern union good_test62 { int x_factor62; } x_62;
+const thread_local extern volatile union good_test63 { int x_factor63; } x_63;
+const thread_local volatile extern union good_test64 { int x_factor64; } x_64;
+const volatile thread_local extern union good_test65 { int x_factor65; } x_65;
+thread_local volatile extern const union good_test66 { int x_factor66; } x_66;
+thread_local volatile const extern union good_test67 { int x_factor67; } x_67;
+volatile thread_local extern const union good_test68 { int x_factor68; } x_68;
+volatile thread_local const extern union good_test69 { int x_factor69; } x_69;
+volatile const thread_local extern union good_test70 { int x_factor70; } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local union good_test69 { int x_factor69; } x_69;
-const static thread_local union good_test70 { int x_factor70; } x_70;
-static volatile thread_local union good_test71 { int x_factor71; } x_71;
-volatile static thread_local union good_test72 { int x_factor72; } x_72;
-static const thread_local volatile union good_test73 { int x_factor73; } x_73;
-static const volatile thread_local union good_test74 { int x_factor74; } x_74;
-const static thread_local volatile union good_test75 { int x_factor75; } x_75;
-const static volatile thread_local union good_test76 { int x_factor76; } x_76;
-const volatile static thread_local union good_test77 { int x_factor77; } x_77;
-static volatile thread_local const union good_test78 { int x_factor78; } x_78;
-static volatile const thread_local union good_test79 { int x_factor79; } x_79;
-volatile static thread_local const union good_test80 { int x_factor80; } x_80;
-volatile static const thread_local union good_test81 { int x_factor81; } x_81;
-volatile const static thread_local union good_test82 { int x_factor82; } x_82;
-thread_local const static union good_test83 { int x_factor83; } x_83;
-const thread_local static union good_test84 { int x_factor84; } x_84;
-thread_local volatile static union good_test85 { int x_factor85; } x_85;
-volatile thread_local static union good_test86 { int x_factor86; } x_86;
-thread_local const static volatile union good_test87 { int x_factor87; } x_87;
-thread_local const volatile static union good_test88 { int x_factor88; } x_88;
-const thread_local static volatile union good_test89 { int x_factor89; } x_89;
-const thread_local volatile static union good_test90 { int x_factor90; } x_90;
-const volatile thread_local static union good_test91 { int x_factor91; } x_91;
-thread_local volatile static const union good_test92 { int x_factor92; } x_92;
-thread_local volatile const static union good_test93 { int x_factor93; } x_93;
-volatile thread_local static const union good_test94 { int x_factor94; } x_94;
-volatile thread_local const static union good_test95 { int x_factor95; } x_95;
-volatile const thread_local static union good_test96 { int x_factor96; } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local union good_test71 { int x_factor71; } x_71;
+const static thread_local union good_test72 { int x_factor72; } x_72;
+static volatile thread_local union good_test73 { int x_factor73; } x_73;
+volatile static thread_local union good_test74 { int x_factor74; } x_74;
+static const thread_local volatile union good_test75 { int x_factor75; } x_75;
+static const volatile thread_local union good_test76 { int x_factor76; } x_76;
+const static thread_local volatile union good_test77 { int x_factor77; } x_77;
+const static volatile thread_local union good_test78 { int x_factor78; } x_78;
+const volatile static thread_local union good_test79 { int x_factor79; } x_79;
+static volatile thread_local const union good_test80 { int x_factor80; } x_80;
+static volatile const thread_local union good_test81 { int x_factor81; } x_81;
+volatile static thread_local const union good_test82 { int x_factor82; } x_82;
+volatile static const thread_local union good_test83 { int x_factor83; } x_83;
+volatile const static thread_local union good_test84 { int x_factor84; } x_84;
+thread_local const static union good_test85 { int x_factor85; } x_85;
+const thread_local static union good_test86 { int x_factor86; } x_86;
+thread_local volatile static union good_test87 { int x_factor87; } x_87;
+volatile thread_local static union good_test88 { int x_factor88; } x_88;
+thread_local const static volatile union good_test89 { int x_factor89; } x_89;
+thread_local const volatile static union good_test90 { int x_factor90; } x_90;
+const thread_local static volatile union good_test91 { int x_factor91; } x_91;
+const thread_local volatile static union good_test92 { int x_factor92; } x_92;
+const volatile thread_local static union good_test93 { int x_factor93; } x_93;
+thread_local volatile static const union good_test94 { int x_factor94; } x_94;
+thread_local volatile const static union good_test95 { int x_factor95; } x_95;
+volatile thread_local static const union good_test96 { int x_factor96; } x_96;
+volatile thread_local const static union good_test97 { int x_factor97; } x_97;
+volatile const thread_local static union good_test98 { int x_factor98; } x_98;
 
 }	// end namespace test
 
@@ -364,107 +368,108 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 }	// end namespace test2

Modified: trunk/tests/zcc.in/decl.C99/Pass_enum_def.in
===================================================================
--- trunk/tests/zcc.in/decl.C99/Pass_enum_def.in	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc.in/decl.C99/Pass_enum_def.in	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,5 +1,8 @@
 SUFFIXES h hpp
 OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local
+OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
+OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2
+OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined enum
 
@@ -15,108 +18,109 @@
 extern volatile const enum good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test x6;
-static volatile enum good_test x7;
-static const volatile enum good_test x8;
-static volatile const enum good_test x9;
+static const enum good_test x7;
+static volatile enum good_test x8;
+static const volatile enum good_test x9;
+static volatile const enum good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test x10;
-volatile extern enum good_test x11;
-const extern volatile enum good_test x12;
-const volatile extern enum good_test x13;
-volatile extern const enum good_test x14;
-volatile const extern enum good_test x15;
-volatile static enum good_test x16;
-const static volatile enum good_test x17;
-const volatile static enum good_test x18;
-volatile static const enum good_test x19;
-volatile const static enum good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test x11;
+volatile extern enum good_test x12;
+const extern volatile enum good_test x13;
+const volatile extern enum good_test x14;
+volatile extern const enum good_test x15;
+volatile const extern enum good_test x16;
+const static enum good_test x17;
+volatile static enum good_test x18;
+const static volatile enum good_test x19;
+const volatile static enum good_test x20;
+volatile static const enum good_test x21;
+volatile const static enum good_test x22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL enum good_test x21;
-extern THREAD_LOCAL const enum good_test x22;
-extern THREAD_LOCAL volatile enum good_test x23;
-extern THREAD_LOCAL const volatile enum good_test x24;
-extern THREAD_LOCAL volatile const enum good_test x25;
-THREAD_LOCAL extern enum good_test x26;
-THREAD_LOCAL extern const enum good_test x27;
-THREAD_LOCAL extern volatile enum good_test x28;
-THREAD_LOCAL extern const volatile enum good_test x29;
-THREAD_LOCAL extern volatile const enum good_test x30;
+extern THREAD_LOCAL enum good_test x23;
+extern THREAD_LOCAL const enum good_test x24;
+extern THREAD_LOCAL volatile enum good_test x25;
+extern THREAD_LOCAL const volatile enum good_test x26;
+extern THREAD_LOCAL volatile const enum good_test x27;
+THREAD_LOCAL extern enum good_test x28;
+THREAD_LOCAL extern const enum good_test x29;
+THREAD_LOCAL extern volatile enum good_test x30;
+THREAD_LOCAL extern const volatile enum good_test x31;
+THREAD_LOCAL extern volatile const enum good_test x32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL enum good_test x31;
-static THREAD_LOCAL const enum good_test x32;
-static THREAD_LOCAL volatile enum good_test x33;
-static THREAD_LOCAL const volatile enum good_test x34;
-static THREAD_LOCAL volatile const enum good_test x35;
-THREAD_LOCAL static enum good_test x36;
-THREAD_LOCAL static const enum good_test x37;
-THREAD_LOCAL static volatile enum good_test x38;
-THREAD_LOCAL static const volatile enum good_test x39;
-THREAD_LOCAL static volatile const enum good_test x40;
+static THREAD_LOCAL enum good_test x33;
+static THREAD_LOCAL const enum good_test x34;
+static THREAD_LOCAL volatile enum good_test x35;
+static THREAD_LOCAL const volatile enum good_test x36;
+static THREAD_LOCAL volatile const enum good_test x37;
+THREAD_LOCAL static enum good_test x38;
+THREAD_LOCAL static const enum good_test x39;
+THREAD_LOCAL static volatile enum good_test x40;
+THREAD_LOCAL static const volatile enum good_test x41;
+THREAD_LOCAL static volatile const enum good_test x42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL enum good_test x41;
-const extern THREAD_LOCAL enum good_test x42;
-extern volatile THREAD_LOCAL enum good_test x43;
-volatile extern THREAD_LOCAL enum good_test x44;
-extern const THREAD_LOCAL volatile enum good_test x45;
-extern const volatile THREAD_LOCAL enum good_test x46;
-const extern THREAD_LOCAL volatile enum good_test x47;
-const extern volatile THREAD_LOCAL enum good_test x48;
-const volatile extern THREAD_LOCAL enum good_test x49;
-extern volatile THREAD_LOCAL const enum good_test x50;
-extern volatile const THREAD_LOCAL enum good_test x51;
-volatile extern THREAD_LOCAL const enum good_test x52;
-volatile extern const THREAD_LOCAL enum good_test x53;
-volatile const extern THREAD_LOCAL enum good_test x54;
-THREAD_LOCAL const extern enum good_test x55;
-const THREAD_LOCAL extern enum good_test x56;
-THREAD_LOCAL volatile extern enum good_test x57;
-volatile THREAD_LOCAL extern enum good_test x58;
-THREAD_LOCAL const extern volatile enum good_test x59;
-THREAD_LOCAL const volatile extern enum good_test x60;
-const THREAD_LOCAL extern volatile enum good_test x61;
-const THREAD_LOCAL volatile extern enum good_test x62;
-const volatile THREAD_LOCAL extern enum good_test x63;
-THREAD_LOCAL volatile extern const enum good_test x64;
-THREAD_LOCAL volatile const extern enum good_test x65;
-volatile THREAD_LOCAL extern const enum good_test x66;
-volatile THREAD_LOCAL const extern enum good_test x67;
-volatile const THREAD_LOCAL extern enum good_test x68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL enum good_test x43;
+const extern THREAD_LOCAL enum good_test x44;
+extern volatile THREAD_LOCAL enum good_test x45;
+volatile extern THREAD_LOCAL enum good_test x46;
+extern const THREAD_LOCAL volatile enum good_test x47;
+extern const volatile THREAD_LOCAL enum good_test x48;
+const extern THREAD_LOCAL volatile enum good_test x49;
+const extern volatile THREAD_LOCAL enum good_test x50;
+const volatile extern THREAD_LOCAL enum good_test x51;
+extern volatile THREAD_LOCAL const enum good_test x52;
+extern volatile const THREAD_LOCAL enum good_test x53;
+volatile extern THREAD_LOCAL const enum good_test x54;
+volatile extern const THREAD_LOCAL enum good_test x55;
+volatile const extern THREAD_LOCAL enum good_test x56;
+THREAD_LOCAL const extern enum good_test x57;
+const THREAD_LOCAL extern enum good_test x58;
+THREAD_LOCAL volatile extern enum good_test x59;
+volatile THREAD_LOCAL extern enum good_test x60;
+THREAD_LOCAL const extern volatile enum good_test x61;
+THREAD_LOCAL const volatile extern enum good_test x62;
+const THREAD_LOCAL extern volatile enum good_test x63;
+const THREAD_LOCAL volatile extern enum good_test x64;
+const volatile THREAD_LOCAL extern enum good_test x65;
+THREAD_LOCAL volatile extern const enum good_test x66;
+THREAD_LOCAL volatile const extern enum good_test x67;
+volatile THREAD_LOCAL extern const enum good_test x68;
+volatile THREAD_LOCAL const extern enum good_test x69;
+volatile const THREAD_LOCAL extern enum good_test x70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL enum good_test x69;
-const static THREAD_LOCAL enum good_test x70;
-static volatile THREAD_LOCAL enum good_test x71;
-volatile static THREAD_LOCAL enum good_test x72;
-static const THREAD_LOCAL volatile enum good_test x73;
-static const volatile THREAD_LOCAL enum good_test x74;
-const static THREAD_LOCAL volatile enum good_test x75;
-const static volatile THREAD_LOCAL enum good_test x76;
-const volatile static THREAD_LOCAL enum good_test x77;
-static volatile THREAD_LOCAL const enum good_test x78;
-static volatile const THREAD_LOCAL enum good_test x79;
-volatile static THREAD_LOCAL const enum good_test x80;
-volatile static const THREAD_LOCAL enum good_test x81;
-volatile const static THREAD_LOCAL enum good_test x82;
-THREAD_LOCAL const static enum good_test x83;
-const THREAD_LOCAL static enum good_test x84;
-THREAD_LOCAL volatile static enum good_test x85;
-volatile THREAD_LOCAL static enum good_test x86;
-THREAD_LOCAL const static volatile enum good_test x87;
-THREAD_LOCAL const volatile static enum good_test x88;
-const THREAD_LOCAL static volatile enum good_test x89;
-const THREAD_LOCAL volatile static enum good_test x90;
-const volatile THREAD_LOCAL static enum good_test x91;
-THREAD_LOCAL volatile static const enum good_test x92;
-THREAD_LOCAL volatile const static enum good_test x93;
-volatile THREAD_LOCAL static const enum good_test x94;
-volatile THREAD_LOCAL const static enum good_test x95;
-volatile const THREAD_LOCAL static enum good_test x96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL enum good_test x71;
+const static THREAD_LOCAL enum good_test x72;
+static volatile THREAD_LOCAL enum good_test x73;
+volatile static THREAD_LOCAL enum good_test x74;
+static const THREAD_LOCAL volatile enum good_test x75;
+static const volatile THREAD_LOCAL enum good_test x76;
+const static THREAD_LOCAL volatile enum good_test x77;
+const static volatile THREAD_LOCAL enum good_test x78;
+const volatile static THREAD_LOCAL enum good_test x79;
+static volatile THREAD_LOCAL const enum good_test x80;
+static volatile const THREAD_LOCAL enum good_test x81;
+volatile static THREAD_LOCAL const enum good_test x82;
+volatile static const THREAD_LOCAL enum good_test x83;
+volatile const static THREAD_LOCAL enum good_test x84;
+THREAD_LOCAL const static enum good_test x85;
+const THREAD_LOCAL static enum good_test x86;
+THREAD_LOCAL volatile static enum good_test x87;
+volatile THREAD_LOCAL static enum good_test x88;
+THREAD_LOCAL const static volatile enum good_test x89;
+THREAD_LOCAL const volatile static enum good_test x90;
+const THREAD_LOCAL static volatile enum good_test x91;
+const THREAD_LOCAL volatile static enum good_test x92;
+const volatile THREAD_LOCAL static enum good_test x93;
+THREAD_LOCAL volatile static const enum good_test x94;
+THREAD_LOCAL volatile const static enum good_test x95;
+volatile THREAD_LOCAL static const enum good_test x96;
+volatile THREAD_LOCAL const static enum good_test x97;
+volatile const THREAD_LOCAL static enum good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -127,106 +131,401 @@
 extern volatile const enum good_test5 { x_factor5 = 1 } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static enum good_test6 { x_factor6 = 1 } x_6;
-static volatile enum good_test7 { x_factor7 = 1 } x_7;
-static const volatile enum good_test8 { x_factor8 = 1 } x_8;
-static volatile const enum good_test9 { x_factor9 = 1 } x_9;
+static const enum good_test7 { x_factor7 = 1 } x_7;
+static volatile enum good_test8 { x_factor8 = 1 } x_8;
+static const volatile enum good_test9 { x_factor9 = 1 } x_9;
+static volatile const enum good_test10 { x_factor10 = 1 } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern enum good_test10 { x_factor10 = 1 } x_10;
-volatile extern enum good_test11 { x_factor11 = 1 } x_11;
-const extern volatile enum good_test12 { x_factor12 = 1 } x_12;
-const volatile extern enum good_test13 { x_factor13 = 1 } x_13;
-volatile extern const enum good_test14 { x_factor14 = 1 } x_14;
-volatile const extern enum good_test15 { x_factor15 = 1 } x_15;
-volatile static enum good_test16 { x_factor16 = 1 } x_16;
-const static volatile enum good_test17 { x_factor17 = 1 } x_17;
-const volatile static enum good_test18 { x_factor18 = 1 } x_18;
-volatile static const enum good_test19 { x_factor19 = 1 } x_19;
-volatile const static enum good_test20 { x_factor20 = 1 } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern enum good_test11 { x_factor11 = 1 } x_11;
+volatile extern enum good_test12 { x_factor12 = 1 } x_12;
+const extern volatile enum good_test13 { x_factor13 = 1 } x_13;
+const volatile extern enum good_test14 { x_factor14 = 1 } x_14;
+volatile extern const enum good_test15 { x_factor15 = 1 } x_15;
+volatile const extern enum good_test16 { x_factor16 = 1 } x_16;
+const static enum good_test17 { x_factor17 = 1 } x_17;
+volatile static enum good_test18 { x_factor18 = 1 } x_18;
+const static volatile enum good_test19 { x_factor19 = 1 } x_19;
+const volatile static enum good_test20 { x_factor20 = 1 } x_20;
+volatile static const enum good_test21 { x_factor21 = 1 } x_21;
+volatile const static enum good_test22 { x_factor22 = 1 } x_22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL enum good_test21 { x_factor21 = 1 } x_21;
-extern THREAD_LOCAL const enum good_test22 { x_factor22 = 1 } x_22;
-extern THREAD_LOCAL volatile enum good_test23 { x_factor23 = 1 } x_23;
-extern THREAD_LOCAL const volatile enum good_test24 { x_factor24 = 1 } x_24;
-extern THREAD_LOCAL volatile const enum good_test25 { x_factor25 = 1 } x_25;
-THREAD_LOCAL extern enum good_test26 { x_factor26 = 1 } x_26;
-THREAD_LOCAL extern const enum good_test27 { x_factor27 = 1 } x_27;
-THREAD_LOCAL extern volatile enum good_test28 { x_factor28 = 1 } x_28;
-THREAD_LOCAL extern const volatile enum good_test29 { x_factor29 = 1 } x_29;
-THREAD_LOCAL extern volatile const enum good_test30 { x_factor30 = 1 } x_30;
+extern THREAD_LOCAL enum good_test23 { x_factor23 = 1 } x_23;
+extern THREAD_LOCAL const enum good_test24 { x_factor24 = 1 } x_24;
+extern THREAD_LOCAL volatile enum good_test25 { x_factor25 = 1 } x_25;
+extern THREAD_LOCAL const volatile enum good_test26 { x_factor26 = 1 } x_26;
+extern THREAD_LOCAL volatile const enum good_test27 { x_factor27 = 1 } x_27;
+THREAD_LOCAL extern enum good_test28 { x_factor28 = 1 } x_28;
+THREAD_LOCAL extern const enum good_test29 { x_factor29 = 1 } x_29;
+THREAD_LOCAL extern volatile enum good_test30 { x_factor30 = 1 } x_30;
+THREAD_LOCAL extern const volatile enum good_test31 { x_factor31 = 1 } x_31;
+THREAD_LOCAL extern volatile const enum good_test32 { x_factor32 = 1 } x_32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL enum good_test31 { x_factor31 = 1 } x_31;
-static THREAD_LOCAL const enum good_test32 { x_factor32 = 1 } x_32;
-static THREAD_LOCAL volatile enum good_test33 { x_factor33 = 1 } x_33;
-static THREAD_LOCAL const volatile enum good_test34 { x_factor34 = 1 } x_34;
-static THREAD_LOCAL volatile const enum good_test35 { x_factor35 = 1 } x_35;
-THREAD_LOCAL static enum good_test36 { x_factor36 = 1 } x_36;
-THREAD_LOCAL static const enum good_test37 { x_factor37 = 1 } x_37;
-THREAD_LOCAL static volatile enum good_test38 { x_factor38 = 1 } x_38;
-THREAD_LOCAL static const volatile enum good_test39 { x_factor39 = 1 } x_39;
-THREAD_LOCAL static volatile const enum good_test40 { x_factor40 = 1 } x_40;
+static THREAD_LOCAL enum good_test33 { x_factor33 = 1 } x_33;
+static THREAD_LOCAL const enum good_test34 { x_factor34 = 1 } x_34;
+static THREAD_LOCAL volatile enum good_test35 { x_factor35 = 1 } x_35;
+static THREAD_LOCAL const volatile enum good_test36 { x_factor36 = 1 } x_36;
+static THREAD_LOCAL volatile const enum good_test37 { x_factor37 = 1 } x_37;
+THREAD_LOCAL static enum good_test38 { x_factor38 = 1 } x_38;
+THREAD_LOCAL static const enum good_test39 { x_factor39 = 1 } x_39;
+THREAD_LOCAL static volatile enum good_test40 { x_factor40 = 1 } x_40;
+THREAD_LOCAL static const volatile enum good_test41 { x_factor41 = 1 } x_41;
+THREAD_LOCAL static volatile const enum good_test42 { x_factor42 = 1 } x_42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL enum good_test41 { x_factor41 = 1 } x_41;
-const extern THREAD_LOCAL enum good_test42 { x_factor42 = 1 } x_42;
-extern volatile THREAD_LOCAL enum good_test43 { x_factor43 = 1 } x_43;
-volatile extern THREAD_LOCAL enum good_test44 { x_factor44 = 1 } x_44;
-extern const THREAD_LOCAL volatile enum good_test45 { x_factor45 = 1 } x_45;
-extern const volatile THREAD_LOCAL enum good_test46 { x_factor46 = 1 } x_46;
-const extern THREAD_LOCAL volatile enum good_test47 { x_factor47 = 1 } x_47;
-const extern volatile THREAD_LOCAL enum good_test48 { x_factor48 = 1 } x_48;
-const volatile extern THREAD_LOCAL enum good_test49 { x_factor49 = 1 } x_49;
-extern volatile THREAD_LOCAL const enum good_test50 { x_factor50 = 1 } x_50;
-extern volatile const THREAD_LOCAL enum good_test51 { x_factor51 = 1 } x_51;
-volatile extern THREAD_LOCAL const enum good_test52 { x_factor52 = 1 } x_52;
-volatile extern const THREAD_LOCAL enum good_test53 { x_factor53 = 1 } x_53;
-volatile const extern THREAD_LOCAL enum good_test54 { x_factor54 = 1 } x_54;
-THREAD_LOCAL const extern enum good_test55 { x_factor55 = 1 } x_55;
-const THREAD_LOCAL extern enum good_test56 { x_factor56 = 1 } x_56;
-THREAD_LOCAL volatile extern enum good_test57 { x_factor57 = 1 } x_57;
-volatile THREAD_LOCAL extern enum good_test58 { x_factor58 = 1 } x_58;
-THREAD_LOCAL const extern volatile enum good_test59 { x_factor59 = 1 } x_59;
-THREAD_LOCAL const volatile extern enum good_test60 { x_factor60 = 1 } x_60;
-const THREAD_LOCAL extern volatile enum good_test61 { x_factor61 = 1 } x_61;
-const THREAD_LOCAL volatile extern enum good_test62 { x_factor62 = 1 } x_62;
-const volatile THREAD_LOCAL extern enum good_test63 { x_factor63 = 1 } x_63;
-THREAD_LOCAL volatile extern const enum good_test64 { x_factor64 = 1 } x_64;
-THREAD_LOCAL volatile const extern enum good_test65 { x_factor65 = 1 } x_65;
-volatile THREAD_LOCAL extern const enum good_test66 { x_factor66 = 1 } x_66;
-volatile THREAD_LOCAL const extern enum good_test67 { x_factor67 = 1 } x_67;
-volatile const THREAD_LOCAL extern enum good_test68 { x_factor68 = 1 } x_68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL enum good_test43 { x_factor43 = 1 } x_43;
+const extern THREAD_LOCAL enum good_test44 { x_factor44 = 1 } x_44;
+extern volatile THREAD_LOCAL enum good_test45 { x_factor45 = 1 } x_45;
+volatile extern THREAD_LOCAL enum good_test46 { x_factor46 = 1 } x_46;
+extern const THREAD_LOCAL volatile enum good_test47 { x_factor47 = 1 } x_47;
+extern const volatile THREAD_LOCAL enum good_test48 { x_factor48 = 1 } x_48;
+const extern THREAD_LOCAL volatile enum good_test49 { x_factor49 = 1 } x_49;
+const extern volatile THREAD_LOCAL enum good_test50 { x_factor50 = 1 } x_50;
+const volatile extern THREAD_LOCAL enum good_test51 { x_factor51 = 1 } x_51;
+extern volatile THREAD_LOCAL const enum good_test52 { x_factor52 = 1 } x_52;
+extern volatile const THREAD_LOCAL enum good_test53 { x_factor53 = 1 } x_53;
+volatile extern THREAD_LOCAL const enum good_test54 { x_factor54 = 1 } x_54;
+volatile extern const THREAD_LOCAL enum good_test55 { x_factor55 = 1 } x_55;
+volatile const extern THREAD_LOCAL enum good_test56 { x_factor56 = 1 } x_56;
+THREAD_LOCAL const extern enum good_test57 { x_factor57 = 1 } x_57;
+const THREAD_LOCAL extern enum good_test58 { x_factor58 = 1 } x_58;
+THREAD_LOCAL volatile extern enum good_test59 { x_factor59 = 1 } x_59;
+volatile THREAD_LOCAL extern enum good_test60 { x_factor60 = 1 } x_60;
+THREAD_LOCAL const extern volatile enum good_test61 { x_factor61 = 1 } x_61;
+THREAD_LOCAL const volatile extern enum good_test62 { x_factor62 = 1 } x_62;
+const THREAD_LOCAL extern volatile enum good_test63 { x_factor63 = 1 } x_63;
+const THREAD_LOCAL volatile extern enum good_test64 { x_factor64 = 1 } x_64;
+const volatile THREAD_LOCAL extern enum good_test65 { x_factor65 = 1 } x_65;
+THREAD_LOCAL volatile extern const enum good_test66 { x_factor66 = 1 } x_66;
+THREAD_LOCAL volatile const extern enum good_test67 { x_factor67 = 1 } x_67;
+volatile THREAD_LOCAL extern const enum good_test68 { x_factor68 = 1 } x_68;
+volatile THREAD_LOCAL const extern enum good_test69 { x_factor69 = 1 } x_69;
+volatile const THREAD_LOCAL extern enum good_test70 { x_factor70 = 1 } x_70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL enum good_test69 { x_factor69 = 1 } x_69;
-const static THREAD_LOCAL enum good_test70 { x_factor70 = 1 } x_70;
-static volatile THREAD_LOCAL enum good_test71 { x_factor71 = 1 } x_71;
-volatile static THREAD_LOCAL enum good_test72 { x_factor72 = 1 } x_72;
-static const THREAD_LOCAL volatile enum good_test73 { x_factor73 = 1 } x_73;
-static const volatile THREAD_LOCAL enum good_test74 { x_factor74 = 1 } x_74;
-const static THREAD_LOCAL volatile enum good_test75 { x_factor75 = 1 } x_75;
-const static volatile THREAD_LOCAL enum good_test76 { x_factor76 = 1 } x_76;
-const volatile static THREAD_LOCAL enum good_test77 { x_factor77 = 1 } x_77;
-static volatile THREAD_LOCAL const enum good_test78 { x_factor78 = 1 } x_78;
-static volatile const THREAD_LOCAL enum good_test79 { x_factor79 = 1 } x_79;
-volatile static THREAD_LOCAL const enum good_test80 { x_factor80 = 1 } x_80;
-volatile static const THREAD_LOCAL enum good_test81 { x_factor81 = 1 } x_81;
-volatile const static THREAD_LOCAL enum good_test82 { x_factor82 = 1 } x_82;
-THREAD_LOCAL const static enum good_test83 { x_factor83 = 1 } x_83;
-const THREAD_LOCAL static enum good_test84 { x_factor84 = 1 } x_84;
-THREAD_LOCAL volatile static enum good_test85 { x_factor85 = 1 } x_85;
-volatile THREAD_LOCAL static enum good_test86 { x_factor86 = 1 } x_86;
-THREAD_LOCAL const static volatile enum good_test87 { x_factor87 = 1 } x_87;
-THREAD_LOCAL const volatile static enum good_test88 { x_factor88 = 1 } x_88;
-const THREAD_LOCAL static volatile enum good_test89 { x_factor89 = 1 } x_89;
-const THREAD_LOCAL volatile static enum good_test90 { x_factor90 = 1 } x_90;
-const volatile THREAD_LOCAL static enum good_test91 { x_factor91 = 1 } x_91;
-THREAD_LOCAL volatile static const enum good_test92 { x_factor92 = 1 } x_92;
-THREAD_LOCAL volatile const static enum good_test93 { x_factor93 = 1 } x_93;
-volatile THREAD_LOCAL static const enum good_test94 { x_factor94 = 1 } x_94;
-volatile THREAD_LOCAL const static enum good_test95 { x_factor95 = 1 } x_95;
-volatile const THREAD_LOCAL static enum good_test96 { x_factor96 = 1 } x_96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL enum good_test71 { x_factor71 = 1 } x_71;
+const static THREAD_LOCAL enum good_test72 { x_factor72 = 1 } x_72;
+static volatile THREAD_LOCAL enum good_test73 { x_factor73 = 1 } x_73;
+volatile static THREAD_LOCAL enum good_test74 { x_factor74 = 1 } x_74;
+static const THREAD_LOCAL volatile enum good_test75 { x_factor75 = 1 } x_75;
+static const volatile THREAD_LOCAL enum good_test76 { x_factor76 = 1 } x_76;
+const static THREAD_LOCAL volatile enum good_test77 { x_factor77 = 1 } x_77;
+const static volatile THREAD_LOCAL enum good_test78 { x_factor78 = 1 } x_78;
+const volatile static THREAD_LOCAL enum good_test79 { x_factor79 = 1 } x_79;
+static volatile THREAD_LOCAL const enum good_test80 { x_factor80 = 1 } x_80;
+static volatile const THREAD_LOCAL enum good_test81 { x_factor81 = 1 } x_81;
+volatile static THREAD_LOCAL const enum good_test82 { x_factor82 = 1 } x_82;
+volatile static const THREAD_LOCAL enum good_test83 { x_factor83 = 1 } x_83;
+volatile const static THREAD_LOCAL enum good_test84 { x_factor84 = 1 } x_84;
+THREAD_LOCAL const static enum good_test85 { x_factor85 = 1 } x_85;
+const THREAD_LOCAL static enum good_test86 { x_factor86 = 1 } x_86;
+THREAD_LOCAL volatile static enum good_test87 { x_factor87 = 1 } x_87;
+volatile THREAD_LOCAL static enum good_test88 { x_factor88 = 1 } x_88;
+THREAD_LOCAL const static volatile enum good_test89 { x_factor89 = 1 } x_89;
+THREAD_LOCAL const volatile static enum good_test90 { x_factor90 = 1 } x_90;
+const THREAD_LOCAL static volatile enum good_test91 { x_factor91 = 1 } x_91;
+const THREAD_LOCAL volatile static enum good_test92 { x_factor92 = 1 } x_92;
+const volatile THREAD_LOCAL static enum good_test93 { x_factor93 = 1 } x_93;
+THREAD_LOCAL volatile static const enum good_test94 { x_factor94 = 1 } x_94;
+THREAD_LOCAL volatile const static enum good_test95 { x_factor95 = 1 } x_95;
+volatile THREAD_LOCAL static const enum good_test96 { x_factor96 = 1 } x_96;
+volatile THREAD_LOCAL const static enum good_test97 { x_factor97 = 1 } x_97;
+volatile const THREAD_LOCAL static enum good_test98 { x_factor98 = 1 } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+STATIC_ASSERT(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+STATIC_ASSERT(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc.in/decl.C99/Pass_struct_def.in
===================================================================
--- trunk/tests/zcc.in/decl.C99/Pass_struct_def.in	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc.in/decl.C99/Pass_struct_def.in	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,5 +1,8 @@
 SUFFIXES h hpp
 OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local
+OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
+OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2
+OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined struct
 
@@ -15,108 +18,109 @@
 extern volatile const struct good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test x6;
-static volatile struct good_test x7;
-static const volatile struct good_test x8;
-static volatile const struct good_test x9;
+static const struct good_test x7;
+static volatile struct good_test x8;
+static const volatile struct good_test x9;
+static volatile const struct good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test x10;
-volatile extern struct good_test x11;
-const extern volatile struct good_test x12;
-const volatile extern struct good_test x13;
-volatile extern const struct good_test x14;
-volatile const extern struct good_test x15;
-volatile static struct good_test x16;
-const static volatile struct good_test x17;
-const volatile static struct good_test x18;
-volatile static const struct good_test x19;
-volatile const static struct good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test x11;
+volatile extern struct good_test x12;
+const extern volatile struct good_test x13;
+const volatile extern struct good_test x14;
+volatile extern const struct good_test x15;
+volatile const extern struct good_test x16;
+const static struct good_test x17;
+volatile static struct good_test x18;
+const static volatile struct good_test x19;
+const volatile static struct good_test x20;
+volatile static const struct good_test x21;
+volatile const static struct good_test x22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL struct good_test x21;
-extern THREAD_LOCAL const struct good_test x22;
-extern THREAD_LOCAL volatile struct good_test x23;
-extern THREAD_LOCAL const volatile struct good_test x24;
-extern THREAD_LOCAL volatile const struct good_test x25;
-THREAD_LOCAL extern struct good_test x26;
-THREAD_LOCAL extern const struct good_test x27;
-THREAD_LOCAL extern volatile struct good_test x28;
-THREAD_LOCAL extern const volatile struct good_test x29;
-THREAD_LOCAL extern volatile const struct good_test x30;
+extern THREAD_LOCAL struct good_test x23;
+extern THREAD_LOCAL const struct good_test x24;
+extern THREAD_LOCAL volatile struct good_test x25;
+extern THREAD_LOCAL const volatile struct good_test x26;
+extern THREAD_LOCAL volatile const struct good_test x27;
+THREAD_LOCAL extern struct good_test x28;
+THREAD_LOCAL extern const struct good_test x29;
+THREAD_LOCAL extern volatile struct good_test x30;
+THREAD_LOCAL extern const volatile struct good_test x31;
+THREAD_LOCAL extern volatile const struct good_test x32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL struct good_test x31;
-static THREAD_LOCAL const struct good_test x32;
-static THREAD_LOCAL volatile struct good_test x33;
-static THREAD_LOCAL const volatile struct good_test x34;
-static THREAD_LOCAL volatile const struct good_test x35;
-THREAD_LOCAL static struct good_test x36;
-THREAD_LOCAL static const struct good_test x37;
-THREAD_LOCAL static volatile struct good_test x38;
-THREAD_LOCAL static const volatile struct good_test x39;
-THREAD_LOCAL static volatile const struct good_test x40;
+static THREAD_LOCAL struct good_test x33;
+static THREAD_LOCAL const struct good_test x34;
+static THREAD_LOCAL volatile struct good_test x35;
+static THREAD_LOCAL const volatile struct good_test x36;
+static THREAD_LOCAL volatile const struct good_test x37;
+THREAD_LOCAL static struct good_test x38;
+THREAD_LOCAL static const struct good_test x39;
+THREAD_LOCAL static volatile struct good_test x40;
+THREAD_LOCAL static const volatile struct good_test x41;
+THREAD_LOCAL static volatile const struct good_test x42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL struct good_test x41;
-const extern THREAD_LOCAL struct good_test x42;
-extern volatile THREAD_LOCAL struct good_test x43;
-volatile extern THREAD_LOCAL struct good_test x44;
-extern const THREAD_LOCAL volatile struct good_test x45;
-extern const volatile THREAD_LOCAL struct good_test x46;
-const extern THREAD_LOCAL volatile struct good_test x47;
-const extern volatile THREAD_LOCAL struct good_test x48;
-const volatile extern THREAD_LOCAL struct good_test x49;
-extern volatile THREAD_LOCAL const struct good_test x50;
-extern volatile const THREAD_LOCAL struct good_test x51;
-volatile extern THREAD_LOCAL const struct good_test x52;
-volatile extern const THREAD_LOCAL struct good_test x53;
-volatile const extern THREAD_LOCAL struct good_test x54;
-THREAD_LOCAL const extern struct good_test x55;
-const THREAD_LOCAL extern struct good_test x56;
-THREAD_LOCAL volatile extern struct good_test x57;
-volatile THREAD_LOCAL extern struct good_test x58;
-THREAD_LOCAL const extern volatile struct good_test x59;
-THREAD_LOCAL const volatile extern struct good_test x60;
-const THREAD_LOCAL extern volatile struct good_test x61;
-const THREAD_LOCAL volatile extern struct good_test x62;
-const volatile THREAD_LOCAL extern struct good_test x63;
-THREAD_LOCAL volatile extern const struct good_test x64;
-THREAD_LOCAL volatile const extern struct good_test x65;
-volatile THREAD_LOCAL extern const struct good_test x66;
-volatile THREAD_LOCAL const extern struct good_test x67;
-volatile const THREAD_LOCAL extern struct good_test x68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL struct good_test x43;
+const extern THREAD_LOCAL struct good_test x44;
+extern volatile THREAD_LOCAL struct good_test x45;
+volatile extern THREAD_LOCAL struct good_test x46;
+extern const THREAD_LOCAL volatile struct good_test x47;
+extern const volatile THREAD_LOCAL struct good_test x48;
+const extern THREAD_LOCAL volatile struct good_test x49;
+const extern volatile THREAD_LOCAL struct good_test x50;
+const volatile extern THREAD_LOCAL struct good_test x51;
+extern volatile THREAD_LOCAL const struct good_test x52;
+extern volatile const THREAD_LOCAL struct good_test x53;
+volatile extern THREAD_LOCAL const struct good_test x54;
+volatile extern const THREAD_LOCAL struct good_test x55;
+volatile const extern THREAD_LOCAL struct good_test x56;
+THREAD_LOCAL const extern struct good_test x57;
+const THREAD_LOCAL extern struct good_test x58;
+THREAD_LOCAL volatile extern struct good_test x59;
+volatile THREAD_LOCAL extern struct good_test x60;
+THREAD_LOCAL const extern volatile struct good_test x61;
+THREAD_LOCAL const volatile extern struct good_test x62;
+const THREAD_LOCAL extern volatile struct good_test x63;
+const THREAD_LOCAL volatile extern struct good_test x64;
+const volatile THREAD_LOCAL extern struct good_test x65;
+THREAD_LOCAL volatile extern const struct good_test x66;
+THREAD_LOCAL volatile const extern struct good_test x67;
+volatile THREAD_LOCAL extern const struct good_test x68;
+volatile THREAD_LOCAL const extern struct good_test x69;
+volatile const THREAD_LOCAL extern struct good_test x70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL struct good_test x69;
-const static THREAD_LOCAL struct good_test x70;
-static volatile THREAD_LOCAL struct good_test x71;
-volatile static THREAD_LOCAL struct good_test x72;
-static const THREAD_LOCAL volatile struct good_test x73;
-static const volatile THREAD_LOCAL struct good_test x74;
-const static THREAD_LOCAL volatile struct good_test x75;
-const static volatile THREAD_LOCAL struct good_test x76;
-const volatile static THREAD_LOCAL struct good_test x77;
-static volatile THREAD_LOCAL const struct good_test x78;
-static volatile const THREAD_LOCAL struct good_test x79;
-volatile static THREAD_LOCAL const struct good_test x80;
-volatile static const THREAD_LOCAL struct good_test x81;
-volatile const static THREAD_LOCAL struct good_test x82;
-THREAD_LOCAL const static struct good_test x83;
-const THREAD_LOCAL static struct good_test x84;
-THREAD_LOCAL volatile static struct good_test x85;
-volatile THREAD_LOCAL static struct good_test x86;
-THREAD_LOCAL const static volatile struct good_test x87;
-THREAD_LOCAL const volatile static struct good_test x88;
-const THREAD_LOCAL static volatile struct good_test x89;
-const THREAD_LOCAL volatile static struct good_test x90;
-const volatile THREAD_LOCAL static struct good_test x91;
-THREAD_LOCAL volatile static const struct good_test x92;
-THREAD_LOCAL volatile const static struct good_test x93;
-volatile THREAD_LOCAL static const struct good_test x94;
-volatile THREAD_LOCAL const static struct good_test x95;
-volatile const THREAD_LOCAL static struct good_test x96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL struct good_test x71;
+const static THREAD_LOCAL struct good_test x72;
+static volatile THREAD_LOCAL struct good_test x73;
+volatile static THREAD_LOCAL struct good_test x74;
+static const THREAD_LOCAL volatile struct good_test x75;
+static const volatile THREAD_LOCAL struct good_test x76;
+const static THREAD_LOCAL volatile struct good_test x77;
+const static volatile THREAD_LOCAL struct good_test x78;
+const volatile static THREAD_LOCAL struct good_test x79;
+static volatile THREAD_LOCAL const struct good_test x80;
+static volatile const THREAD_LOCAL struct good_test x81;
+volatile static THREAD_LOCAL const struct good_test x82;
+volatile static const THREAD_LOCAL struct good_test x83;
+volatile const static THREAD_LOCAL struct good_test x84;
+THREAD_LOCAL const static struct good_test x85;
+const THREAD_LOCAL static struct good_test x86;
+THREAD_LOCAL volatile static struct good_test x87;
+volatile THREAD_LOCAL static struct good_test x88;
+THREAD_LOCAL const static volatile struct good_test x89;
+THREAD_LOCAL const volatile static struct good_test x90;
+const THREAD_LOCAL static volatile struct good_test x91;
+const THREAD_LOCAL volatile static struct good_test x92;
+const volatile THREAD_LOCAL static struct good_test x93;
+THREAD_LOCAL volatile static const struct good_test x94;
+THREAD_LOCAL volatile const static struct good_test x95;
+volatile THREAD_LOCAL static const struct good_test x96;
+volatile THREAD_LOCAL const static struct good_test x97;
+volatile const THREAD_LOCAL static struct good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -127,106 +131,401 @@
 extern volatile const struct good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static struct good_test6 { int x_factor6; } x_6;
-static volatile struct good_test7 { int x_factor7; } x_7;
-static const volatile struct good_test8 { int x_factor8; } x_8;
-static volatile const struct good_test9 { int x_factor9; } x_9;
+static const struct good_test7 { int x_factor7; } x_7;
+static volatile struct good_test8 { int x_factor8; } x_8;
+static const volatile struct good_test9 { int x_factor9; } x_9;
+static volatile const struct good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern struct good_test10 { int x_factor10; } x_10;
-volatile extern struct good_test11 { int x_factor11; } x_11;
-const extern volatile struct good_test12 { int x_factor12; } x_12;
-const volatile extern struct good_test13 { int x_factor13; } x_13;
-volatile extern const struct good_test14 { int x_factor14; } x_14;
-volatile const extern struct good_test15 { int x_factor15; } x_15;
-volatile static struct good_test16 { int x_factor16; } x_16;
-const static volatile struct good_test17 { int x_factor17; } x_17;
-const volatile static struct good_test18 { int x_factor18; } x_18;
-volatile static const struct good_test19 { int x_factor19; } x_19;
-volatile const static struct good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern struct good_test11 { int x_factor11; } x_11;
+volatile extern struct good_test12 { int x_factor12; } x_12;
+const extern volatile struct good_test13 { int x_factor13; } x_13;
+const volatile extern struct good_test14 { int x_factor14; } x_14;
+volatile extern const struct good_test15 { int x_factor15; } x_15;
+volatile const extern struct good_test16 { int x_factor16; } x_16;
+const static struct good_test17 { int x_factor17; } x_17;
+volatile static struct good_test18 { int x_factor18; } x_18;
+const static volatile struct good_test19 { int x_factor19; } x_19;
+const volatile static struct good_test20 { int x_factor20; } x_20;
+volatile static const struct good_test21 { int x_factor21; } x_21;
+volatile const static struct good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL struct good_test21 { int x_factor21; } x_21;
-extern THREAD_LOCAL const struct good_test22 { int x_factor22; } x_22;
-extern THREAD_LOCAL volatile struct good_test23 { int x_factor23; } x_23;
-extern THREAD_LOCAL const volatile struct good_test24 { int x_factor24; } x_24;
-extern THREAD_LOCAL volatile const struct good_test25 { int x_factor25; } x_25;
-THREAD_LOCAL extern struct good_test26 { int x_factor26; } x_26;
-THREAD_LOCAL extern const struct good_test27 { int x_factor27; } x_27;
-THREAD_LOCAL extern volatile struct good_test28 { int x_factor28; } x_28;
-THREAD_LOCAL extern const volatile struct good_test29 { int x_factor29; } x_29;
-THREAD_LOCAL extern volatile const struct good_test30 { int x_factor30; } x_30;
+extern THREAD_LOCAL struct good_test23 { int x_factor23; } x_23;
+extern THREAD_LOCAL const struct good_test24 { int x_factor24; } x_24;
+extern THREAD_LOCAL volatile struct good_test25 { int x_factor25; } x_25;
+extern THREAD_LOCAL const volatile struct good_test26 { int x_factor26; } x_26;
+extern THREAD_LOCAL volatile const struct good_test27 { int x_factor27; } x_27;
+THREAD_LOCAL extern struct good_test28 { int x_factor28; } x_28;
+THREAD_LOCAL extern const struct good_test29 { int x_factor29; } x_29;
+THREAD_LOCAL extern volatile struct good_test30 { int x_factor30; } x_30;
+THREAD_LOCAL extern const volatile struct good_test31 { int x_factor31; } x_31;
+THREAD_LOCAL extern volatile const struct good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL struct good_test31 { int x_factor31; } x_31;
-static THREAD_LOCAL const struct good_test32 { int x_factor32; } x_32;
-static THREAD_LOCAL volatile struct good_test33 { int x_factor33; } x_33;
-static THREAD_LOCAL const volatile struct good_test34 { int x_factor34; } x_34;
-static THREAD_LOCAL volatile const struct good_test35 { int x_factor35; } x_35;
-THREAD_LOCAL static struct good_test36 { int x_factor36; } x_36;
-THREAD_LOCAL static const struct good_test37 { int x_factor37; } x_37;
-THREAD_LOCAL static volatile struct good_test38 { int x_factor38; } x_38;
-THREAD_LOCAL static const volatile struct good_test39 { int x_factor39; } x_39;
-THREAD_LOCAL static volatile const struct good_test40 { int x_factor40; } x_40;
+static THREAD_LOCAL struct good_test33 { int x_factor33; } x_33;
+static THREAD_LOCAL const struct good_test34 { int x_factor34; } x_34;
+static THREAD_LOCAL volatile struct good_test35 { int x_factor35; } x_35;
+static THREAD_LOCAL const volatile struct good_test36 { int x_factor36; } x_36;
+static THREAD_LOCAL volatile const struct good_test37 { int x_factor37; } x_37;
+THREAD_LOCAL static struct good_test38 { int x_factor38; } x_38;
+THREAD_LOCAL static const struct good_test39 { int x_factor39; } x_39;
+THREAD_LOCAL static volatile struct good_test40 { int x_factor40; } x_40;
+THREAD_LOCAL static const volatile struct good_test41 { int x_factor41; } x_41;
+THREAD_LOCAL static volatile const struct good_test42 { int x_factor42; } x_42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL struct good_test41 { int x_factor41; } x_41;
-const extern THREAD_LOCAL struct good_test42 { int x_factor42; } x_42;
-extern volatile THREAD_LOCAL struct good_test43 { int x_factor43; } x_43;
-volatile extern THREAD_LOCAL struct good_test44 { int x_factor44; } x_44;
-extern const THREAD_LOCAL volatile struct good_test45 { int x_factor45; } x_45;
-extern const volatile THREAD_LOCAL struct good_test46 { int x_factor46; } x_46;
-const extern THREAD_LOCAL volatile struct good_test47 { int x_factor47; } x_47;
-const extern volatile THREAD_LOCAL struct good_test48 { int x_factor48; } x_48;
-const volatile extern THREAD_LOCAL struct good_test49 { int x_factor49; } x_49;
-extern volatile THREAD_LOCAL const struct good_test50 { int x_factor50; } x_50;
-extern volatile const THREAD_LOCAL struct good_test51 { int x_factor51; } x_51;
-volatile extern THREAD_LOCAL const struct good_test52 { int x_factor52; } x_52;
-volatile extern const THREAD_LOCAL struct good_test53 { int x_factor53; } x_53;
-volatile const extern THREAD_LOCAL struct good_test54 { int x_factor54; } x_54;
-THREAD_LOCAL const extern struct good_test55 { int x_factor55; } x_55;
-const THREAD_LOCAL extern struct good_test56 { int x_factor56; } x_56;
-THREAD_LOCAL volatile extern struct good_test57 { int x_factor57; } x_57;
-volatile THREAD_LOCAL extern struct good_test58 { int x_factor58; } x_58;
-THREAD_LOCAL const extern volatile struct good_test59 { int x_factor59; } x_59;
-THREAD_LOCAL const volatile extern struct good_test60 { int x_factor60; } x_60;
-const THREAD_LOCAL extern volatile struct good_test61 { int x_factor61; } x_61;
-const THREAD_LOCAL volatile extern struct good_test62 { int x_factor62; } x_62;
-const volatile THREAD_LOCAL extern struct good_test63 { int x_factor63; } x_63;
-THREAD_LOCAL volatile extern const struct good_test64 { int x_factor64; } x_64;
-THREAD_LOCAL volatile const extern struct good_test65 { int x_factor65; } x_65;
-volatile THREAD_LOCAL extern const struct good_test66 { int x_factor66; } x_66;
-volatile THREAD_LOCAL const extern struct good_test67 { int x_factor67; } x_67;
-volatile const THREAD_LOCAL extern struct good_test68 { int x_factor68; } x_68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL struct good_test43 { int x_factor43; } x_43;
+const extern THREAD_LOCAL struct good_test44 { int x_factor44; } x_44;
+extern volatile THREAD_LOCAL struct good_test45 { int x_factor45; } x_45;
+volatile extern THREAD_LOCAL struct good_test46 { int x_factor46; } x_46;
+extern const THREAD_LOCAL volatile struct good_test47 { int x_factor47; } x_47;
+extern const volatile THREAD_LOCAL struct good_test48 { int x_factor48; } x_48;
+const extern THREAD_LOCAL volatile struct good_test49 { int x_factor49; } x_49;
+const extern volatile THREAD_LOCAL struct good_test50 { int x_factor50; } x_50;
+const volatile extern THREAD_LOCAL struct good_test51 { int x_factor51; } x_51;
+extern volatile THREAD_LOCAL const struct good_test52 { int x_factor52; } x_52;
+extern volatile const THREAD_LOCAL struct good_test53 { int x_factor53; } x_53;
+volatile extern THREAD_LOCAL const struct good_test54 { int x_factor54; } x_54;
+volatile extern const THREAD_LOCAL struct good_test55 { int x_factor55; } x_55;
+volatile const extern THREAD_LOCAL struct good_test56 { int x_factor56; } x_56;
+THREAD_LOCAL const extern struct good_test57 { int x_factor57; } x_57;
+const THREAD_LOCAL extern struct good_test58 { int x_factor58; } x_58;
+THREAD_LOCAL volatile extern struct good_test59 { int x_factor59; } x_59;
+volatile THREAD_LOCAL extern struct good_test60 { int x_factor60; } x_60;
+THREAD_LOCAL const extern volatile struct good_test61 { int x_factor61; } x_61;
+THREAD_LOCAL const volatile extern struct good_test62 { int x_factor62; } x_62;
+const THREAD_LOCAL extern volatile struct good_test63 { int x_factor63; } x_63;
+const THREAD_LOCAL volatile extern struct good_test64 { int x_factor64; } x_64;
+const volatile THREAD_LOCAL extern struct good_test65 { int x_factor65; } x_65;
+THREAD_LOCAL volatile extern const struct good_test66 { int x_factor66; } x_66;
+THREAD_LOCAL volatile const extern struct good_test67 { int x_factor67; } x_67;
+volatile THREAD_LOCAL extern const struct good_test68 { int x_factor68; } x_68;
+volatile THREAD_LOCAL const extern struct good_test69 { int x_factor69; } x_69;
+volatile const THREAD_LOCAL extern struct good_test70 { int x_factor70; } x_70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL struct good_test69 { int x_factor69; } x_69;
-const static THREAD_LOCAL struct good_test70 { int x_factor70; } x_70;
-static volatile THREAD_LOCAL struct good_test71 { int x_factor71; } x_71;
-volatile static THREAD_LOCAL struct good_test72 { int x_factor72; } x_72;
-static const THREAD_LOCAL volatile struct good_test73 { int x_factor73; } x_73;
-static const volatile THREAD_LOCAL struct good_test74 { int x_factor74; } x_74;
-const static THREAD_LOCAL volatile struct good_test75 { int x_factor75; } x_75;
-const static volatile THREAD_LOCAL struct good_test76 { int x_factor76; } x_76;
-const volatile static THREAD_LOCAL struct good_test77 { int x_factor77; } x_77;
-static volatile THREAD_LOCAL const struct good_test78 { int x_factor78; } x_78;
-static volatile const THREAD_LOCAL struct good_test79 { int x_factor79; } x_79;
-volatile static THREAD_LOCAL const struct good_test80 { int x_factor80; } x_80;
-volatile static const THREAD_LOCAL struct good_test81 { int x_factor81; } x_81;
-volatile const static THREAD_LOCAL struct good_test82 { int x_factor82; } x_82;
-THREAD_LOCAL const static struct good_test83 { int x_factor83; } x_83;
-const THREAD_LOCAL static struct good_test84 { int x_factor84; } x_84;
-THREAD_LOCAL volatile static struct good_test85 { int x_factor85; } x_85;
-volatile THREAD_LOCAL static struct good_test86 { int x_factor86; } x_86;
-THREAD_LOCAL const static volatile struct good_test87 { int x_factor87; } x_87;
-THREAD_LOCAL const volatile static struct good_test88 { int x_factor88; } x_88;
-const THREAD_LOCAL static volatile struct good_test89 { int x_factor89; } x_89;
-const THREAD_LOCAL volatile static struct good_test90 { int x_factor90; } x_90;
-const volatile THREAD_LOCAL static struct good_test91 { int x_factor91; } x_91;
-THREAD_LOCAL volatile static const struct good_test92 { int x_factor92; } x_92;
-THREAD_LOCAL volatile const static struct good_test93 { int x_factor93; } x_93;
-volatile THREAD_LOCAL static const struct good_test94 { int x_factor94; } x_94;
-volatile THREAD_LOCAL const static struct good_test95 { int x_factor95; } x_95;
-volatile const THREAD_LOCAL static struct good_test96 { int x_factor96; } x_96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL struct good_test71 { int x_factor71; } x_71;
+const static THREAD_LOCAL struct good_test72 { int x_factor72; } x_72;
+static volatile THREAD_LOCAL struct good_test73 { int x_factor73; } x_73;
+volatile static THREAD_LOCAL struct good_test74 { int x_factor74; } x_74;
+static const THREAD_LOCAL volatile struct good_test75 { int x_factor75; } x_75;
+static const volatile THREAD_LOCAL struct good_test76 { int x_factor76; } x_76;
+const static THREAD_LOCAL volatile struct good_test77 { int x_factor77; } x_77;
+const static volatile THREAD_LOCAL struct good_test78 { int x_factor78; } x_78;
+const volatile static THREAD_LOCAL struct good_test79 { int x_factor79; } x_79;
+static volatile THREAD_LOCAL const struct good_test80 { int x_factor80; } x_80;
+static volatile const THREAD_LOCAL struct good_test81 { int x_factor81; } x_81;
+volatile static THREAD_LOCAL const struct good_test82 { int x_factor82; } x_82;
+volatile static const THREAD_LOCAL struct good_test83 { int x_factor83; } x_83;
+volatile const static THREAD_LOCAL struct good_test84 { int x_factor84; } x_84;
+THREAD_LOCAL const static struct good_test85 { int x_factor85; } x_85;
+const THREAD_LOCAL static struct good_test86 { int x_factor86; } x_86;
+THREAD_LOCAL volatile static struct good_test87 { int x_factor87; } x_87;
+volatile THREAD_LOCAL static struct good_test88 { int x_factor88; } x_88;
+THREAD_LOCAL const static volatile struct good_test89 { int x_factor89; } x_89;
+THREAD_LOCAL const volatile static struct good_test90 { int x_factor90; } x_90;
+const THREAD_LOCAL static volatile struct good_test91 { int x_factor91; } x_91;
+const THREAD_LOCAL volatile static struct good_test92 { int x_factor92; } x_92;
+const volatile THREAD_LOCAL static struct good_test93 { int x_factor93; } x_93;
+THREAD_LOCAL volatile static const struct good_test94 { int x_factor94; } x_94;
+THREAD_LOCAL volatile const static struct good_test95 { int x_factor95; } x_95;
+volatile THREAD_LOCAL static const struct good_test96 { int x_factor96; } x_96;
+volatile THREAD_LOCAL const static struct good_test97 { int x_factor97; } x_97;
+volatile const THREAD_LOCAL static struct good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+STATIC_ASSERT(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+STATIC_ASSERT(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc.in/decl.C99/Pass_union_def.in
===================================================================
--- trunk/tests/zcc.in/decl.C99/Pass_union_def.in	2011-09-02 23:08:46 UTC (rev 691)
+++ trunk/tests/zcc.in/decl.C99/Pass_union_def.in	2011-09-02 23:14:20 UTC (rev 692)
@@ -1,5 +1,8 @@
 SUFFIXES h hpp
 OBJECTLIKE_MACRO THREAD_LOCAL _Thread_local thread_local
+OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
+OBJECTLIKE_MACRO TYPE_LINKAGE_CODE 0 2
+OBJECTLIKE_MACRO DEFAULT_CONST_LINKAGE_CODE 2 1
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined union
 
@@ -15,108 +18,109 @@
 extern volatile const union good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test x6;
-static volatile union good_test x7;
-static const volatile union good_test x8;
-static volatile const union good_test x9;
+static const union good_test x7;
+static volatile union good_test x8;
+static const volatile union good_test x9;
+static volatile const union good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test x10;
-volatile extern union good_test x11;
-const extern volatile union good_test x12;
-const volatile extern union good_test x13;
-volatile extern const union good_test x14;
-volatile const extern union good_test x15;
-volatile static union good_test x16;
-const static volatile union good_test x17;
-const volatile static union good_test x18;
-volatile static const union good_test x19;
-volatile const static union good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test x11;
+volatile extern union good_test x12;
+const extern volatile union good_test x13;
+const volatile extern union good_test x14;
+volatile extern const union good_test x15;
+volatile const extern union good_test x16;
+const static union good_test x17;
+volatile static union good_test x18;
+const static volatile union good_test x19;
+const volatile static union good_test x20;
+volatile static const union good_test x21;
+volatile const static union good_test x22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL union good_test x21;
-extern THREAD_LOCAL const union good_test x22;
-extern THREAD_LOCAL volatile union good_test x23;
-extern THREAD_LOCAL const volatile union good_test x24;
-extern THREAD_LOCAL volatile const union good_test x25;
-THREAD_LOCAL extern union good_test x26;
-THREAD_LOCAL extern const union good_test x27;
-THREAD_LOCAL extern volatile union good_test x28;
-THREAD_LOCAL extern const volatile union good_test x29;
-THREAD_LOCAL extern volatile const union good_test x30;
+extern THREAD_LOCAL union good_test x23;
+extern THREAD_LOCAL const union good_test x24;
+extern THREAD_LOCAL volatile union good_test x25;
+extern THREAD_LOCAL const volatile union good_test x26;
+extern THREAD_LOCAL volatile const union good_test x27;
+THREAD_LOCAL extern union good_test x28;
+THREAD_LOCAL extern const union good_test x29;
+THREAD_LOCAL extern volatile union good_test x30;
+THREAD_LOCAL extern const volatile union good_test x31;
+THREAD_LOCAL extern volatile const union good_test x32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL union good_test x31;
-static THREAD_LOCAL const union good_test x32;
-static THREAD_LOCAL volatile union good_test x33;
-static THREAD_LOCAL const volatile union good_test x34;
-static THREAD_LOCAL volatile const union good_test x35;
-THREAD_LOCAL static union good_test x36;
-THREAD_LOCAL static const union good_test x37;
-THREAD_LOCAL static volatile union good_test x38;
-THREAD_LOCAL static const volatile union good_test x39;
-THREAD_LOCAL static volatile const union good_test x40;
+static THREAD_LOCAL union good_test x33;
+static THREAD_LOCAL const union good_test x34;
+static THREAD_LOCAL volatile union good_test x35;
+static THREAD_LOCAL const volatile union good_test x36;
+static THREAD_LOCAL volatile const union good_test x37;
+THREAD_LOCAL static union good_test x38;
+THREAD_LOCAL static const union good_test x39;
+THREAD_LOCAL static volatile union good_test x40;
+THREAD_LOCAL static const volatile union good_test x41;
+THREAD_LOCAL static volatile const union good_test x42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL union good_test x41;
-const extern THREAD_LOCAL union good_test x42;
-extern volatile THREAD_LOCAL union good_test x43;
-volatile extern THREAD_LOCAL union good_test x44;
-extern const THREAD_LOCAL volatile union good_test x45;
-extern const volatile THREAD_LOCAL union good_test x46;
-const extern THREAD_LOCAL volatile union good_test x47;
-const extern volatile THREAD_LOCAL union good_test x48;
-const volatile extern THREAD_LOCAL union good_test x49;
-extern volatile THREAD_LOCAL const union good_test x50;
-extern volatile const THREAD_LOCAL union good_test x51;
-volatile extern THREAD_LOCAL const union good_test x52;
-volatile extern const THREAD_LOCAL union good_test x53;
-volatile const extern THREAD_LOCAL union good_test x54;
-THREAD_LOCAL const extern union good_test x55;
-const THREAD_LOCAL extern union good_test x56;
-THREAD_LOCAL volatile extern union good_test x57;
-volatile THREAD_LOCAL extern union good_test x58;
-THREAD_LOCAL const extern volatile union good_test x59;
-THREAD_LOCAL const volatile extern union good_test x60;
-const THREAD_LOCAL extern volatile union good_test x61;
-const THREAD_LOCAL volatile extern union good_test x62;
-const volatile THREAD_LOCAL extern union good_test x63;
-THREAD_LOCAL volatile extern const union good_test x64;
-THREAD_LOCAL volatile const extern union good_test x65;
-volatile THREAD_LOCAL extern const union good_test x66;
-volatile THREAD_LOCAL const extern union good_test x67;
-volatile const THREAD_LOCAL extern union good_test x68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL union good_test x43;
+const extern THREAD_LOCAL union good_test x44;
+extern volatile THREAD_LOCAL union good_test x45;
+volatile extern THREAD_LOCAL union good_test x46;
+extern const THREAD_LOCAL volatile union good_test x47;
+extern const volatile THREAD_LOCAL union good_test x48;
+const extern THREAD_LOCAL volatile union good_test x49;
+const extern volatile THREAD_LOCAL union good_test x50;
+const volatile extern THREAD_LOCAL union good_test x51;
+extern volatile THREAD_LOCAL const union good_test x52;
+extern volatile const THREAD_LOCAL union good_test x53;
+volatile extern THREAD_LOCAL const union good_test x54;
+volatile extern const THREAD_LOCAL union good_test x55;
+volatile const extern THREAD_LOCAL union good_test x56;
+THREAD_LOCAL const extern union good_test x57;
+const THREAD_LOCAL extern union good_test x58;
+THREAD_LOCAL volatile extern union good_test x59;
+volatile THREAD_LOCAL extern union good_test x60;
+THREAD_LOCAL const extern volatile union good_test x61;
+THREAD_LOCAL const volatile extern union good_test x62;
+const THREAD_LOCAL extern volatile union good_test x63;
+const THREAD_LOCAL volatile extern union good_test x64;
+const volatile THREAD_LOCAL extern union good_test x65;
+THREAD_LOCAL volatile extern const union good_test x66;
+THREAD_LOCAL volatile const extern union good_test x67;
+volatile THREAD_LOCAL extern const union good_test x68;
+volatile THREAD_LOCAL const extern union good_test x69;
+volatile const THREAD_LOCAL extern union good_test x70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL union good_test x69;
-const static THREAD_LOCAL union good_test x70;
-static volatile THREAD_LOCAL union good_test x71;
-volatile static THREAD_LOCAL union good_test x72;
-static const THREAD_LOCAL volatile union good_test x73;
-static const volatile THREAD_LOCAL union good_test x74;
-const static THREAD_LOCAL volatile union good_test x75;
-const static volatile THREAD_LOCAL union good_test x76;
-const volatile static THREAD_LOCAL union good_test x77;
-static volatile THREAD_LOCAL const union good_test x78;
-static volatile const THREAD_LOCAL union good_test x79;
-volatile static THREAD_LOCAL const union good_test x80;
-volatile static const THREAD_LOCAL union good_test x81;
-volatile const static THREAD_LOCAL union good_test x82;
-THREAD_LOCAL const static union good_test x83;
-const THREAD_LOCAL static union good_test x84;
-THREAD_LOCAL volatile static union good_test x85;
-volatile THREAD_LOCAL static union good_test x86;
-THREAD_LOCAL const static volatile union good_test x87;
-THREAD_LOCAL const volatile static union good_test x88;
-const THREAD_LOCAL static volatile union good_test x89;
-const THREAD_LOCAL volatile static union good_test x90;
-const volatile THREAD_LOCAL static union good_test x91;
-THREAD_LOCAL volatile static const union good_test x92;
-THREAD_LOCAL volatile const static union good_test x93;
-volatile THREAD_LOCAL static const union good_test x94;
-volatile THREAD_LOCAL const static union good_test x95;
-volatile const THREAD_LOCAL static union good_test x96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL union good_test x71;
+const static THREAD_LOCAL union good_test x72;
+static volatile THREAD_LOCAL union good_test x73;
+volatile static THREAD_LOCAL union good_test x74;
+static const THREAD_LOCAL volatile union good_test x75;
+static const volatile THREAD_LOCAL union good_test x76;
+const static THREAD_LOCAL volatile union good_test x77;
+const static volatile THREAD_LOCAL union good_test x78;
+const volatile static THREAD_LOCAL union good_test x79;
+static volatile THREAD_LOCAL const union good_test x80;
+static volatile const THREAD_LOCAL union good_test x81;
+volatile static THREAD_LOCAL const union good_test x82;
+volatile static const THREAD_LOCAL union good_test x83;
+volatile const static THREAD_LOCAL union good_test x84;
+THREAD_LOCAL const static union good_test x85;
+const THREAD_LOCAL static union good_test x86;
+THREAD_LOCAL volatile static union good_test x87;
+volatile THREAD_LOCAL static union good_test x88;
+THREAD_LOCAL const static volatile union good_test x89;
+THREAD_LOCAL const volatile static union good_test x90;
+const THREAD_LOCAL static volatile union good_test x91;
+const THREAD_LOCAL volatile static union good_test x92;
+const volatile THREAD_LOCAL static union good_test x93;
+THREAD_LOCAL volatile static const union good_test x94;
+THREAD_LOCAL volatile const static union good_test x95;
+volatile THREAD_LOCAL static const union good_test x96;
+volatile THREAD_LOCAL const static union good_test x97;
+volatile const THREAD_LOCAL static union good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -127,106 +131,401 @@
 extern volatile const union good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static union good_test6 { int x_factor6; } x_6;
-static volatile union good_test7 { int x_factor7; } x_7;
-static const volatile union good_test8 { int x_factor8; } x_8;
-static volatile const union good_test9 { int x_factor9; } x_9;
+static const union good_test7 { int x_factor7; } x_7;
+static volatile union good_test8 { int x_factor8; } x_8;
+static const volatile union good_test9 { int x_factor9; } x_9;
+static volatile const union good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern union good_test10 { int x_factor10; } x_10;
-volatile extern union good_test11 { int x_factor11; } x_11;
-const extern volatile union good_test12 { int x_factor12; } x_12;
-const volatile extern union good_test13 { int x_factor13; } x_13;
-volatile extern const union good_test14 { int x_factor14; } x_14;
-volatile const extern union good_test15 { int x_factor15; } x_15;
-volatile static union good_test16 { int x_factor16; } x_16;
-const static volatile union good_test17 { int x_factor17; } x_17;
-const volatile static union good_test18 { int x_factor18; } x_18;
-volatile static const union good_test19 { int x_factor19; } x_19;
-volatile const static union good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern union good_test11 { int x_factor11; } x_11;
+volatile extern union good_test12 { int x_factor12; } x_12;
+const extern volatile union good_test13 { int x_factor13; } x_13;
+const volatile extern union good_test14 { int x_factor14; } x_14;
+volatile extern const union good_test15 { int x_factor15; } x_15;
+volatile const extern union good_test16 { int x_factor16; } x_16;
+const static union good_test17 { int x_factor17; } x_17;
+volatile static union good_test18 { int x_factor18; } x_18;
+const static volatile union good_test19 { int x_factor19; } x_19;
+const volatile static union good_test20 { int x_factor20; } x_20;
+volatile static const union good_test21 { int x_factor21; } x_21;
+volatile const static union good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on THREAD_LOCAL extern
-extern THREAD_LOCAL union good_test21 { int x_factor21; } x_21;
-extern THREAD_LOCAL const union good_test22 { int x_factor22; } x_22;
-extern THREAD_LOCAL volatile union good_test23 { int x_factor23; } x_23;
-extern THREAD_LOCAL const volatile union good_test24 { int x_factor24; } x_24;
-extern THREAD_LOCAL volatile const union good_test25 { int x_factor25; } x_25;
-THREAD_LOCAL extern union good_test26 { int x_factor26; } x_26;
-THREAD_LOCAL extern const union good_test27 { int x_factor27; } x_27;
-THREAD_LOCAL extern volatile union good_test28 { int x_factor28; } x_28;
-THREAD_LOCAL extern const volatile union good_test29 { int x_factor29; } x_29;
-THREAD_LOCAL extern volatile const union good_test30 { int x_factor30; } x_30;
+extern THREAD_LOCAL union good_test23 { int x_factor23; } x_23;
+extern THREAD_LOCAL const union good_test24 { int x_factor24; } x_24;
+extern THREAD_LOCAL volatile union good_test25 { int x_factor25; } x_25;
+extern THREAD_LOCAL const volatile union good_test26 { int x_factor26; } x_26;
+extern THREAD_LOCAL volatile const union good_test27 { int x_factor27; } x_27;
+THREAD_LOCAL extern union good_test28 { int x_factor28; } x_28;
+THREAD_LOCAL extern const union good_test29 { int x_factor29; } x_29;
+THREAD_LOCAL extern volatile union good_test30 { int x_factor30; } x_30;
+THREAD_LOCAL extern const volatile union good_test31 { int x_factor31; } x_31;
+THREAD_LOCAL extern volatile const union good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on THREAD_LOCAL static
-static THREAD_LOCAL union good_test31 { int x_factor31; } x_31;
-static THREAD_LOCAL const union good_test32 { int x_factor32; } x_32;
-static THREAD_LOCAL volatile union good_test33 { int x_factor33; } x_33;
-static THREAD_LOCAL const volatile union good_test34 { int x_factor34; } x_34;
-static THREAD_LOCAL volatile const union good_test35 { int x_factor35; } x_35;
-THREAD_LOCAL static union good_test36 { int x_factor36; } x_36;
-THREAD_LOCAL static const union good_test37 { int x_factor37; } x_37;
-THREAD_LOCAL static volatile union good_test38 { int x_factor38; } x_38;
-THREAD_LOCAL static const volatile union good_test39 { int x_factor39; } x_39;
-THREAD_LOCAL static volatile const union good_test40 { int x_factor40; } x_40;
+static THREAD_LOCAL union good_test33 { int x_factor33; } x_33;
+static THREAD_LOCAL const union good_test34 { int x_factor34; } x_34;
+static THREAD_LOCAL volatile union good_test35 { int x_factor35; } x_35;
+static THREAD_LOCAL const volatile union good_test36 { int x_factor36; } x_36;
+static THREAD_LOCAL volatile const union good_test37 { int x_factor37; } x_37;
+THREAD_LOCAL static union good_test38 { int x_factor38; } x_38;
+THREAD_LOCAL static const union good_test39 { int x_factor39; } x_39;
+THREAD_LOCAL static volatile union good_test40 { int x_factor40; } x_40;
+THREAD_LOCAL static const volatile union good_test41 { int x_factor41; } x_41;
+THREAD_LOCAL static volatile const union good_test42 { int x_factor42; } x_42;
 
-// THREAD_LOCAL extern not in first two postions is deprecated, but legal
-extern const THREAD_LOCAL union good_test41 { int x_factor41; } x_41;
-const extern THREAD_LOCAL union good_test42 { int x_factor42; } x_42;
-extern volatile THREAD_LOCAL union good_test43 { int x_factor43; } x_43;
-volatile extern THREAD_LOCAL union good_test44 { int x_factor44; } x_44;
-extern const THREAD_LOCAL volatile union good_test45 { int x_factor45; } x_45;
-extern const volatile THREAD_LOCAL union good_test46 { int x_factor46; } x_46;
-const extern THREAD_LOCAL volatile union good_test47 { int x_factor47; } x_47;
-const extern volatile THREAD_LOCAL union good_test48 { int x_factor48; } x_48;
-const volatile extern THREAD_LOCAL union good_test49 { int x_factor49; } x_49;
-extern volatile THREAD_LOCAL const union good_test50 { int x_factor50; } x_50;
-extern volatile const THREAD_LOCAL union good_test51 { int x_factor51; } x_51;
-volatile extern THREAD_LOCAL const union good_test52 { int x_factor52; } x_52;
-volatile extern const THREAD_LOCAL union good_test53 { int x_factor53; } x_53;
-volatile const extern THREAD_LOCAL union good_test54 { int x_factor54; } x_54;
-THREAD_LOCAL const extern union good_test55 { int x_factor55; } x_55;
-const THREAD_LOCAL extern union good_test56 { int x_factor56; } x_56;
-THREAD_LOCAL volatile extern union good_test57 { int x_factor57; } x_57;
-volatile THREAD_LOCAL extern union good_test58 { int x_factor58; } x_58;
-THREAD_LOCAL const extern volatile union good_test59 { int x_factor59; } x_59;
-THREAD_LOCAL const volatile extern union good_test60 { int x_factor60; } x_60;
-const THREAD_LOCAL extern volatile union good_test61 { int x_factor61; } x_61;
-const THREAD_LOCAL volatile extern union good_test62 { int x_factor62; } x_62;
-const volatile THREAD_LOCAL extern union good_test63 { int x_factor63; } x_63;
-THREAD_LOCAL volatile extern const union good_test64 { int x_factor64; } x_64;
-THREAD_LOCAL volatile const extern union good_test65 { int x_factor65; } x_65;
-volatile THREAD_LOCAL extern const union good_test66 { int x_factor66; } x_66;
-volatile THREAD_LOCAL const extern union good_test67 { int x_factor67; } x_67;
-volatile const THREAD_LOCAL extern union good_test68 { int x_factor68; } x_68;
+// THREAD_LOCAL extern not in first two positions is deprecated, but legal
+extern const THREAD_LOCAL union good_test43 { int x_factor43; } x_43;
+const extern THREAD_LOCAL union good_test44 { int x_factor44; } x_44;
+extern volatile THREAD_LOCAL union good_test45 { int x_factor45; } x_45;
+volatile extern THREAD_LOCAL union good_test46 { int x_factor46; } x_46;
+extern const THREAD_LOCAL volatile union good_test47 { int x_factor47; } x_47;
+extern const volatile THREAD_LOCAL union good_test48 { int x_factor48; } x_48;
+const extern THREAD_LOCAL volatile union good_test49 { int x_factor49; } x_49;
+const extern volatile THREAD_LOCAL union good_test50 { int x_factor50; } x_50;
+const volatile extern THREAD_LOCAL union good_test51 { int x_factor51; } x_51;
+extern volatile THREAD_LOCAL const union good_test52 { int x_factor52; } x_52;
+extern volatile const THREAD_LOCAL union good_test53 { int x_factor53; } x_53;
+volatile extern THREAD_LOCAL const union good_test54 { int x_factor54; } x_54;
+volatile extern const THREAD_LOCAL union good_test55 { int x_factor55; } x_55;
+volatile const extern THREAD_LOCAL union good_test56 { int x_factor56; } x_56;
+THREAD_LOCAL const extern union good_test57 { int x_factor57; } x_57;
+const THREAD_LOCAL extern union good_test58 { int x_factor58; } x_58;
+THREAD_LOCAL volatile extern union good_test59 { int x_factor59; } x_59;
+volatile THREAD_LOCAL extern union good_test60 { int x_factor60; } x_60;
+THREAD_LOCAL const extern volatile union good_test61 { int x_factor61; } x_61;
+THREAD_LOCAL const volatile extern union good_test62 { int x_factor62; } x_62;
+const THREAD_LOCAL extern volatile union good_test63 { int x_factor63; } x_63;
+const THREAD_LOCAL volatile extern union good_test64 { int x_factor64; } x_64;
+const volatile THREAD_LOCAL extern union good_test65 { int x_factor65; } x_65;
+THREAD_LOCAL volatile extern const union good_test66 { int x_factor66; } x_66;
+THREAD_LOCAL volatile const extern union good_test67 { int x_factor67; } x_67;
+volatile THREAD_LOCAL extern const union good_test68 { int x_factor68; } x_68;
+volatile THREAD_LOCAL const extern union good_test69 { int x_factor69; } x_69;
+volatile const THREAD_LOCAL extern union good_test70 { int x_factor70; } x_70;
 
-// THREAD_LOCAL static not in first two postions is deprecated, but legal
-static const THREAD_LOCAL union good_test69 { int x_factor69; } x_69;
-const static THREAD_LOCAL union good_test70 { int x_factor70; } x_70;
-static volatile THREAD_LOCAL union good_test71 { int x_factor71; } x_71;
-volatile static THREAD_LOCAL union good_test72 { int x_factor72; } x_72;
-static const THREAD_LOCAL volatile union good_test73 { int x_factor73; } x_73;
-static const volatile THREAD_LOCAL union good_test74 { int x_factor74; } x_74;
-const static THREAD_LOCAL volatile union good_test75 { int x_factor75; } x_75;
-const static volatile THREAD_LOCAL union good_test76 { int x_factor76; } x_76;
-const volatile static THREAD_LOCAL union good_test77 { int x_factor77; } x_77;
-static volatile THREAD_LOCAL const union good_test78 { int x_factor78; } x_78;
-static volatile const THREAD_LOCAL union good_test79 { int x_factor79; } x_79;
-volatile static THREAD_LOCAL const union good_test80 { int x_factor80; } x_80;
-volatile static const THREAD_LOCAL union good_test81 { int x_factor81; } x_81;
-volatile const static THREAD_LOCAL union good_test82 { int x_factor82; } x_82;
-THREAD_LOCAL const static union good_test83 { int x_factor83; } x_83;
-const THREAD_LOCAL static union good_test84 { int x_factor84; } x_84;
-THREAD_LOCAL volatile static union good_test85 { int x_factor85; } x_85;
-volatile THREAD_LOCAL static union good_test86 { int x_factor86; } x_86;
-THREAD_LOCAL const static volatile union good_test87 { int x_factor87; } x_87;
-THREAD_LOCAL const volatile static union good_test88 { int x_factor88; } x_88;
-const THREAD_LOCAL static volatile union good_test89 { int x_factor89; } x_89;
-const THREAD_LOCAL volatile static union good_test90 { int x_factor90; } x_90;
-const volatile THREAD_LOCAL static union good_test91 { int x_factor91; } x_91;
-THREAD_LOCAL volatile static const union good_test92 { int x_factor92; } x_92;
-THREAD_LOCAL volatile const static union good_test93 { int x_factor93; } x_93;
-volatile THREAD_LOCAL static const union good_test94 { int x_factor94; } x_94;
-volatile THREAD_LOCAL const static union good_test95 { int x_factor95; } x_95;
-volatile const THREAD_LOCAL static union good_test96 { int x_factor96; } x_96;
+// THREAD_LOCAL static not in first two positions is deprecated, but legal
+static const THREAD_LOCAL union good_test71 { int x_factor71; } x_71;
+const static THREAD_LOCAL union good_test72 { int x_factor72; } x_72;
+static volatile THREAD_LOCAL union good_test73 { int x_factor73; } x_73;
+volatile static THREAD_LOCAL union good_test74 { int x_factor74; } x_74;
+static const THREAD_LOCAL volatile union good_test75 { int x_factor75; } x_75;
+static const volatile THREAD_LOCAL union good_test76 { int x_factor76; } x_76;
+const static THREAD_LOCAL volatile union good_test77 { int x_factor77; } x_77;
+const static volatile THREAD_LOCAL union good_test78 { int x_factor78; } x_78;
+const volatile static THREAD_LOCAL union good_test79 { int x_factor79; } x_79;
+static volatile THREAD_LOCAL const union good_test80 { int x_factor80; } x_80;
+static volatile const THREAD_LOCAL union good_test81 { int x_factor81; } x_81;
+volatile static THREAD_LOCAL const union good_test82 { int x_factor82; } x_82;
+volatile static const THREAD_LOCAL union good_test83 { int x_factor83; } x_83;
+volatile const static THREAD_LOCAL union good_test84 { int x_factor84; } x_84;
+THREAD_LOCAL const static union good_test85 { int x_factor85; } x_85;
+const THREAD_LOCAL static union good_test86 { int x_factor86; } x_86;
+THREAD_LOCAL volatile static union good_test87 { int x_factor87; } x_87;
+volatile THREAD_LOCAL static union good_test88 { int x_factor88; } x_88;
+THREAD_LOCAL const static volatile union good_test89 { int x_factor89; } x_89;
+THREAD_LOCAL const volatile static union good_test90 { int x_factor90; } x_90;
+const THREAD_LOCAL static volatile union good_test91 { int x_factor91; } x_91;
+const THREAD_LOCAL volatile static union good_test92 { int x_factor92; } x_92;
+const volatile THREAD_LOCAL static union good_test93 { int x_factor93; } x_93;
+THREAD_LOCAL volatile static const union good_test94 { int x_factor94; } x_94;
+THREAD_LOCAL volatile const static union good_test95 { int x_factor95; } x_95;
+volatile THREAD_LOCAL static const union good_test96 { int x_factor96; } x_96;
+volatile THREAD_LOCAL const static union good_test97 { int x_factor97; } x_97;
+volatile const THREAD_LOCAL static union good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test),"good_test has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+STATIC_ASSERT(TYPE_LINKAGE_CODE==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+STATIC_ASSERT(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+STATIC_ASSERT(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+STATIC_ASSERT(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+STATIC_ASSERT(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sun Sep  4 00:59:14 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sun,  4 Sep 2011 00:59:14 +0200
Subject: [Zcplusplus-commits] r693 - trunk/tests/zcc/decl.C99
Message-ID: <20110903225918.AF65B481123@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-04 00:59:14 +0200 (Sun, 04 Sep 2011)
New Revision: 693

Modified:
   trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp
Log:
linkage test case adjust

Modified: trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp	2011-09-02 23:14:20 UTC (rev 692)
+++ trunk/tests/zcc/decl.C99/Pass_class_def_decl.hpp	2011-09-03 22:59:14 UTC (rev 693)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_class_def_decl.hpp
+// Pass_class_def_decl.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined class
 
@@ -14,106 +14,215 @@
 extern volatile const class good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static class good_test x6;
-static volatile class good_test x7;
-static const volatile class good_test x8;
-static volatile const class good_test x9;
+static const class good_test x7;
+static volatile class good_test x8;
+static const volatile class good_test x9;
+static volatile const class good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern class good_test x10;
-volatile extern class good_test x11;
-const extern volatile class good_test x12;
-const volatile extern class good_test x13;
-volatile extern const class good_test x14;
-volatile const extern class good_test x15;
-volatile static class good_test x16;
-const static volatile class good_test x17;
-const volatile static class good_test x18;
-volatile static const class good_test x19;
-volatile const static class good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern class good_test x11;
+volatile extern class good_test x12;
+const extern volatile class good_test x13;
+const volatile extern class good_test x14;
+volatile extern const class good_test x15;
+volatile const extern class good_test x16;
+const static class good_test x17;
+volatile static class good_test x18;
+const static volatile class good_test x19;
+const volatile static class good_test x20;
+volatile static const class good_test x21;
+volatile const static class good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local class good_test x21;
-extern thread_local const class good_test x22;
-extern thread_local volatile class good_test x23;
-extern thread_local const volatile class good_test x24;
-extern thread_local volatile const class good_test x25;
-thread_local extern class good_test x26;
-thread_local extern const class good_test x27;
-thread_local extern volatile class good_test x28;
-thread_local extern const volatile class good_test x29;
-thread_local extern volatile const class good_test x30;
+extern thread_local class good_test x23;
+extern thread_local const class good_test x24;
+extern thread_local volatile class good_test x25;
+extern thread_local const volatile class good_test x26;
+extern thread_local volatile const class good_test x27;
+thread_local extern class good_test x28;
+thread_local extern const class good_test x29;
+thread_local extern volatile class good_test x30;
+thread_local extern const volatile class good_test x31;
+thread_local extern volatile const class good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local class good_test x31;
-static thread_local const class good_test x32;
-static thread_local volatile class good_test x33;
-static thread_local const volatile class good_test x34;
-static thread_local volatile const class good_test x35;
-thread_local static class good_test x36;
-thread_local static const class good_test x37;
-thread_local static volatile class good_test x38;
-thread_local static const volatile class good_test x39;
-thread_local static volatile const class good_test x40;
+static thread_local class good_test x33;
+static thread_local const class good_test x34;
+static thread_local volatile class good_test x35;
+static thread_local const volatile class good_test x36;
+static thread_local volatile const class good_test x37;
+thread_local static class good_test x38;
+thread_local static const class good_test x39;
+thread_local static volatile class good_test x40;
+thread_local static const volatile class good_test x41;
+thread_local static volatile const class good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local class good_test x41;
-const extern thread_local class good_test x42;
-extern volatile thread_local class good_test x43;
-volatile extern thread_local class good_test x44;
-extern const thread_local volatile class good_test x45;
-extern const volatile thread_local class good_test x46;
-const extern thread_local volatile class good_test x47;
-const extern volatile thread_local class good_test x48;
-const volatile extern thread_local class good_test x49;
-extern volatile thread_local const class good_test x50;
-extern volatile const thread_local class good_test x51;
-volatile extern thread_local const class good_test x52;
-volatile extern const thread_local class good_test x53;
-volatile const extern thread_local class good_test x54;
-thread_local const extern class good_test x55;
-const thread_local extern class good_test x56;
-thread_local volatile extern class good_test x57;
-volatile thread_local extern class good_test x58;
-thread_local const extern volatile class good_test x59;
-thread_local const volatile extern class good_test x60;
-const thread_local extern volatile class good_test x61;
-const thread_local volatile extern class good_test x62;
-const volatile thread_local extern class good_test x63;
-thread_local volatile extern const class good_test x64;
-thread_local volatile const extern class good_test x65;
-volatile thread_local extern const class good_test x66;
-volatile thread_local const extern class good_test x67;
-volatile const thread_local extern class good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local class good_test x43;
+const extern thread_local class good_test x44;
+extern volatile thread_local class good_test x45;
+volatile extern thread_local class good_test x46;
+extern const thread_local volatile class good_test x47;
+extern const volatile thread_local class good_test x48;
+const extern thread_local volatile class good_test x49;
+const extern volatile thread_local class good_test x50;
+const volatile extern thread_local class good_test x51;
+extern volatile thread_local const class good_test x52;
+extern volatile const thread_local class good_test x53;
+volatile extern thread_local const class good_test x54;
+volatile extern const thread_local class good_test x55;
+volatile const extern thread_local class good_test x56;
+thread_local const extern class good_test x57;
+const thread_local extern class good_test x58;
+thread_local volatile extern class good_test x59;
+volatile thread_local extern class good_test x60;
+thread_local const extern volatile class good_test x61;
+thread_local const volatile extern class good_test x62;
+const thread_local extern volatile class good_test x63;
+const thread_local volatile extern class good_test x64;
+const volatile thread_local extern class good_test x65;
+thread_local volatile extern const class good_test x66;
+thread_local volatile const extern class good_test x67;
+volatile thread_local extern const class good_test x68;
+volatile thread_local const extern class good_test x69;
+volatile const thread_local extern class good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local class good_test x69;
-const static thread_local class good_test x70;
-static volatile thread_local class good_test x71;
-volatile static thread_local class good_test x72;
-static const thread_local volatile class good_test x73;
-static const volatile thread_local class good_test x74;
-const static thread_local volatile class good_test x75;
-const static volatile thread_local class good_test x76;
-const volatile static thread_local class good_test x77;
-static volatile thread_local const class good_test x78;
-static volatile const thread_local class good_test x79;
-volatile static thread_local const class good_test x80;
-volatile static const thread_local class good_test x81;
-volatile const static thread_local class good_test x82;
-thread_local const static class good_test x83;
-const thread_local static class good_test x84;
-thread_local volatile static class good_test x85;
-volatile thread_local static class good_test x86;
-thread_local const static volatile class good_test x87;
-thread_local const volatile static class good_test x88;
-const thread_local static volatile class good_test x89;
-const thread_local volatile static class good_test x90;
-const volatile thread_local static class good_test x91;
-thread_local volatile static const class good_test x92;
-thread_local volatile const static class good_test x93;
-volatile thread_local static const class good_test x94;
-volatile thread_local const static class good_test x95;
-volatile const thread_local static class good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local class good_test x71;
+const static thread_local class good_test x72;
+static volatile thread_local class good_test x73;
+volatile static thread_local class good_test x74;
+static const thread_local volatile class good_test x75;
+static const volatile thread_local class good_test x76;
+const static thread_local volatile class good_test x77;
+const static volatile thread_local class good_test x78;
+const volatile static thread_local class good_test x79;
+static volatile thread_local const class good_test x80;
+static volatile const thread_local class good_test x81;
+volatile static thread_local const class good_test x82;
+volatile static const thread_local class good_test x83;
+volatile const static thread_local class good_test x84;
+thread_local const static class good_test x85;
+const thread_local static class good_test x86;
+thread_local volatile static class good_test x87;
+volatile thread_local static class good_test x88;
+thread_local const static volatile class good_test x89;
+thread_local const volatile static class good_test x90;
+const thread_local static volatile class good_test x91;
+const thread_local volatile static class good_test x92;
+const volatile thread_local static class good_test x93;
+thread_local volatile static const class good_test x94;
+thread_local volatile const static class good_test x95;
+volatile thread_local static const class good_test x96;
+volatile thread_local const static class good_test x97;
+volatile const thread_local static class good_test x98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Sun Sep  4 00:59:46 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Sun,  4 Sep 2011 00:59:46 +0200
Subject: [Zcplusplus-commits] r694 - trunk/tests/zcc/decl.C99
Message-ID: <20110903225947.02AFC481123@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-04 00:59:46 +0200 (Sun, 04 Sep 2011)
New Revision: 694

Modified:
   trunk/tests/zcc/decl.C99/Pass_class_def.hpp
   trunk/tests/zcc/decl.C99/Pass_class_def2.hpp
Log:
omnibus linkage test case adjust

Modified: trunk/tests/zcc/decl.C99/Pass_class_def.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_def.hpp	2011-09-03 22:59:14 UTC (rev 693)
+++ trunk/tests/zcc/decl.C99/Pass_class_def.hpp	2011-09-03 22:59:46 UTC (rev 694)
@@ -1,4 +1,4 @@
-// decl.C99\Pass_class_def.hpp
+// Pass_class_def.hpp
 // (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined class
 
@@ -14,108 +14,109 @@
 extern volatile const class good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static class good_test x6;
-static volatile class good_test x7;
-static const volatile class good_test x8;
-static volatile const class good_test x9;
+static const class good_test x7;
+static volatile class good_test x8;
+static const volatile class good_test x9;
+static volatile const class good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern class good_test x10;
-volatile extern class good_test x11;
-const extern volatile class good_test x12;
-const volatile extern class good_test x13;
-volatile extern const class good_test x14;
-volatile const extern class good_test x15;
-volatile static class good_test x16;
-const static volatile class good_test x17;
-const volatile static class good_test x18;
-volatile static const class good_test x19;
-volatile const static class good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern class good_test x11;
+volatile extern class good_test x12;
+const extern volatile class good_test x13;
+const volatile extern class good_test x14;
+volatile extern const class good_test x15;
+volatile const extern class good_test x16;
+const static class good_test x17;
+volatile static class good_test x18;
+const static volatile class good_test x19;
+const volatile static class good_test x20;
+volatile static const class good_test x21;
+volatile const static class good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local class good_test x21;
-extern thread_local const class good_test x22;
-extern thread_local volatile class good_test x23;
-extern thread_local const volatile class good_test x24;
-extern thread_local volatile const class good_test x25;
-thread_local extern class good_test x26;
-thread_local extern const class good_test x27;
-thread_local extern volatile class good_test x28;
-thread_local extern const volatile class good_test x29;
-thread_local extern volatile const class good_test x30;
+extern thread_local class good_test x23;
+extern thread_local const class good_test x24;
+extern thread_local volatile class good_test x25;
+extern thread_local const volatile class good_test x26;
+extern thread_local volatile const class good_test x27;
+thread_local extern class good_test x28;
+thread_local extern const class good_test x29;
+thread_local extern volatile class good_test x30;
+thread_local extern const volatile class good_test x31;
+thread_local extern volatile const class good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local class good_test x31;
-static thread_local const class good_test x32;
-static thread_local volatile class good_test x33;
-static thread_local const volatile class good_test x34;
-static thread_local volatile const class good_test x35;
-thread_local static class good_test x36;
-thread_local static const class good_test x37;
-thread_local static volatile class good_test x38;
-thread_local static const volatile class good_test x39;
-thread_local static volatile const class good_test x40;
+static thread_local class good_test x33;
+static thread_local const class good_test x34;
+static thread_local volatile class good_test x35;
+static thread_local const volatile class good_test x36;
+static thread_local volatile const class good_test x37;
+thread_local static class good_test x38;
+thread_local static const class good_test x39;
+thread_local static volatile class good_test x40;
+thread_local static const volatile class good_test x41;
+thread_local static volatile const class good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local class good_test x41;
-const extern thread_local class good_test x42;
-extern volatile thread_local class good_test x43;
-volatile extern thread_local class good_test x44;
-extern const thread_local volatile class good_test x45;
-extern const volatile thread_local class good_test x46;
-const extern thread_local volatile class good_test x47;
-const extern volatile thread_local class good_test x48;
-const volatile extern thread_local class good_test x49;
-extern volatile thread_local const class good_test x50;
-extern volatile const thread_local class good_test x51;
-volatile extern thread_local const class good_test x52;
-volatile extern const thread_local class good_test x53;
-volatile const extern thread_local class good_test x54;
-thread_local const extern class good_test x55;
-const thread_local extern class good_test x56;
-thread_local volatile extern class good_test x57;
-volatile thread_local extern class good_test x58;
-thread_local const extern volatile class good_test x59;
-thread_local const volatile extern class good_test x60;
-const thread_local extern volatile class good_test x61;
-const thread_local volatile extern class good_test x62;
-const volatile thread_local extern class good_test x63;
-thread_local volatile extern const class good_test x64;
-thread_local volatile const extern class good_test x65;
-volatile thread_local extern const class good_test x66;
-volatile thread_local const extern class good_test x67;
-volatile const thread_local extern class good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local class good_test x43;
+const extern thread_local class good_test x44;
+extern volatile thread_local class good_test x45;
+volatile extern thread_local class good_test x46;
+extern const thread_local volatile class good_test x47;
+extern const volatile thread_local class good_test x48;
+const extern thread_local volatile class good_test x49;
+const extern volatile thread_local class good_test x50;
+const volatile extern thread_local class good_test x51;
+extern volatile thread_local const class good_test x52;
+extern volatile const thread_local class good_test x53;
+volatile extern thread_local const class good_test x54;
+volatile extern const thread_local class good_test x55;
+volatile const extern thread_local class good_test x56;
+thread_local const extern class good_test x57;
+const thread_local extern class good_test x58;
+thread_local volatile extern class good_test x59;
+volatile thread_local extern class good_test x60;
+thread_local const extern volatile class good_test x61;
+thread_local const volatile extern class good_test x62;
+const thread_local extern volatile class good_test x63;
+const thread_local volatile extern class good_test x64;
+const volatile thread_local extern class good_test x65;
+thread_local volatile extern const class good_test x66;
+thread_local volatile const extern class good_test x67;
+volatile thread_local extern const class good_test x68;
+volatile thread_local const extern class good_test x69;
+volatile const thread_local extern class good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local class good_test x69;
-const static thread_local class good_test x70;
-static volatile thread_local class good_test x71;
-volatile static thread_local class good_test x72;
-static const thread_local volatile class good_test x73;
-static const volatile thread_local class good_test x74;
-const static thread_local volatile class good_test x75;
-const static volatile thread_local class good_test x76;
-const volatile static thread_local class good_test x77;
-static volatile thread_local const class good_test x78;
-static volatile const thread_local class good_test x79;
-volatile static thread_local const class good_test x80;
-volatile static const thread_local class good_test x81;
-volatile const static thread_local class good_test x82;
-thread_local const static class good_test x83;
-const thread_local static class good_test x84;
-thread_local volatile static class good_test x85;
-volatile thread_local static class good_test x86;
-thread_local const static volatile class good_test x87;
-thread_local const volatile static class good_test x88;
-const thread_local static volatile class good_test x89;
-const thread_local volatile static class good_test x90;
-const volatile thread_local static class good_test x91;
-thread_local volatile static const class good_test x92;
-thread_local volatile const static class good_test x93;
-volatile thread_local static const class good_test x94;
-volatile thread_local const static class good_test x95;
-volatile const thread_local static class good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local class good_test x71;
+const static thread_local class good_test x72;
+static volatile thread_local class good_test x73;
+volatile static thread_local class good_test x74;
+static const thread_local volatile class good_test x75;
+static const volatile thread_local class good_test x76;
+const static thread_local volatile class good_test x77;
+const static volatile thread_local class good_test x78;
+const volatile static thread_local class good_test x79;
+static volatile thread_local const class good_test x80;
+static volatile const thread_local class good_test x81;
+volatile static thread_local const class good_test x82;
+volatile static const thread_local class good_test x83;
+volatile const static thread_local class good_test x84;
+thread_local const static class good_test x85;
+const thread_local static class good_test x86;
+thread_local volatile static class good_test x87;
+volatile thread_local static class good_test x88;
+thread_local const static volatile class good_test x89;
+thread_local const volatile static class good_test x90;
+const thread_local static volatile class good_test x91;
+const thread_local volatile static class good_test x92;
+const volatile thread_local static class good_test x93;
+thread_local volatile static const class good_test x94;
+thread_local volatile const static class good_test x95;
+volatile thread_local static const class good_test x96;
+volatile thread_local const static class good_test x97;
+volatile const thread_local static class good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -126,106 +127,401 @@
 extern volatile const class good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static class good_test6 { int x_factor6; } x_6;
-static volatile class good_test7 { int x_factor7; } x_7;
-static const volatile class good_test8 { int x_factor8; } x_8;
-static volatile const class good_test9 { int x_factor9; } x_9;
+static const class good_test7 { int x_factor7; } x_7;
+static volatile class good_test8 { int x_factor8; } x_8;
+static const volatile class good_test9 { int x_factor9; } x_9;
+static volatile const class good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern class good_test10 { int x_factor10; } x_10;
-volatile extern class good_test11 { int x_factor11; } x_11;
-const extern volatile class good_test12 { int x_factor12; } x_12;
-const volatile extern class good_test13 { int x_factor13; } x_13;
-volatile extern const class good_test14 { int x_factor14; } x_14;
-volatile const extern class good_test15 { int x_factor15; } x_15;
-volatile static class good_test16 { int x_factor16; } x_16;
-const static volatile class good_test17 { int x_factor17; } x_17;
-const volatile static class good_test18 { int x_factor18; } x_18;
-volatile static const class good_test19 { int x_factor19; } x_19;
-volatile const static class good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern class good_test11 { int x_factor11; } x_11;
+volatile extern class good_test12 { int x_factor12; } x_12;
+const extern volatile class good_test13 { int x_factor13; } x_13;
+const volatile extern class good_test14 { int x_factor14; } x_14;
+volatile extern const class good_test15 { int x_factor15; } x_15;
+volatile const extern class good_test16 { int x_factor16; } x_16;
+const static class good_test17 { int x_factor17; } x_17;
+volatile static class good_test18 { int x_factor18; } x_18;
+const static volatile class good_test19 { int x_factor19; } x_19;
+const volatile static class good_test20 { int x_factor20; } x_20;
+volatile static const class good_test21 { int x_factor21; } x_21;
+volatile const static class good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local class good_test21 { int x_factor21; } x_21;
-extern thread_local const class good_test22 { int x_factor22; } x_22;
-extern thread_local volatile class good_test23 { int x_factor23; } x_23;
-extern thread_local const volatile class good_test24 { int x_factor24; } x_24;
-extern thread_local volatile const class good_test25 { int x_factor25; } x_25;
-thread_local extern class good_test26 { int x_factor26; } x_26;
-thread_local extern const class good_test27 { int x_factor27; } x_27;
-thread_local extern volatile class good_test28 { int x_factor28; } x_28;
-thread_local extern const volatile class good_test29 { int x_factor29; } x_29;
-thread_local extern volatile const class good_test30 { int x_factor30; } x_30;
+extern thread_local class good_test23 { int x_factor23; } x_23;
+extern thread_local const class good_test24 { int x_factor24; } x_24;
+extern thread_local volatile class good_test25 { int x_factor25; } x_25;
+extern thread_local const volatile class good_test26 { int x_factor26; } x_26;
+extern thread_local volatile const class good_test27 { int x_factor27; } x_27;
+thread_local extern class good_test28 { int x_factor28; } x_28;
+thread_local extern const class good_test29 { int x_factor29; } x_29;
+thread_local extern volatile class good_test30 { int x_factor30; } x_30;
+thread_local extern const volatile class good_test31 { int x_factor31; } x_31;
+thread_local extern volatile const class good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on thread_local static
-static thread_local class good_test31 { int x_factor31; } x_31;
-static thread_local const class good_test32 { int x_factor32; } x_32;
-static thread_local volatile class good_test33 { int x_factor33; } x_33;
-static thread_local const volatile class good_test34 { int x_factor34; } x_34;
-static thread_local volatile const class good_test35 { int x_factor35; } x_35;
-thread_local static class good_test36 { int x_factor36; } x_36;
-thread_local static const class good_test37 { int x_factor37; } x_37;
-thread_local static volatile class good_test38 { int x_factor38; } x_38;
-thread_local static const volatile class good_test39 { int x_factor39; } x_39;
-thread_local static volatile const class good_test40 { int x_factor40; } x_40;
+static thread_local class good_test33 { int x_factor33; } x_33;
+static thread_local const class good_test34 { int x_factor34; } x_34;
+static thread_local volatile class good_test35 { int x_factor35; } x_35;
+static thread_local const volatile class good_test36 { int x_factor36; } x_36;
+static thread_local volatile const class good_test37 { int x_factor37; } x_37;
+thread_local static class good_test38 { int x_factor38; } x_38;
+thread_local static const class good_test39 { int x_factor39; } x_39;
+thread_local static volatile class good_test40 { int x_factor40; } x_40;
+thread_local static const volatile class good_test41 { int x_factor41; } x_41;
+thread_local static volatile const class good_test42 { int x_factor42; } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local class good_test41 { int x_factor41; } x_41;
-const extern thread_local class good_test42 { int x_factor42; } x_42;
-extern volatile thread_local class good_test43 { int x_factor43; } x_43;
-volatile extern thread_local class good_test44 { int x_factor44; } x_44;
-extern const thread_local volatile class good_test45 { int x_factor45; } x_45;
-extern const volatile thread_local class good_test46 { int x_factor46; } x_46;
-const extern thread_local volatile class good_test47 { int x_factor47; } x_47;
-const extern volatile thread_local class good_test48 { int x_factor48; } x_48;
-const volatile extern thread_local class good_test49 { int x_factor49; } x_49;
-extern volatile thread_local const class good_test50 { int x_factor50; } x_50;
-extern volatile const thread_local class good_test51 { int x_factor51; } x_51;
-volatile extern thread_local const class good_test52 { int x_factor52; } x_52;
-volatile extern const thread_local class good_test53 { int x_factor53; } x_53;
-volatile const extern thread_local class good_test54 { int x_factor54; } x_54;
-thread_local const extern class good_test55 { int x_factor55; } x_55;
-const thread_local extern class good_test56 { int x_factor56; } x_56;
-thread_local volatile extern class good_test57 { int x_factor57; } x_57;
-volatile thread_local extern class good_test58 { int x_factor58; } x_58;
-thread_local const extern volatile class good_test59 { int x_factor59; } x_59;
-thread_local const volatile extern class good_test60 { int x_factor60; } x_60;
-const thread_local extern volatile class good_test61 { int x_factor61; } x_61;
-const thread_local volatile extern class good_test62 { int x_factor62; } x_62;
-const volatile thread_local extern class good_test63 { int x_factor63; } x_63;
-thread_local volatile extern const class good_test64 { int x_factor64; } x_64;
-thread_local volatile const extern class good_test65 { int x_factor65; } x_65;
-volatile thread_local extern const class good_test66 { int x_factor66; } x_66;
-volatile thread_local const extern class good_test67 { int x_factor67; } x_67;
-volatile const thread_local extern class good_test68 { int x_factor68; } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local class good_test43 { int x_factor43; } x_43;
+const extern thread_local class good_test44 { int x_factor44; } x_44;
+extern volatile thread_local class good_test45 { int x_factor45; } x_45;
+volatile extern thread_local class good_test46 { int x_factor46; } x_46;
+extern const thread_local volatile class good_test47 { int x_factor47; } x_47;
+extern const volatile thread_local class good_test48 { int x_factor48; } x_48;
+const extern thread_local volatile class good_test49 { int x_factor49; } x_49;
+const extern volatile thread_local class good_test50 { int x_factor50; } x_50;
+const volatile extern thread_local class good_test51 { int x_factor51; } x_51;
+extern volatile thread_local const class good_test52 { int x_factor52; } x_52;
+extern volatile const thread_local class good_test53 { int x_factor53; } x_53;
+volatile extern thread_local const class good_test54 { int x_factor54; } x_54;
+volatile extern const thread_local class good_test55 { int x_factor55; } x_55;
+volatile const extern thread_local class good_test56 { int x_factor56; } x_56;
+thread_local const extern class good_test57 { int x_factor57; } x_57;
+const thread_local extern class good_test58 { int x_factor58; } x_58;
+thread_local volatile extern class good_test59 { int x_factor59; } x_59;
+volatile thread_local extern class good_test60 { int x_factor60; } x_60;
+thread_local const extern volatile class good_test61 { int x_factor61; } x_61;
+thread_local const volatile extern class good_test62 { int x_factor62; } x_62;
+const thread_local extern volatile class good_test63 { int x_factor63; } x_63;
+const thread_local volatile extern class good_test64 { int x_factor64; } x_64;
+const volatile thread_local extern class good_test65 { int x_factor65; } x_65;
+thread_local volatile extern const class good_test66 { int x_factor66; } x_66;
+thread_local volatile const extern class good_test67 { int x_factor67; } x_67;
+volatile thread_local extern const class good_test68 { int x_factor68; } x_68;
+volatile thread_local const extern class good_test69 { int x_factor69; } x_69;
+volatile const thread_local extern class good_test70 { int x_factor70; } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local class good_test69 { int x_factor69; } x_69;
-const static thread_local class good_test70 { int x_factor70; } x_70;
-static volatile thread_local class good_test71 { int x_factor71; } x_71;
-volatile static thread_local class good_test72 { int x_factor72; } x_72;
-static const thread_local volatile class good_test73 { int x_factor73; } x_73;
-static const volatile thread_local class good_test74 { int x_factor74; } x_74;
-const static thread_local volatile class good_test75 { int x_factor75; } x_75;
-const static volatile thread_local class good_test76 { int x_factor76; } x_76;
-const volatile static thread_local class good_test77 { int x_factor77; } x_77;
-static volatile thread_local const class good_test78 { int x_factor78; } x_78;
-static volatile const thread_local class good_test79 { int x_factor79; } x_79;
-volatile static thread_local const class good_test80 { int x_factor80; } x_80;
-volatile static const thread_local class good_test81 { int x_factor81; } x_81;
-volatile const static thread_local class good_test82 { int x_factor82; } x_82;
-thread_local const static class good_test83 { int x_factor83; } x_83;
-const thread_local static class good_test84 { int x_factor84; } x_84;
-thread_local volatile static class good_test85 { int x_factor85; } x_85;
-volatile thread_local static class good_test86 { int x_factor86; } x_86;
-thread_local const static volatile class good_test87 { int x_factor87; } x_87;
-thread_local const volatile static class good_test88 { int x_factor88; } x_88;
-const thread_local static volatile class good_test89 { int x_factor89; } x_89;
-const thread_local volatile static class good_test90 { int x_factor90; } x_90;
-const volatile thread_local static class good_test91 { int x_factor91; } x_91;
-thread_local volatile static const class good_test92 { int x_factor92; } x_92;
-thread_local volatile const static class good_test93 { int x_factor93; } x_93;
-volatile thread_local static const class good_test94 { int x_factor94; } x_94;
-volatile thread_local const static class good_test95 { int x_factor95; } x_95;
-volatile const thread_local static class good_test96 { int x_factor96; } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local class good_test71 { int x_factor71; } x_71;
+const static thread_local class good_test72 { int x_factor72; } x_72;
+static volatile thread_local class good_test73 { int x_factor73; } x_73;
+volatile static thread_local class good_test74 { int x_factor74; } x_74;
+static const thread_local volatile class good_test75 { int x_factor75; } x_75;
+static const volatile thread_local class good_test76 { int x_factor76; } x_76;
+const static thread_local volatile class good_test77 { int x_factor77; } x_77;
+const static volatile thread_local class good_test78 { int x_factor78; } x_78;
+const volatile static thread_local class good_test79 { int x_factor79; } x_79;
+static volatile thread_local const class good_test80 { int x_factor80; } x_80;
+static volatile const thread_local class good_test81 { int x_factor81; } x_81;
+volatile static thread_local const class good_test82 { int x_factor82; } x_82;
+volatile static const thread_local class good_test83 { int x_factor83; } x_83;
+volatile const static thread_local class good_test84 { int x_factor84; } x_84;
+thread_local const static class good_test85 { int x_factor85; } x_85;
+const thread_local static class good_test86 { int x_factor86; } x_86;
+thread_local volatile static class good_test87 { int x_factor87; } x_87;
+volatile thread_local static class good_test88 { int x_factor88; } x_88;
+thread_local const static volatile class good_test89 { int x_factor89; } x_89;
+thread_local const volatile static class good_test90 { int x_factor90; } x_90;
+const thread_local static volatile class good_test91 { int x_factor91; } x_91;
+const thread_local volatile static class good_test92 { int x_factor92; } x_92;
+const volatile thread_local static class good_test93 { int x_factor93; } x_93;
+thread_local volatile static const class good_test94 { int x_factor94; } x_94;
+thread_local volatile const static class good_test95 { int x_factor95; } x_95;
+volatile thread_local static const class good_test96 { int x_factor96; } x_96;
+volatile thread_local const static class good_test97 { int x_factor97; } x_97;
+volatile const thread_local static class good_test98 { int x_factor98; } x_98;
 
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have no linkage in C, external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(x_70),"x_70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(x_98),"x_98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_class_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_def2.hpp	2011-09-03 22:59:14 UTC (rev 693)
+++ trunk/tests/zcc/decl.C99/Pass_class_def2.hpp	2011-09-03 22:59:46 UTC (rev 694)
@@ -1,4 +1,5 @@
 // decl.C99/Pass_class_def2.hpp
+// (C)2009,2011 Kenneth Boyd, license: MIT.txt
 // using singly defined class
 
 class good_test {
@@ -14,108 +15,109 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 // check that things work properly in namespaces
 namespace test {
@@ -132,108 +134,109 @@
 extern volatile const class good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static class good_test x6;
-static volatile class good_test x7;
-static const volatile class good_test x8;
-static volatile const class good_test x9;
+static const class good_test x7;
+static volatile class good_test x8;
+static const volatile class good_test x9;
+static volatile const class good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern class good_test x10;
-volatile extern class good_test x11;
-const extern volatile class good_test x12;
-const volatile extern class good_test x13;
-volatile extern const class good_test x14;
-volatile const extern class good_test x15;
-volatile static class good_test x16;
-const static volatile class good_test x17;
-const volatile static class good_test x18;
-volatile static const class good_test x19;
-volatile const static class good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern class good_test x11;
+volatile extern class good_test x12;
+const extern volatile class good_test x13;
+const volatile extern class good_test x14;
+volatile extern const class good_test x15;
+volatile const extern class good_test x16;
+const static class good_test x17;
+volatile static class good_test x18;
+const static volatile class good_test x19;
+const volatile static class good_test x20;
+volatile static const class good_test x21;
+volatile const static class good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local class good_test x21;
-extern thread_local const class good_test x22;
-extern thread_local volatile class good_test x23;
-extern thread_local const volatile class good_test x24;
-extern thread_local volatile const class good_test x25;
-thread_local extern class good_test x26;
-thread_local extern const class good_test x27;
-thread_local extern volatile class good_test x28;
-thread_local extern const volatile class good_test x29;
-thread_local extern volatile const class good_test x30;
+extern thread_local class good_test x23;
+extern thread_local const class good_test x24;
+extern thread_local volatile class good_test x25;
+extern thread_local const volatile class good_test x26;
+extern thread_local volatile const class good_test x27;
+thread_local extern class good_test x28;
+thread_local extern const class good_test x29;
+thread_local extern volatile class good_test x30;
+thread_local extern const volatile class good_test x31;
+thread_local extern volatile const class good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local class good_test x31;
-static thread_local const class good_test x32;
-static thread_local volatile class good_test x33;
-static thread_local const volatile class good_test x34;
-static thread_local volatile const class good_test x35;
-thread_local static class good_test x36;
-thread_local static const class good_test x37;
-thread_local static volatile class good_test x38;
-thread_local static const volatile class good_test x39;
-thread_local static volatile const class good_test x40;
+static thread_local class good_test x33;
+static thread_local const class good_test x34;
+static thread_local volatile class good_test x35;
+static thread_local const volatile class good_test x36;
+static thread_local volatile const class good_test x37;
+thread_local static class good_test x38;
+thread_local static const class good_test x39;
+thread_local static volatile class good_test x40;
+thread_local static const volatile class good_test x41;
+thread_local static volatile const class good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local class good_test x41;
-const extern thread_local class good_test x42;
-extern volatile thread_local class good_test x43;
-volatile extern thread_local class good_test x44;
-extern const thread_local volatile class good_test x45;
-extern const volatile thread_local class good_test x46;
-const extern thread_local volatile class good_test x47;
-const extern volatile thread_local class good_test x48;
-const volatile extern thread_local class good_test x49;
-extern volatile thread_local const class good_test x50;
-extern volatile const thread_local class good_test x51;
-volatile extern thread_local const class good_test x52;
-volatile extern const thread_local class good_test x53;
-volatile const extern thread_local class good_test x54;
-thread_local const extern class good_test x55;
-const thread_local extern class good_test x56;
-thread_local volatile extern class good_test x57;
-volatile thread_local extern class good_test x58;
-thread_local const extern volatile class good_test x59;
-thread_local const volatile extern class good_test x60;
-const thread_local extern volatile class good_test x61;
-const thread_local volatile extern class good_test x62;
-const volatile thread_local extern class good_test x63;
-thread_local volatile extern const class good_test x64;
-thread_local volatile const extern class good_test x65;
-volatile thread_local extern const class good_test x66;
-volatile thread_local const extern class good_test x67;
-volatile const thread_local extern class good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local class good_test x43;
+const extern thread_local class good_test x44;
+extern volatile thread_local class good_test x45;
+volatile extern thread_local class good_test x46;
+extern const thread_local volatile class good_test x47;
+extern const volatile thread_local class good_test x48;
+const extern thread_local volatile class good_test x49;
+const extern volatile thread_local class good_test x50;
+const volatile extern thread_local class good_test x51;
+extern volatile thread_local const class good_test x52;
+extern volatile const thread_local class good_test x53;
+volatile extern thread_local const class good_test x54;
+volatile extern const thread_local class good_test x55;
+volatile const extern thread_local class good_test x56;
+thread_local const extern class good_test x57;
+const thread_local extern class good_test x58;
+thread_local volatile extern class good_test x59;
+volatile thread_local extern class good_test x60;
+thread_local const extern volatile class good_test x61;
+thread_local const volatile extern class good_test x62;
+const thread_local extern volatile class good_test x63;
+const thread_local volatile extern class good_test x64;
+const volatile thread_local extern class good_test x65;
+thread_local volatile extern const class good_test x66;
+thread_local volatile const extern class good_test x67;
+volatile thread_local extern const class good_test x68;
+volatile thread_local const extern class good_test x69;
+volatile const thread_local extern class good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local class good_test x69;
-const static thread_local class good_test x70;
-static volatile thread_local class good_test x71;
-volatile static thread_local class good_test x72;
-static const thread_local volatile class good_test x73;
-static const volatile thread_local class good_test x74;
-const static thread_local volatile class good_test x75;
-const static volatile thread_local class good_test x76;
-const volatile static thread_local class good_test x77;
-static volatile thread_local const class good_test x78;
-static volatile const thread_local class good_test x79;
-volatile static thread_local const class good_test x80;
-volatile static const thread_local class good_test x81;
-volatile const static thread_local class good_test x82;
-thread_local const static class good_test x83;
-const thread_local static class good_test x84;
-thread_local volatile static class good_test x85;
-volatile thread_local static class good_test x86;
-thread_local const static volatile class good_test x87;
-thread_local const volatile static class good_test x88;
-const thread_local static volatile class good_test x89;
-const thread_local volatile static class good_test x90;
-const volatile thread_local static class good_test x91;
-thread_local volatile static const class good_test x92;
-thread_local volatile const static class good_test x93;
-volatile thread_local static const class good_test x94;
-volatile thread_local const static class good_test x95;
-volatile const thread_local static class good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local class good_test x71;
+const static thread_local class good_test x72;
+static volatile thread_local class good_test x73;
+volatile static thread_local class good_test x74;
+static const thread_local volatile class good_test x75;
+static const volatile thread_local class good_test x76;
+const static thread_local volatile class good_test x77;
+const static volatile thread_local class good_test x78;
+const volatile static thread_local class good_test x79;
+static volatile thread_local const class good_test x80;
+static volatile const thread_local class good_test x81;
+volatile static thread_local const class good_test x82;
+volatile static const thread_local class good_test x83;
+volatile const static thread_local class good_test x84;
+thread_local const static class good_test x85;
+const thread_local static class good_test x86;
+thread_local volatile static class good_test x87;
+volatile thread_local static class good_test x88;
+thread_local const static volatile class good_test x89;
+thread_local const volatile static class good_test x90;
+const thread_local static volatile class good_test x91;
+const thread_local volatile static class good_test x92;
+const volatile thread_local static class good_test x93;
+thread_local volatile static const class good_test x94;
+thread_local volatile const static class good_test x95;
+volatile thread_local static const class good_test x96;
+volatile thread_local const static class good_test x97;
+volatile const thread_local static class good_test x98;
 
 // define-declares
 // ringing the changes on extern
@@ -244,108 +247,109 @@
 extern volatile const class good_test5 { int x_factor5; } x_5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static class good_test6 { int x_factor6; } x_6;
-static volatile class good_test7 { int x_factor7; } x_7;
-static const volatile class good_test8 { int x_factor8; } x_8;
-static volatile const class good_test9 { int x_factor9; } x_9;
+static const class good_test7 { int x_factor7; } x_7;
+static volatile class good_test8 { int x_factor8; } x_8;
+static const volatile class good_test9 { int x_factor9; } x_9;
+static volatile const class good_test10 { int x_factor10; } x_10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern class good_test10 { int x_factor10; } x_10;
-volatile extern class good_test11 { int x_factor11; } x_11;
-const extern volatile class good_test12 { int x_factor12; } x_12;
-const volatile extern class good_test13 { int x_factor13; } x_13;
-volatile extern const class good_test14 { int x_factor14; } x_14;
-volatile const extern class good_test15 { int x_factor15; } x_15;
-volatile static class good_test16 { int x_factor16; } x_16;
-const static volatile class good_test17 { int x_factor17; } x_17;
-const volatile static class good_test18 { int x_factor18; } x_18;
-volatile static const class good_test19 { int x_factor19; } x_19;
-volatile const static class good_test20 { int x_factor20; } x_20;
+// extern/static not in first position is deprecated, but legal
+const extern class good_test11 { int x_factor11; } x_11;
+volatile extern class good_test12 { int x_factor12; } x_12;
+const extern volatile class good_test13 { int x_factor13; } x_13;
+const volatile extern class good_test14 { int x_factor14; } x_14;
+volatile extern const class good_test15 { int x_factor15; } x_15;
+volatile const extern class good_test16 { int x_factor16; } x_16;
+const static class good_test17 { int x_factor17; } x_17;
+volatile static class good_test18 { int x_factor18; } x_18;
+const static volatile class good_test19 { int x_factor19; } x_19;
+const volatile static class good_test20 { int x_factor20; } x_20;
+volatile static const class good_test21 { int x_factor21; } x_21;
+volatile const static class good_test22 { int x_factor22; } x_22;
 
 // ringing the changes on thread_local extern
-extern thread_local class good_test21 { int x_factor21; } x_21;
-extern thread_local const class good_test22 { int x_factor22; } x_22;
-extern thread_local volatile class good_test23 { int x_factor23; } x_23;
-extern thread_local const volatile class good_test24 { int x_factor24; } x_24;
-extern thread_local volatile const class good_test25 { int x_factor25; } x_25;
-thread_local extern class good_test26 { int x_factor26; } x_26;
-thread_local extern const class good_test27 { int x_factor27; } x_27;
-thread_local extern volatile class good_test28 { int x_factor28; } x_28;
-thread_local extern const volatile class good_test29 { int x_factor29; } x_29;
-thread_local extern volatile const class good_test30 { int x_factor30; } x_30;
+extern thread_local class good_test23 { int x_factor23; } x_23;
+extern thread_local const class good_test24 { int x_factor24; } x_24;
+extern thread_local volatile class good_test25 { int x_factor25; } x_25;
+extern thread_local const volatile class good_test26 { int x_factor26; } x_26;
+extern thread_local volatile const class good_test27 { int x_factor27; } x_27;
+thread_local extern class good_test28 { int x_factor28; } x_28;
+thread_local extern const class good_test29 { int x_factor29; } x_29;
+thread_local extern volatile class good_test30 { int x_factor30; } x_30;
+thread_local extern const volatile class good_test31 { int x_factor31; } x_31;
+thread_local extern volatile const class good_test32 { int x_factor32; } x_32;
 
 // ringing the changes on thread_local static
-static thread_local class good_test31 { int x_factor31; } x_31;
-static thread_local const class good_test32 { int x_factor32; } x_32;
-static thread_local volatile class good_test33 { int x_factor33; } x_33;
-static thread_local const volatile class good_test34 { int x_factor34; } x_34;
-static thread_local volatile const class good_test35 { int x_factor35; } x_35;
-thread_local static class good_test36 { int x_factor36; } x_36;
-thread_local static const class good_test37 { int x_factor37; } x_37;
-thread_local static volatile class good_test38 { int x_factor38; } x_38;
-thread_local static const volatile class good_test39 { int x_factor39; } x_39;
-thread_local static volatile const class good_test40 { int x_factor40; } x_40;
+static thread_local class good_test33 { int x_factor33; } x_33;
+static thread_local const class good_test34 { int x_factor34; } x_34;
+static thread_local volatile class good_test35 { int x_factor35; } x_35;
+static thread_local const volatile class good_test36 { int x_factor36; } x_36;
+static thread_local volatile const class good_test37 { int x_factor37; } x_37;
+thread_local static class good_test38 { int x_factor38; } x_38;
+thread_local static const class good_test39 { int x_factor39; } x_39;
+thread_local static volatile class good_test40 { int x_factor40; } x_40;
+thread_local static const volatile class good_test41 { int x_factor41; } x_41;
+thread_local static volatile const class good_test42 { int x_factor42; } x_42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local class good_test41 { int x_factor41; } x_41;
-const extern thread_local class good_test42 { int x_factor42; } x_42;
-extern volatile thread_local class good_test43 { int x_factor43; } x_43;
-volatile extern thread_local class good_test44 { int x_factor44; } x_44;
-extern const thread_local volatile class good_test45 { int x_factor45; } x_45;
-extern const volatile thread_local class good_test46 { int x_factor46; } x_46;
-const extern thread_local volatile class good_test47 { int x_factor47; } x_47;
-const extern volatile thread_local class good_test48 { int x_factor48; } x_48;
-const volatile extern thread_local class good_test49 { int x_factor49; } x_49;
-extern volatile thread_local const class good_test50 { int x_factor50; } x_50;
-extern volatile const thread_local class good_test51 { int x_factor51; } x_51;
-volatile extern thread_local const class good_test52 { int x_factor52; } x_52;
-volatile extern const thread_local class good_test53 { int x_factor53; } x_53;
-volatile const extern thread_local class good_test54 { int x_factor54; } x_54;
-thread_local const extern class good_test55 { int x_factor55; } x_55;
-const thread_local extern class good_test56 { int x_factor56; } x_56;
-thread_local volatile extern class good_test57 { int x_factor57; } x_57;
-volatile thread_local extern class good_test58 { int x_factor58; } x_58;
-thread_local const extern volatile class good_test59 { int x_factor59; } x_59;
-thread_local const volatile extern class good_test60 { int x_factor60; } x_60;
-const thread_local extern volatile class good_test61 { int x_factor61; } x_61;
-const thread_local volatile extern class good_test62 { int x_factor62; } x_62;
-const volatile thread_local extern class good_test63 { int x_factor63; } x_63;
-thread_local volatile extern const class good_test64 { int x_factor64; } x_64;
-thread_local volatile const extern class good_test65 { int x_factor65; } x_65;
-volatile thread_local extern const class good_test66 { int x_factor66; } x_66;
-volatile thread_local const extern class good_test67 { int x_factor67; } x_67;
-volatile const thread_local extern class good_test68 { int x_factor68; } x_68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local class good_test43 { int x_factor43; } x_43;
+const extern thread_local class good_test44 { int x_factor44; } x_44;
+extern volatile thread_local class good_test45 { int x_factor45; } x_45;
+volatile extern thread_local class good_test46 { int x_factor46; } x_46;
+extern const thread_local volatile class good_test47 { int x_factor47; } x_47;
+extern const volatile thread_local class good_test48 { int x_factor48; } x_48;
+const extern thread_local volatile class good_test49 { int x_factor49; } x_49;
+const extern volatile thread_local class good_test50 { int x_factor50; } x_50;
+const volatile extern thread_local class good_test51 { int x_factor51; } x_51;
+extern volatile thread_local const class good_test52 { int x_factor52; } x_52;
+extern volatile const thread_local class good_test53 { int x_factor53; } x_53;
+volatile extern thread_local const class good_test54 { int x_factor54; } x_54;
+volatile extern const thread_local class good_test55 { int x_factor55; } x_55;
+volatile const extern thread_local class good_test56 { int x_factor56; } x_56;
+thread_local const extern class good_test57 { int x_factor57; } x_57;
+const thread_local extern class good_test58 { int x_factor58; } x_58;
+thread_local volatile extern class good_test59 { int x_factor59; } x_59;
+volatile thread_local extern class good_test60 { int x_factor60; } x_60;
+thread_local const extern volatile class good_test61 { int x_factor61; } x_61;
+thread_local const volatile extern class good_test62 { int x_factor62; } x_62;
+const thread_local extern volatile class good_test63 { int x_factor63; } x_63;
+const thread_local volatile extern class good_test64 { int x_factor64; } x_64;
+const volatile thread_local extern class good_test65 { int x_factor65; } x_65;
+thread_local volatile extern const class good_test66 { int x_factor66; } x_66;
+thread_local volatile const extern class good_test67 { int x_factor67; } x_67;
+volatile thread_local extern const class good_test68 { int x_factor68; } x_68;
+volatile thread_local const extern class good_test69 { int x_factor69; } x_69;
+volatile const thread_local extern class good_test70 { int x_factor70; } x_70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local class good_test69 { int x_factor69; } x_69;
-const static thread_local class good_test70 { int x_factor70; } x_70;
-static volatile thread_local class good_test71 { int x_factor71; } x_71;
-volatile static thread_local class good_test72 { int x_factor72; } x_72;
-static const thread_local volatile class good_test73 { int x_factor73; } x_73;
-static const volatile thread_local class good_test74 { int x_factor74; } x_74;
-const static thread_local volatile class good_test75 { int x_factor75; } x_75;
-const static volatile thread_local class good_test76 { int x_factor76; } x_76;
-const volatile static thread_local class good_test77 { int x_factor77; } x_77;
-static volatile thread_local const class good_test78 { int x_factor78; } x_78;
-static volatile const thread_local class good_test79 { int x_factor79; } x_79;
-volatile static thread_local const class good_test80 { int x_factor80; } x_80;
-volatile static const thread_local class good_test81 { int x_factor81; } x_81;
-volatile const static thread_local class good_test82 { int x_factor82; } x_82;
-thread_local const static class good_test83 { int x_factor83; } x_83;
-const thread_local static class good_test84 { int x_factor84; } x_84;
-thread_local volatile static class good_test85 { int x_factor85; } x_85;
-volatile thread_local static class good_test86 { int x_factor86; } x_86;
-thread_local const static volatile class good_test87 { int x_factor87; } x_87;
-thread_local const volatile static class good_test88 { int x_factor88; } x_88;
-const thread_local static volatile class good_test89 { int x_factor89; } x_89;
-const thread_local volatile static class good_test90 { int x_factor90; } x_90;
-const volatile thread_local static class good_test91 { int x_factor91; } x_91;
-thread_local volatile static const class good_test92 { int x_factor92; } x_92;
-thread_local volatile const static class good_test93 { int x_factor93; } x_93;
-volatile thread_local static const class good_test94 { int x_factor94; } x_94;
-volatile thread_local const static class good_test95 { int x_factor95; } x_95;
-volatile const thread_local static class good_test96 { int x_factor96; } x_96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local class good_test71 { int x_factor71; } x_71;
+const static thread_local class good_test72 { int x_factor72; } x_72;
+static volatile thread_local class good_test73 { int x_factor73; } x_73;
+volatile static thread_local class good_test74 { int x_factor74; } x_74;
+static const thread_local volatile class good_test75 { int x_factor75; } x_75;
+static const volatile thread_local class good_test76 { int x_factor76; } x_76;
+const static thread_local volatile class good_test77 { int x_factor77; } x_77;
+const static volatile thread_local class good_test78 { int x_factor78; } x_78;
+const volatile static thread_local class good_test79 { int x_factor79; } x_79;
+static volatile thread_local const class good_test80 { int x_factor80; } x_80;
+static volatile const thread_local class good_test81 { int x_factor81; } x_81;
+volatile static thread_local const class good_test82 { int x_factor82; } x_82;
+volatile static const thread_local class good_test83 { int x_factor83; } x_83;
+volatile const static thread_local class good_test84 { int x_factor84; } x_84;
+thread_local const static class good_test85 { int x_factor85; } x_85;
+const thread_local static class good_test86 { int x_factor86; } x_86;
+thread_local volatile static class good_test87 { int x_factor87; } x_87;
+volatile thread_local static class good_test88 { int x_factor88; } x_88;
+thread_local const static volatile class good_test89 { int x_factor89; } x_89;
+thread_local const volatile static class good_test90 { int x_factor90; } x_90;
+const thread_local static volatile class good_test91 { int x_factor91; } x_91;
+const thread_local volatile static class good_test92 { int x_factor92; } x_92;
+const volatile thread_local static class good_test93 { int x_factor93; } x_93;
+thread_local volatile static const class good_test94 { int x_factor94; } x_94;
+thread_local volatile const static class good_test95 { int x_factor95; } x_95;
+volatile thread_local static const class good_test96 { int x_factor96; } x_96;
+volatile thread_local const static class good_test97 { int x_factor97; } x_97;
+volatile const thread_local static class good_test98 { int x_factor98; } x_98;
 
 }	// end namespace test
 
@@ -364,107 +368,108 @@
 extern volatile const good_test x5;
 
 // ringing the changes on static
-// (don't test static const -- no chance to initialize before use)
 static good_test x6;
-static volatile good_test x7;
-static const volatile good_test x8;
-static volatile const good_test x9;
+static const good_test x7;
+static volatile good_test x8;
+static const volatile good_test x9;
+static volatile const good_test x10;
 
-// extern/static not in first postion is deprecated, but legal
-const extern good_test x10;
-volatile extern good_test x11;
-const extern volatile good_test x12;
-const volatile extern good_test x13;
-volatile extern const good_test x14;
-volatile const extern good_test x15;
-volatile static good_test x16;
-const static volatile good_test x17;
-const volatile static good_test x18;
-volatile static const good_test x19;
-volatile const static good_test x20;
+// extern/static not in first position is deprecated, but legal
+const extern good_test x11;
+volatile extern good_test x12;
+const extern volatile good_test x13;
+const volatile extern good_test x14;
+volatile extern const good_test x15;
+volatile const extern good_test x16;
+const static good_test x17;
+volatile static good_test x18;
+const static volatile good_test x19;
+const volatile static good_test x20;
+volatile static const good_test x21;
+volatile const static good_test x22;
 
 // ringing the changes on thread_local extern
-extern thread_local good_test x21;
-extern thread_local const good_test x22;
-extern thread_local volatile good_test x23;
-extern thread_local const volatile good_test x24;
-extern thread_local volatile const good_test x25;
-thread_local extern good_test x26;
-thread_local extern const good_test x27;
-thread_local extern volatile good_test x28;
-thread_local extern const volatile good_test x29;
-thread_local extern volatile const good_test x30;
+extern thread_local good_test x23;
+extern thread_local const good_test x24;
+extern thread_local volatile good_test x25;
+extern thread_local const volatile good_test x26;
+extern thread_local volatile const good_test x27;
+thread_local extern good_test x28;
+thread_local extern const good_test x29;
+thread_local extern volatile good_test x30;
+thread_local extern const volatile good_test x31;
+thread_local extern volatile const good_test x32;
 
 // ringing the changes on thread_local static
-static thread_local good_test x31;
-static thread_local const good_test x32;
-static thread_local volatile good_test x33;
-static thread_local const volatile good_test x34;
-static thread_local volatile const good_test x35;
-thread_local static good_test x36;
-thread_local static const good_test x37;
-thread_local static volatile good_test x38;
-thread_local static const volatile good_test x39;
-thread_local static volatile const good_test x40;
+static thread_local good_test x33;
+static thread_local const good_test x34;
+static thread_local volatile good_test x35;
+static thread_local const volatile good_test x36;
+static thread_local volatile const good_test x37;
+thread_local static good_test x38;
+thread_local static const good_test x39;
+thread_local static volatile good_test x40;
+thread_local static const volatile good_test x41;
+thread_local static volatile const good_test x42;
 
-// thread_local extern not in first two postions is deprecated, but legal
-extern const thread_local good_test x41;
-const extern thread_local good_test x42;
-extern volatile thread_local good_test x43;
-volatile extern thread_local good_test x44;
-extern const thread_local volatile good_test x45;
-extern const volatile thread_local good_test x46;
-const extern thread_local volatile good_test x47;
-const extern volatile thread_local good_test x48;
-const volatile extern thread_local good_test x49;
-extern volatile thread_local const good_test x50;
-extern volatile const thread_local good_test x51;
-volatile extern thread_local const good_test x52;
-volatile extern const thread_local good_test x53;
-volatile const extern thread_local good_test x54;
-thread_local const extern good_test x55;
-const thread_local extern good_test x56;
-thread_local volatile extern good_test x57;
-volatile thread_local extern good_test x58;
-thread_local const extern volatile good_test x59;
-thread_local const volatile extern good_test x60;
-const thread_local extern volatile good_test x61;
-const thread_local volatile extern good_test x62;
-const volatile thread_local extern good_test x63;
-thread_local volatile extern const good_test x64;
-thread_local volatile const extern good_test x65;
-volatile thread_local extern const good_test x66;
-volatile thread_local const extern good_test x67;
-volatile const thread_local extern good_test x68;
+// thread_local extern not in first two positions is deprecated, but legal
+extern const thread_local good_test x43;
+const extern thread_local good_test x44;
+extern volatile thread_local good_test x45;
+volatile extern thread_local good_test x46;
+extern const thread_local volatile good_test x47;
+extern const volatile thread_local good_test x48;
+const extern thread_local volatile good_test x49;
+const extern volatile thread_local good_test x50;
+const volatile extern thread_local good_test x51;
+extern volatile thread_local const good_test x52;
+extern volatile const thread_local good_test x53;
+volatile extern thread_local const good_test x54;
+volatile extern const thread_local good_test x55;
+volatile const extern thread_local good_test x56;
+thread_local const extern good_test x57;
+const thread_local extern good_test x58;
+thread_local volatile extern good_test x59;
+volatile thread_local extern good_test x60;
+thread_local const extern volatile good_test x61;
+thread_local const volatile extern good_test x62;
+const thread_local extern volatile good_test x63;
+const thread_local volatile extern good_test x64;
+const volatile thread_local extern good_test x65;
+thread_local volatile extern const good_test x66;
+thread_local volatile const extern good_test x67;
+volatile thread_local extern const good_test x68;
+volatile thread_local const extern good_test x69;
+volatile const thread_local extern good_test x70;
 
-// thread_local static not in first two postions is deprecated, but legal
-static const thread_local good_test x69;
-const static thread_local good_test x70;
-static volatile thread_local good_test x71;
-volatile static thread_local good_test x72;
-static const thread_local volatile good_test x73;
-static const volatile thread_local good_test x74;
-const static thread_local volatile good_test x75;
-const static volatile thread_local good_test x76;
-const volatile static thread_local good_test x77;
-static volatile thread_local const good_test x78;
-static volatile const thread_local good_test x79;
-volatile static thread_local const good_test x80;
-volatile static const thread_local good_test x81;
-volatile const static thread_local good_test x82;
-thread_local const static good_test x83;
-const thread_local static good_test x84;
-thread_local volatile static good_test x85;
-volatile thread_local static good_test x86;
-thread_local const static volatile good_test x87;
-thread_local const volatile static good_test x88;
-const thread_local static volatile good_test x89;
-const thread_local volatile static good_test x90;
-const volatile thread_local static good_test x91;
-thread_local volatile static const good_test x92;
-thread_local volatile const static good_test x93;
-volatile thread_local static const good_test x94;
-volatile thread_local const static good_test x95;
-volatile const thread_local static good_test x96;
+// thread_local static not in first two positions is deprecated, but legal
+static const thread_local good_test x71;
+const static thread_local good_test x72;
+static volatile thread_local good_test x73;
+volatile static thread_local good_test x74;
+static const thread_local volatile good_test x75;
+static const volatile thread_local good_test x76;
+const static thread_local volatile good_test x77;
+const static volatile thread_local good_test x78;
+const volatile static thread_local good_test x79;
+static volatile thread_local const good_test x80;
+static volatile const thread_local good_test x81;
+volatile static thread_local const good_test x82;
+volatile static const thread_local good_test x83;
+volatile const static thread_local good_test x84;
+thread_local const static good_test x85;
+const thread_local static good_test x86;
+thread_local volatile static good_test x87;
+volatile thread_local static good_test x88;
+thread_local const static volatile good_test x89;
+thread_local const volatile static good_test x90;
+const thread_local static volatile good_test x91;
+const thread_local volatile static good_test x92;
+const volatile thread_local static good_test x93;
+thread_local volatile static const good_test x94;
+thread_local volatile const static good_test x95;
+volatile thread_local static const good_test x96;
+volatile thread_local const static good_test x97;
+volatile const thread_local static good_test x98;
 
 }	// end namespace test2



From zaimoni at mail.berlios.de  Wed Sep 28 05:34:29 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Wed, 28 Sep 2011 05:34:29 +0200
Subject: [Zcplusplus-commits] r695 - trunk
Message-ID: <20110928033438.8A6C84813F0@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-28 05:34:26 +0200 (Wed, 28 Sep 2011)
New Revision: 695

Modified:
   trunk/CSupport.cpp
   trunk/CSupport.cpp.in
Log:
fix dereference-before-array when interpreting explicit global namespaced identifiers

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2011-09-03 22:59:46 UTC (rev 694)
+++ trunk/CSupport.cpp	2011-09-28 03:34:26 UTC (rev 695)
@@ -10979,7 +10979,7 @@
 		{
 		if (robust_token_is_string<2>(src.data<0>()[i],"::"))
 			{
-			const bool is_global = (0<i) && !CPP_ok_for_toplevel_qualified_name(src.data<0>()[i-1]);
+			const bool is_global = 0==i || !CPP_ok_for_toplevel_qualified_name(src.data<0>()[i-1]);
 			size_t resize_to = src.data<0>()[i].index_tokens[0].token.second;
 			size_t forward_span = 0;
 			bool last_scope = true;

Modified: trunk/CSupport.cpp.in
===================================================================
--- trunk/CSupport.cpp.in	2011-09-03 22:59:46 UTC (rev 694)
+++ trunk/CSupport.cpp.in	2011-09-28 03:34:26 UTC (rev 695)
@@ -11119,7 +11119,7 @@
 		{
 		if (robust_token_is_string<2>(src.data<0>()[i],"::"))
 			{
-			const bool is_global = (0<i) && !CPP_ok_for_toplevel_qualified_name(src.data<0>()[i-1]);
+			const bool is_global = 0==i || !CPP_ok_for_toplevel_qualified_name(src.data<0>()[i-1]);
 			size_t resize_to = src.data<0>()[i].index_tokens[0].token.second;
 			size_t forward_span = 0;
 			bool last_scope = true;



From zaimoni at mail.berlios.de  Wed Sep 28 06:47:04 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Wed, 28 Sep 2011 06:47:04 +0200
Subject: [Zcplusplus-commits] r696 - in trunk: tests/zcc/decl.C99 tools
Message-ID: <20110928044704.C5AC24813F0@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-28 06:47:04 +0200 (Wed, 28 Sep 2011)
New Revision: 696

Modified:
   trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp
   trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp
   trunk/tests/zcc/decl.C99/Pass_union_def2.hpp
   trunk/tools/decl_infile.py
Log:
update test case generator

Modified: trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp	2011-09-28 03:34:26 UTC (rev 695)
+++ trunk/tests/zcc/decl.C99/Pass_enum_def2.hpp	2011-09-28 04:47:04 UTC (rev 696)
@@ -473,3 +473,978 @@
 volatile const thread_local static good_test x98;
 
 }	// end namespace test2
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test88),"good_test88 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp	2011-09-28 03:34:26 UTC (rev 695)
+++ trunk/tests/zcc/decl.C99/Pass_struct_def2.hpp	2011-09-28 04:47:04 UTC (rev 696)
@@ -473,3 +473,978 @@
 volatile const thread_local static good_test x98;
 
 }	// end namespace test2
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test88),"good_test88 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tests/zcc/decl.C99/Pass_union_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_union_def2.hpp	2011-09-28 03:34:26 UTC (rev 695)
+++ trunk/tests/zcc/decl.C99/Pass_union_def2.hpp	2011-09-28 04:47:04 UTC (rev 696)
@@ -473,3 +473,978 @@
 volatile const thread_local static good_test x98;
 
 }	// end namespace test2
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test88),"good_test88 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x98),"x98 has incorrect linkage");
+#endif

Modified: trunk/tools/decl_infile.py
===================================================================
--- trunk/tools/decl_infile.py	2011-09-28 03:34:26 UTC (rev 695)
+++ trunk/tools/decl_infile.py	2011-09-28 04:47:04 UTC (rev 696)
@@ -569,6 +569,106 @@
 
 	TargetFile.write('}	// end namespace test2\n')
 
+#   this is only called for C++ test cases
+#	check ZCC compiler extensions
+	TargetFile.write('\n// check ZCC compiler extensions\n')
+	TargetFile.write('#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__\n')
+
+	TargetFile.write('// the type names should have external linkage in C++\n')
+	TargetFile.write('static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");\n')
+	TargetFile.write('static_assert(2==__zcc_linkage(::good_test),"good_test has incorrect linkage");\n')
+	TargetFile.write('static_assert(2==__zcc_linkage(test::good_test),"good_test has incorrect linkage");\n')
+	TargetFile.write('static_assert(2==__zcc_linkage(::test::good_test),"good_test has incorrect linkage");\n')
+	TargetFile.write('static_assert(2==__zcc_linkage(test2::good_test),"good_test has incorrect linkage");\n')
+	TargetFile.write('static_assert(2==__zcc_linkage(::test2::good_test),"good_test has incorrect linkage");\n')
+	for i in xrange(5+5+12+10+10+28+18):
+		TargetFile.write('static_assert(2==__zcc_linkage(test::good_test'+str(i+1)+'),"good_test'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::good_test'+str(i+1)+'),"good_test'+str(i+1)+' has incorrect linkage");\n')
+
+	TargetFile.write('\n// check external linkage of variables\n')	
+	for i in xrange(5):
+		TargetFile.write('static_assert(2==__zcc_linkage(x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x_'+str(i+1)+'),"x_'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x_'+str(i+1)+'),"x_'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test2::x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test2::x'+str(i+1)+'),"x'+str(i+1)+' has incorrect linkage");\n')
+
+	for i in xrange(6):
+		TargetFile.write('static_assert(2==__zcc_linkage(x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x_'+str(i+11)+'),"x_'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x_'+str(i+11)+'),"x_'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test2::x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test2::x'+str(i+11)+'),"x'+str(i+11)+' has incorrect linkage");\n')
+
+	for i in xrange(10):
+		TargetFile.write('static_assert(2==__zcc_linkage(x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x_'+str(i+23)+'),"x_'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x_'+str(i+23)+'),"x_'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test2::x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test2::x'+str(i+23)+'),"x'+str(i+23)+' has incorrect linkage");\n')
+
+	for i in xrange(28):
+		TargetFile.write('static_assert(2==__zcc_linkage(x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test::x_'+str(i+43)+'),"x_'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test::x_'+str(i+43)+'),"x_'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(test2::x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(2==__zcc_linkage(::test2::x'+str(i+43)+'),"x'+str(i+43)+' has incorrect linkage");\n')
+
+	TargetFile.write('\n// check internal linkage of variables\n')
+	for i in xrange(5):
+		TargetFile.write('static_assert(1==__zcc_linkage(x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x_'+str(i+6)+'),"x_'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x_'+str(i+6)+'),"x_'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test2::x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test2::x'+str(i+6)+'),"x'+str(i+6)+' has incorrect linkage");\n')
+
+	for i in xrange(6):
+		TargetFile.write('static_assert(1==__zcc_linkage(x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x_'+str(i+17)+'),"x_'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x_'+str(i+17)+'),"x_'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test2::x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test2::x'+str(i+17)+'),"x'+str(i+17)+' has incorrect linkage");\n')
+
+	for i in xrange(10):
+		TargetFile.write('static_assert(1==__zcc_linkage(x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x_'+str(i+33)+'),"x_'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x_'+str(i+33)+'),"x_'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test2::x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test2::x'+str(i+33)+'),"x'+str(i+33)+' has incorrect linkage");\n')
+
+	for i in xrange(28):
+		TargetFile.write('static_assert(1==__zcc_linkage(x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test::x_'+str(i+71)+'),"x_'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test::x_'+str(i+71)+'),"x_'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(test2::x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+		TargetFile.write('static_assert(1==__zcc_linkage(::test2::x'+str(i+71)+'),"x'+str(i+71)+' has incorrect linkage");\n')
+
+	TargetFile.write('#endif\n')
+
 	TargetFile.close()
 
 if __name__ == '__main__':



From zaimoni at mail.berlios.de  Thu Sep 29 22:14:32 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Thu, 29 Sep 2011 22:14:32 +0200
Subject: [Zcplusplus-commits] r697 - trunk
Message-ID: <20110929201432.449644813D1@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-29 22:14:31 +0200 (Thu, 29 Sep 2011)
New Revision: 697

Modified:
   trunk/ZParser.cpp
Log:
stage 3: object size reduction and indentation reduction

Modified: trunk/ZParser.cpp
===================================================================
--- trunk/ZParser.cpp	2011-09-28 04:47:04 UTC (rev 696)
+++ trunk/ZParser.cpp	2011-09-29 20:14:31 UTC (rev 697)
@@ -68,24 +68,22 @@
 		Token<char>& tmp_front = *TokenList.front();
 		lang.line_lex(tmp_front.data(), tmp_front.size(), pretokenized);
 
-		// handle unused relay keywords here
-		if (!pretokenized.empty())
+		// handle unused C preprocessor relay keywords here
+		if (!pretokenized.empty()
+			&& (Lang::C==lang_code || Lang::CPlusPlus==lang_code))
 			{
 			size_t i = pretokenized.size();
-			if (Lang::C==lang_code || Lang::CPlusPlus==lang_code)
-				do	{
-					--i;
-					const errr Idx = linear_find(tmp_front.data()+pretokenized[i].first, pretokenized[i].second,pragma_relay_keywords,PRAGMA_RELAY_KEYWORDS_STRICT_UB);
-					if (0<=Idx)
-						{	// permit any relay keywords that actually mean anything here
-						bool blacklist = true;
-						// allow #include <typeinfo> to turn off context-free syntax errors for typeid
-						if (RELAY_ZCC_ENABLE_TYPEID==Idx && Lang::CPlusPlus==lang_code) blacklist = false;
-						if (blacklist) pretokenized.DeleteIdx(i);
-						continue;			
-						}
-					}
-				while(0<i);
+			do	{
+				--i;
+				const errr Idx = linear_find(tmp_front.data()+pretokenized[i].first, pretokenized[i].second,pragma_relay_keywords,PRAGMA_RELAY_KEYWORDS_STRICT_UB);
+				if (0>Idx) continue;
+				// permit any relay keywords that actually mean anything here
+				bool blacklist = true;
+				// allow #include <typeinfo> to turn off context-free syntax errors for typeid
+				if (RELAY_ZCC_ENABLE_TYPEID==Idx && Lang::CPlusPlus==lang_code) blacklist = false;
+				if (blacklist) pretokenized.DeleteIdx(i);
+				}
+			while(0<i);
 			}
 
 		if (!pretokenized.empty())
@@ -183,17 +181,14 @@
 }
 
 void ZParser::debug_to_stderr(const autovalarray_ptr<parse_tree*>& x) const
-{
-	// need whitespace tokens here to force pretty-printing
-	if (debug_mode)
+{	// need whitespace tokens here to force pretty-printing
+	if (!debug_mode) return;
+	autovalarray_ptr<parse_tree*>::const_iterator iter = x.begin();
+	autovalarray_ptr<parse_tree*>::const_iterator const iter_end = x.end();
+	while(iter!=iter_end)
 		{
-		const size_t list_size = x.size();
-		size_t i = 0;
-		while(i<list_size)
-			{
-			assert(NULL!=x[i]);
-			INFORM(*x[i++]);
-			};
+		assert(!*iter);
+		INFORM(**(iter++));
 		};
 }
 



From zaimoni at mail.berlios.de  Fri Sep 30 02:00:06 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Fri, 30 Sep 2011 02:00:06 +0200
Subject: [Zcplusplus-commits] r698 - trunk
Message-ID: <20110930000007.346C6481468@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-30 02:00:06 +0200 (Fri, 30 Sep 2011)
New Revision: 698

Modified:
   trunk/CPreproc.cpp
   trunk/CPreproc.cpp.in
   trunk/CPreproc_pp.cpp
Log:
stage 3: lines of code reduction

Modified: trunk/CPreproc.cpp
===================================================================
--- trunk/CPreproc.cpp	2011-09-29 20:14:31 UTC (rev 697)
+++ trunk/CPreproc.cpp	2011-09-30 00:00:06 UTC (rev 698)
@@ -734,12 +734,7 @@
 	die_on_pp_errors();
 	if (TokenList.empty())
 		{	//! \todo make this more efficient by providing a global flush-all
-		const char* atom_string = string_from_index(0);
-		while(NULL!=atom_string)
-			{
-			deregister_index(0);
-			atom_string = string_from_index(0);
-			};
+		while(string_from_index(0)) deregister_index(0);
 		return true;
 		}
 
@@ -770,8 +765,7 @@
 	// check for unused atomic strings
 	{
 	size_t x = 0;
-	const char* atom_string = string_from_index(x);
-	while(NULL!=atom_string)
+	while(const char* atom_string = string_from_index(x))
 		{
 		bool string_used = false;
 		i = TokenList.size();
@@ -786,7 +780,6 @@
 			++x;
 		else
 			deregister_index(x);
-		atom_string = string_from_index(x);
 		};
 	}
 	return true;
@@ -3085,6 +3078,7 @@
 	// if we went invalid do not proceed further
 	if (x.flags & INVALID_DIRECTIVE_FLAG) return false;
 
+	// Hmm...intradirective_flush_identifiers_to_zero already called, this is redundant?
 	intradirective_flush_identifiers_to_zero(x,valid_directives[if_directive].second+2);
 
 	// ZCC should actually calculate the control expression completely to 0/1  Error reporting for this isn't particularly compatible with destructive-evaluate.
@@ -3829,18 +3823,16 @@
 
 static void _complete_string_character_literal_define(Token<char>& x, const Token<char>& src, size_t critical_offset, size_t first_token_len,const char delim, const char* const end_error)
 {
-	if (delim!=x.back())
-		{
-		message_header(src);
-		INC_INFORM(ERR_STR);
-		INC_INFORM("#define ");
-		INC_INFORM(src.data()+critical_offset,first_token_len);
-		INC_INFORM(" ends in an unterminated");
-		if ('L'==x.front()) INC_INFORM(" wide");
-		INFORM(end_error);
-		zcc_errors.inc_error();
-		x.append(delim);
-		}
+	if (delim==x.back()) return;
+	message_header(src);
+	INC_INFORM(ERR_STR);
+	INC_INFORM("#define ");
+	INC_INFORM(src.data()+critical_offset,first_token_len);
+	INC_INFORM(" ends in an unterminated");
+	if ('L'==x.front()) INC_INFORM(" wide");
+	INFORM(end_error);
+	zcc_errors.inc_error();
+	x.append(delim);
 }
 
 /*! 
@@ -3958,75 +3950,73 @@
 void
 CPreprocessor::debug_to_stderr(const autovalarray_ptr<Token<char>* >& TokenList,const autovalarray_ptr<char*>& macros_object, const autovalarray_ptr<Token<char>*>& macros_object_expansion, const autovalarray_ptr<char*>& macros_function, const autovalarray_ptr<Token<char>*>& macros_function_arglist, const autovalarray_ptr<Token<char>*>& macros_function_expansion,const autovalarray_ptr<char*>& locked_macros) const
 {	// need whitespace tokens here to force pretty-printing
-	if (debug_mode)
+	if (!debug_mode) return;
+	const size_t list_size = TokenList.size();
+	size_t i = 0;
+	while(i<list_size)
 		{
-		const size_t list_size = TokenList.size();
-		size_t i = 0;
-		while(i<list_size)
-			{
-			if (0<i && TokenList[i-1]->logical_line.first==TokenList[i]->logical_line.first && !strcmp(TokenList[i-1]->src_filename,TokenList[i]->src_filename) && lang.require_padding(TokenList[i-1]->back(),TokenList[i]->front()))
-				INC_INFORM(' ');
+		if (0<i && TokenList[i-1]->logical_line.first==TokenList[i]->logical_line.first && !strcmp(TokenList[i-1]->src_filename,TokenList[i]->src_filename) && lang.require_padding(TokenList[i-1]->back(),TokenList[i]->front()))
+			INC_INFORM(' ');
 
-			if (list_size<=i+1 || TokenList[i]->logical_line.first!=TokenList[i+1]->logical_line.first || strcmp(TokenList[i]->src_filename,TokenList[i+1]->src_filename))
-				INFORM(TokenList[i]->data());
-			else
-				INC_INFORM(TokenList[i]->data());
-			++i;
-			};
-		// dump macros and locked macros
-		INC_INFORM("#define __DATE__ ");
-		INFORM(date_buffer);
-		INC_INFORM("#define __TIME__ ");
-		INFORM(time_buffer);
-		INC_INFORM("#define __TIMESTAMP__ ");
-		INFORM(time_date_buffer);
-		i = 7;
-		while(i<macro_identifier_default_count)
+		if (list_size<=i+1 || TokenList[i]->logical_line.first!=TokenList[i+1]->logical_line.first || strcmp(TokenList[i]->src_filename,TokenList[i+1]->src_filename))
+			INFORM(TokenList[i]->data());
+		else
+			INC_INFORM(TokenList[i]->data());
+		++i;
+		};
+	// dump macros and locked macros
+	INC_INFORM("#define __DATE__ ");
+	INFORM(date_buffer);
+	INC_INFORM("#define __TIME__ ");
+	INFORM(time_buffer);
+	INC_INFORM("#define __TIMESTAMP__ ");
+	INFORM(time_date_buffer);
+	i = 7;
+	while(i<macro_identifier_default_count)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macro_identifier_default[i].first);
+		INC_INFORM(" ");
+		INFORM(macro_identifier_default[i].second);
+		++i;
+		};
+	const size_t object_macro_size = macros_object.size();
+	i = 0;
+	while(i<object_macro_size)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macros_object[i]);
+		if (macros_object_expansion[i])
 			{
-			INC_INFORM("#define ");
-			INC_INFORM(macro_identifier_default[i].first);
 			INC_INFORM(" ");
-			INFORM(macro_identifier_default[i].second);
-			++i;
-			};
-		const size_t object_macro_size = macros_object.size();
-		i = 0;
-		while(i<object_macro_size)
-			{
-			INC_INFORM("#define ");
-			INC_INFORM(macros_object[i]);
-			if (macros_object_expansion[i])
-				{
-				INC_INFORM(" ");
-				INFORM(macros_object_expansion[i]->data());
-				}
-			else
-				INC_INFORM("\n");
-			++i;
+			INFORM(macros_object_expansion[i]->data());
 			}
-		const size_t function_macro_size = macros_function.size();
-		i = 0;
-		while(i<function_macro_size)
+		else
+			INC_INFORM("\n");
+		++i;
+		}
+	const size_t function_macro_size = macros_function.size();
+	i = 0;
+	while(i<function_macro_size)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macros_function[i]);
+		INC_INFORM(macros_function_arglist[i]->data());
+		if (macros_function_expansion[i])
 			{
-			INC_INFORM("#define ");
-			INC_INFORM(macros_function[i]);
-			INC_INFORM(macros_function_arglist[i]->data());
-			if (macros_function_expansion[i])
-				{
-				INC_INFORM(" ");
-				INFORM(macros_function_expansion[i]->data());
-				}
-			else
-				INC_INFORM("\n");
-			++i;
+			INC_INFORM(" ");
+			INFORM(macros_function_expansion[i]->data());
 			}
-		const size_t locked_macro_size = locked_macros.size();
-		i = 0;
-		while(i<locked_macro_size)
-			{
-			INC_INFORM("#pragma ZCC lock ");
-			INFORM(locked_macros[i++]);
-			}
+		else
+			INC_INFORM("\n");
+		++i;
+		}
+	const size_t locked_macro_size = locked_macros.size();
+	i = 0;
+	while(i<locked_macro_size)
+		{
+		INC_INFORM("#pragma ZCC lock ");
+		INFORM(locked_macros[i++]);
 		};
 }
 
@@ -4470,7 +4460,6 @@
 	if (lang.line_lex_find(x.data(),x.size(),"#",sizeof("#")-1,pretokenized) || lang.line_lex_find(x.data(),x.size(),"%:",sizeof("%:")-1,pretokenized))
 		{
 		size_t i = 0;
-		bool created_ws = false;
 		while(pretokenized.size()-1>i)
 			{
 			if (detect_C_stringize_op(x.data()+pretokenized[i].first,pretokenized[i].second))
@@ -4483,7 +4472,6 @@
 					zcc_errors.inc_error();
 					memset(x.c_array()+pretokenized[i].first,' ',pretokenized[i].second);
 					pretokenized.DeleteIdx(i);
-					created_ws = true;
 					continue;
 					}
 				if (   C_TESTFLAG_IDENTIFIER!=pretokenized[i+1].third
@@ -4495,7 +4483,6 @@
 					zcc_errors.inc_error();
 					memset(x.c_array()+pretokenized[i].first,' ',pretokenized[i].second);
 					pretokenized.DeleteIdx(i);
-					created_ws = true;
 					continue;
 					}
 				}

Modified: trunk/CPreproc.cpp.in
===================================================================
--- trunk/CPreproc.cpp.in	2011-09-29 20:14:31 UTC (rev 697)
+++ trunk/CPreproc.cpp.in	2011-09-30 00:00:06 UTC (rev 698)
@@ -761,12 +761,7 @@
 	die_on_pp_errors();
 	if (TokenList.empty())
 		{	//! \todo make this more efficient by providing a global flush-all
-		const char* atom_string = string_from_index(0);
-		while(NULL!=atom_string)
-			{
-			deregister_index(0);
-			atom_string = string_from_index(0);
-			};
+		while(string_from_index(0)) deregister_index(0);
 		return true;
 		}
 
@@ -797,8 +792,7 @@
 	// check for unused atomic strings
 	{
 	size_t x = 0;
-	const char* atom_string = string_from_index(x);
-	while(NULL!=atom_string)
+	while(const char* atom_string = string_from_index(x))
 		{
 		bool string_used = false;
 		i = TokenList.size();
@@ -813,7 +807,6 @@
 			++x;
 		else
 			deregister_index(x);
-		atom_string = string_from_index(x);
 		};
 	}
 	return true;
@@ -3126,6 +3119,7 @@
 	// if we went invalid do not proceed further
 	if (x.flags & INVALID_DIRECTIVE_FLAG) return false;
 
+	// Hmm...intradirective_flush_identifiers_to_zero already called, this is redundant?
 	intradirective_flush_identifiers_to_zero(x,valid_directives[if_directive].second+2);
 
 	// ZCC should actually calculate the control expression completely to 0/1  Error reporting for this isn't particularly compatible with destructive-evaluate.
@@ -3875,18 +3869,16 @@
 
 static void _complete_string_character_literal_define(Token<char>& x, const Token<char>& src, size_t critical_offset, size_t first_token_len,const char delim, const char* const end_error)
 {
-	if (delim!=x.back())
-		{
-		message_header(src);
-		INC_INFORM(ERR_STR);
-		INC_INFORM("#define ");
-		INC_INFORM(src.data()+critical_offset,first_token_len);
-		INC_INFORM(" ends in an unterminated");
-		if ('L'==x.front()) INC_INFORM(" wide");
-		INFORM(end_error);
-		zcc_errors.inc_error();
-		x.append(delim);
-		}
+	if (delim==x.back()) return;
+	message_header(src);
+	INC_INFORM(ERR_STR);
+	INC_INFORM("#define ");
+	INC_INFORM(src.data()+critical_offset,first_token_len);
+	INC_INFORM(" ends in an unterminated");
+	if ('L'==x.front()) INC_INFORM(" wide");
+	INFORM(end_error);
+	zcc_errors.inc_error();
+	x.append(delim);
 }
 
 /*! 
@@ -4004,75 +3996,73 @@
 void
 CPreprocessor::debug_to_stderr(const autovalarray_ptr<Token<char>* >& TokenList,const autovalarray_ptr<char*>& macros_object, const autovalarray_ptr<Token<char>*>& macros_object_expansion, const autovalarray_ptr<char*>& macros_function, const autovalarray_ptr<Token<char>*>& macros_function_arglist, const autovalarray_ptr<Token<char>*>& macros_function_expansion,const autovalarray_ptr<char*>& locked_macros) const
 {	// need whitespace tokens here to force pretty-printing
-	if (debug_mode)
+	if (!debug_mode) return;
+	const size_t list_size = TokenList.size();
+	size_t i = 0;
+	while(i<list_size)
 		{
-		const size_t list_size = TokenList.size();
-		size_t i = 0;
-		while(i<list_size)
-			{
-			if (0<i && TokenList[i-1]->logical_line.first==TokenList[i]->logical_line.first && !strcmp(TokenList[i-1]->src_filename,TokenList[i]->src_filename) && lang.require_padding(TokenList[i-1]->back(),TokenList[i]->front()))
-				INC_INFORM(' ');
+		if (0<i && TokenList[i-1]->logical_line.first==TokenList[i]->logical_line.first && !strcmp(TokenList[i-1]->src_filename,TokenList[i]->src_filename) && lang.require_padding(TokenList[i-1]->back(),TokenList[i]->front()))
+			INC_INFORM(' ');
 
-			if (list_size<=i+1 || TokenList[i]->logical_line.first!=TokenList[i+1]->logical_line.first || strcmp(TokenList[i]->src_filename,TokenList[i+1]->src_filename))
-				INFORM(TokenList[i]->data());
-			else
-				INC_INFORM(TokenList[i]->data());
-			++i;
-			};
-		// dump macros and locked macros
-		INC_INFORM("#define __DATE__ ");
-		INFORM(date_buffer);
-		INC_INFORM("#define __TIME__ ");
-		INFORM(time_buffer);
-		INC_INFORM("#define __TIMESTAMP__ ");
-		INFORM(time_date_buffer);
-		i = 7;
-		while(i<macro_identifier_default_count)
+		if (list_size<=i+1 || TokenList[i]->logical_line.first!=TokenList[i+1]->logical_line.first || strcmp(TokenList[i]->src_filename,TokenList[i+1]->src_filename))
+			INFORM(TokenList[i]->data());
+		else
+			INC_INFORM(TokenList[i]->data());
+		++i;
+		};
+	// dump macros and locked macros
+	INC_INFORM("#define __DATE__ ");
+	INFORM(date_buffer);
+	INC_INFORM("#define __TIME__ ");
+	INFORM(time_buffer);
+	INC_INFORM("#define __TIMESTAMP__ ");
+	INFORM(time_date_buffer);
+	i = 7;
+	while(i<macro_identifier_default_count)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macro_identifier_default[i].first);
+		INC_INFORM(" ");
+		INFORM(macro_identifier_default[i].second);
+		++i;
+		};
+	const size_t object_macro_size = macros_object.size();
+	i = 0;
+	while(i<object_macro_size)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macros_object[i]);
+		if (macros_object_expansion[i])
 			{
-			INC_INFORM("#define ");
-			INC_INFORM(macro_identifier_default[i].first);
 			INC_INFORM(" ");
-			INFORM(macro_identifier_default[i].second);
-			++i;
-			};
-		const size_t object_macro_size = macros_object.size();
-		i = 0;
-		while(i<object_macro_size)
-			{
-			INC_INFORM("#define ");
-			INC_INFORM(macros_object[i]);
-			if (macros_object_expansion[i])
-				{
-				INC_INFORM(" ");
-				INFORM(macros_object_expansion[i]->data());
-				}
-			else
-				INC_INFORM("\n");
-			++i;
+			INFORM(macros_object_expansion[i]->data());
 			}
-		const size_t function_macro_size = macros_function.size();
-		i = 0;
-		while(i<function_macro_size)
+		else
+			INC_INFORM("\n");
+		++i;
+		}
+	const size_t function_macro_size = macros_function.size();
+	i = 0;
+	while(i<function_macro_size)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macros_function[i]);
+		INC_INFORM(macros_function_arglist[i]->data());
+		if (macros_function_expansion[i])
 			{
-			INC_INFORM("#define ");
-			INC_INFORM(macros_function[i]);
-			INC_INFORM(macros_function_arglist[i]->data());
-			if (macros_function_expansion[i])
-				{
-				INC_INFORM(" ");
-				INFORM(macros_function_expansion[i]->data());
-				}
-			else
-				INC_INFORM("\n");
-			++i;
+			INC_INFORM(" ");
+			INFORM(macros_function_expansion[i]->data());
 			}
-		const size_t locked_macro_size = locked_macros.size();
-		i = 0;
-		while(i<locked_macro_size)
-			{
-			INC_INFORM("#pragma ZCC lock ");
-			INFORM(locked_macros[i++]);
-			}
+		else
+			INC_INFORM("\n");
+		++i;
+		}
+	const size_t locked_macro_size = locked_macros.size();
+	i = 0;
+	while(i<locked_macro_size)
+		{
+		INC_INFORM("#pragma ZCC lock ");
+		INFORM(locked_macros[i++]);
 		};
 }
 
@@ -4523,7 +4513,6 @@
 	if (lang.line_lex_find(x.data(),x.size(),"#",sizeof("#")-1,pretokenized) || lang.line_lex_find(x.data(),x.size(),"%:",sizeof("%:")-1,pretokenized))
 		{
 		size_t i = 0;
-		bool created_ws = false;
 		while(pretokenized.size()-1>i)
 			{
 			if (detect_C_stringize_op(x.data()+pretokenized[i].first,pretokenized[i].second))
@@ -4536,7 +4525,6 @@
 					zcc_errors.inc_error();
 					memset(x.c_array()+pretokenized[i].first,' ',pretokenized[i].second);
 					pretokenized.DeleteIdx(i);
-					created_ws = true;
 					continue;
 					}
 				if (   C_TESTFLAG_IDENTIFIER!=pretokenized[i+1].third
@@ -4548,7 +4536,6 @@
 					zcc_errors.inc_error();
 					memset(x.c_array()+pretokenized[i].first,' ',pretokenized[i].second);
 					pretokenized.DeleteIdx(i);
-					created_ws = true;
 					continue;
 					}
 				}

Modified: trunk/CPreproc_pp.cpp
===================================================================
--- trunk/CPreproc_pp.cpp	2011-09-29 20:14:31 UTC (rev 697)
+++ trunk/CPreproc_pp.cpp	2011-09-30 00:00:06 UTC (rev 698)
@@ -718,12 +718,7 @@
 	die_on_pp_errors();
 	if (TokenList.empty())
 		{	//! \todo make this more efficient by providing a global flush-all
-		const char* atom_string = string_from_index(0);
-		while(NULL!=atom_string)
-			{
-			deregister_index(0);
-			atom_string = string_from_index(0);
-			};
+		while(string_from_index(0)) deregister_index(0);
 		return true;
 		}
 
@@ -754,8 +749,7 @@
 	// check for unused atomic strings
 	{
 	size_t x = 0;
-	const char* atom_string = string_from_index(x);
-	while(NULL!=atom_string)
+	while(const char* atom_string = string_from_index(x))
 		{
 		bool string_used = false;
 		i = TokenList.size();
@@ -770,7 +764,6 @@
 			++x;
 		else
 			deregister_index(x);
-		atom_string = string_from_index(x);
 		};
 	}
 	return true;
@@ -3045,6 +3038,7 @@
 	// if we went invalid do not proceed further
 	if (x.flags & INVALID_DIRECTIVE_FLAG) return false;
 
+	// Hmm...intradirective_flush_identifiers_to_zero already called, this is redundant?
 	intradirective_flush_identifiers_to_zero(x,valid_directives[if_directive].second+2);
 
 	// ZCC should actually calculate the control expression completely to 0/1  Error reporting for this isn't particularly compatible with destructive-evaluate.
@@ -3789,18 +3783,16 @@
 
 static void _complete_string_character_literal_define(Token<char>& x, const Token<char>& src, size_t critical_offset, size_t first_token_len,const char delim, const char* const end_error)
 {
-	if (delim!=x.back())
-		{
-		message_header(src);
-		INC_INFORM(ERR_STR);
-		INC_INFORM("#define ");
-		INC_INFORM(src.data()+critical_offset,first_token_len);
-		INC_INFORM(" ends in an unterminated");
-		if ('L'==x.front()) INC_INFORM(" wide");
-		INFORM(end_error);
-		zcc_errors.inc_error();
-		x.append(delim);
-		}
+	if (delim==x.back()) return;
+	message_header(src);
+	INC_INFORM(ERR_STR);
+	INC_INFORM("#define ");
+	INC_INFORM(src.data()+critical_offset,first_token_len);
+	INC_INFORM(" ends in an unterminated");
+	if ('L'==x.front()) INC_INFORM(" wide");
+	INFORM(end_error);
+	zcc_errors.inc_error();
+	x.append(delim);
 }
 
 /*! 
@@ -3918,75 +3910,73 @@
 void
 CPreprocessor::debug_to_stderr(const autovalarray_ptr<Token<char>* >& TokenList,const autovalarray_ptr<char*>& macros_object, const autovalarray_ptr<Token<char>*>& macros_object_expansion, const autovalarray_ptr<char*>& macros_function, const autovalarray_ptr<Token<char>*>& macros_function_arglist, const autovalarray_ptr<Token<char>*>& macros_function_expansion,const autovalarray_ptr<char*>& locked_macros) const
 {	// need whitespace tokens here to force pretty-printing
-	if (debug_mode)
+	if (!debug_mode) return;
+	const size_t list_size = TokenList.size();
+	size_t i = 0;
+	while(i<list_size)
 		{
-		const size_t list_size = TokenList.size();
-		size_t i = 0;
-		while(i<list_size)
-			{
-			if (0<i && TokenList[i-1]->logical_line.first==TokenList[i]->logical_line.first && !strcmp(TokenList[i-1]->src_filename,TokenList[i]->src_filename) && lang.require_padding(TokenList[i-1]->back(),TokenList[i]->front()))
-				INC_INFORM(' ');
+		if (0<i && TokenList[i-1]->logical_line.first==TokenList[i]->logical_line.first && !strcmp(TokenList[i-1]->src_filename,TokenList[i]->src_filename) && lang.require_padding(TokenList[i-1]->back(),TokenList[i]->front()))
+			INC_INFORM(' ');
 
-			if (list_size<=i+1 || TokenList[i]->logical_line.first!=TokenList[i+1]->logical_line.first || strcmp(TokenList[i]->src_filename,TokenList[i+1]->src_filename))
-				INFORM(TokenList[i]->data());
-			else
-				INC_INFORM(TokenList[i]->data());
-			++i;
-			};
-		// dump macros and locked macros
-		INC_INFORM("#define __DATE__ ");
-		INFORM(date_buffer);
-		INC_INFORM("#define __TIME__ ");
-		INFORM(time_buffer);
-		INC_INFORM("#define __TIMESTAMP__ ");
-		INFORM(time_date_buffer);
-		i = 7;
-		while(i<macro_identifier_default_count)
+		if (list_size<=i+1 || TokenList[i]->logical_line.first!=TokenList[i+1]->logical_line.first || strcmp(TokenList[i]->src_filename,TokenList[i+1]->src_filename))
+			INFORM(TokenList[i]->data());
+		else
+			INC_INFORM(TokenList[i]->data());
+		++i;
+		};
+	// dump macros and locked macros
+	INC_INFORM("#define __DATE__ ");
+	INFORM(date_buffer);
+	INC_INFORM("#define __TIME__ ");
+	INFORM(time_buffer);
+	INC_INFORM("#define __TIMESTAMP__ ");
+	INFORM(time_date_buffer);
+	i = 7;
+	while(i<macro_identifier_default_count)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macro_identifier_default[i].first);
+		INC_INFORM(" ");
+		INFORM(macro_identifier_default[i].second);
+		++i;
+		};
+	const size_t object_macro_size = macros_object.size();
+	i = 0;
+	while(i<object_macro_size)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macros_object[i]);
+		if (macros_object_expansion[i])
 			{
-			INC_INFORM("#define ");
-			INC_INFORM(macro_identifier_default[i].first);
 			INC_INFORM(" ");
-			INFORM(macro_identifier_default[i].second);
-			++i;
-			};
-		const size_t object_macro_size = macros_object.size();
-		i = 0;
-		while(i<object_macro_size)
-			{
-			INC_INFORM("#define ");
-			INC_INFORM(macros_object[i]);
-			if (macros_object_expansion[i])
-				{
-				INC_INFORM(" ");
-				INFORM(macros_object_expansion[i]->data());
-				}
-			else
-				INC_INFORM("\n");
-			++i;
+			INFORM(macros_object_expansion[i]->data());
 			}
-		const size_t function_macro_size = macros_function.size();
-		i = 0;
-		while(i<function_macro_size)
+		else
+			INC_INFORM("\n");
+		++i;
+		}
+	const size_t function_macro_size = macros_function.size();
+	i = 0;
+	while(i<function_macro_size)
+		{
+		INC_INFORM("#define ");
+		INC_INFORM(macros_function[i]);
+		INC_INFORM(macros_function_arglist[i]->data());
+		if (macros_function_expansion[i])
 			{
-			INC_INFORM("#define ");
-			INC_INFORM(macros_function[i]);
-			INC_INFORM(macros_function_arglist[i]->data());
-			if (macros_function_expansion[i])
-				{
-				INC_INFORM(" ");
-				INFORM(macros_function_expansion[i]->data());
-				}
-			else
-				INC_INFORM("\n");
-			++i;
+			INC_INFORM(" ");
+			INFORM(macros_function_expansion[i]->data());
 			}
-		const size_t locked_macro_size = locked_macros.size();
-		i = 0;
-		while(i<locked_macro_size)
-			{
-			INC_INFORM("#pragma ZCC lock ");
-			INFORM(locked_macros[i++]);
-			}
+		else
+			INC_INFORM("\n");
+		++i;
+		}
+	const size_t locked_macro_size = locked_macros.size();
+	i = 0;
+	while(i<locked_macro_size)
+		{
+		INC_INFORM("#pragma ZCC lock ");
+		INFORM(locked_macros[i++]);
 		};
 }
 
@@ -4428,7 +4418,6 @@
 	if (lang.line_lex_find(x.data(),x.size(),"#",sizeof("#")-1,pretokenized) || lang.line_lex_find(x.data(),x.size(),"%:",sizeof("%:")-1,pretokenized))
 		{
 		size_t i = 0;
-		bool created_ws = false;
 		while(pretokenized.size()-1>i)
 			{
 			if (detect_C_stringize_op(x.data()+pretokenized[i].first,pretokenized[i].second))
@@ -4441,7 +4430,6 @@
 					zcc_errors.inc_error();
 					memset(x.c_array()+pretokenized[i].first,' ',pretokenized[i].second);
 					pretokenized.DeleteIdx(i);
-					created_ws = true;
 					continue;
 					}
 				if (   C_TESTFLAG_IDENTIFIER!=pretokenized[i+1].third
@@ -4453,7 +4441,6 @@
 					zcc_errors.inc_error();
 					memset(x.c_array()+pretokenized[i].first,' ',pretokenized[i].second);
 					pretokenized.DeleteIdx(i);
-					created_ws = true;
 					continue;
 					}
 				}



From zaimoni at mail.berlios.de  Fri Sep 30 03:17:06 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Fri, 30 Sep 2011 03:17:06 +0200
Subject: [Zcplusplus-commits] r699 - trunk/tests/zcc/decl.C99
Message-ID: <20110930011706.E1FDF481468@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-30 03:17:06 +0200 (Fri, 30 Sep 2011)
New Revision: 699

Modified:
   trunk/tests/zcc/decl.C99/Pass_class_def2.hpp
Log:
update test case

Modified: trunk/tests/zcc/decl.C99/Pass_class_def2.hpp
===================================================================
--- trunk/tests/zcc/decl.C99/Pass_class_def2.hpp	2011-09-30 00:00:06 UTC (rev 698)
+++ trunk/tests/zcc/decl.C99/Pass_class_def2.hpp	2011-09-30 01:17:06 UTC (rev 699)
@@ -473,3 +473,978 @@
 volatile const thread_local static good_test x98;
 
 }	// end namespace test2
+
+// check ZCC compiler extensions
+#if 9<=10000*__ZCC__+100*__ZCC_MINOR__+__ZCC_PATCHLEVEL__
+// the type names should have external linkage in C++
+static_assert(2==__zcc_linkage(good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::good_test),"good_test has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test1),"good_test1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test2),"good_test2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test3),"good_test3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test4),"good_test4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test5),"good_test5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test6),"good_test6 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test7),"good_test7 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test8),"good_test8 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test9),"good_test9 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test10),"good_test10 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test11),"good_test11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test12),"good_test12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test13),"good_test13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test14),"good_test14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test15),"good_test15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test16),"good_test16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test17),"good_test17 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test18),"good_test18 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test19),"good_test19 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test20),"good_test20 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test21),"good_test21 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test22),"good_test22 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test23),"good_test23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test24),"good_test24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test25),"good_test25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test26),"good_test26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test27),"good_test27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test28),"good_test28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test29),"good_test29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test30),"good_test30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test31),"good_test31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test32),"good_test32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test33),"good_test33 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test34),"good_test34 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test35),"good_test35 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test36),"good_test36 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test37),"good_test37 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test38),"good_test38 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test39),"good_test39 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test40),"good_test40 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test41),"good_test41 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test42),"good_test42 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test43),"good_test43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test44),"good_test44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test45),"good_test45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test46),"good_test46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test47),"good_test47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test48),"good_test48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test49),"good_test49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test50),"good_test50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test51),"good_test51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test52),"good_test52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test53),"good_test53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test54),"good_test54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test55),"good_test55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test56),"good_test56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test57),"good_test57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test58),"good_test58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test59),"good_test59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test60),"good_test60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test61),"good_test61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test62),"good_test62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test63),"good_test63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test64),"good_test64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test65),"good_test65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test66),"good_test66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test67),"good_test67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test68),"good_test68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test69),"good_test69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test70),"good_test70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test71),"good_test71 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test72),"good_test72 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test73),"good_test73 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test74),"good_test74 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test75),"good_test75 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test76),"good_test76 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test77),"good_test77 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test78),"good_test78 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test79),"good_test79 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test80),"good_test80 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test81),"good_test81 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test82),"good_test82 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test83),"good_test83 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test84),"good_test84 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test85),"good_test85 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test86),"good_test86 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test87),"good_test87 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::good_test88),"good_test88 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::good_test88),"good_test88 has incorrect linkage");
+
+// check external linkage of variables
+static_assert(2==__zcc_linkage(x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_1),"x_1 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x1),"x1 has incorrect linkage");
+static_assert(2==__zcc_linkage(x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_2),"x_2 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x2),"x2 has incorrect linkage");
+static_assert(2==__zcc_linkage(x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_3),"x_3 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x3),"x3 has incorrect linkage");
+static_assert(2==__zcc_linkage(x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_4),"x_4 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x4),"x4 has incorrect linkage");
+static_assert(2==__zcc_linkage(x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_5),"x_5 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x5),"x5 has incorrect linkage");
+static_assert(2==__zcc_linkage(x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_11),"x_11 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x11),"x11 has incorrect linkage");
+static_assert(2==__zcc_linkage(x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_12),"x_12 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x12),"x12 has incorrect linkage");
+static_assert(2==__zcc_linkage(x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_13),"x_13 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x13),"x13 has incorrect linkage");
+static_assert(2==__zcc_linkage(x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_14),"x_14 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x14),"x14 has incorrect linkage");
+static_assert(2==__zcc_linkage(x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_15),"x_15 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x15),"x15 has incorrect linkage");
+static_assert(2==__zcc_linkage(x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_16),"x_16 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x16),"x16 has incorrect linkage");
+static_assert(2==__zcc_linkage(x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_23),"x_23 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x23),"x23 has incorrect linkage");
+static_assert(2==__zcc_linkage(x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_24),"x_24 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x24),"x24 has incorrect linkage");
+static_assert(2==__zcc_linkage(x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_25),"x_25 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x25),"x25 has incorrect linkage");
+static_assert(2==__zcc_linkage(x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_26),"x_26 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x26),"x26 has incorrect linkage");
+static_assert(2==__zcc_linkage(x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_27),"x_27 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x27),"x27 has incorrect linkage");
+static_assert(2==__zcc_linkage(x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_28),"x_28 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x28),"x28 has incorrect linkage");
+static_assert(2==__zcc_linkage(x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_29),"x_29 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x29),"x29 has incorrect linkage");
+static_assert(2==__zcc_linkage(x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_30),"x_30 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x30),"x30 has incorrect linkage");
+static_assert(2==__zcc_linkage(x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_31),"x_31 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x31),"x31 has incorrect linkage");
+static_assert(2==__zcc_linkage(x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_32),"x_32 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x32),"x32 has incorrect linkage");
+static_assert(2==__zcc_linkage(x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_43),"x_43 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x43),"x43 has incorrect linkage");
+static_assert(2==__zcc_linkage(x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_44),"x_44 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x44),"x44 has incorrect linkage");
+static_assert(2==__zcc_linkage(x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_45),"x_45 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x45),"x45 has incorrect linkage");
+static_assert(2==__zcc_linkage(x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_46),"x_46 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x46),"x46 has incorrect linkage");
+static_assert(2==__zcc_linkage(x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_47),"x_47 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x47),"x47 has incorrect linkage");
+static_assert(2==__zcc_linkage(x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_48),"x_48 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x48),"x48 has incorrect linkage");
+static_assert(2==__zcc_linkage(x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_49),"x_49 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x49),"x49 has incorrect linkage");
+static_assert(2==__zcc_linkage(x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_50),"x_50 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x50),"x50 has incorrect linkage");
+static_assert(2==__zcc_linkage(x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_51),"x_51 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x51),"x51 has incorrect linkage");
+static_assert(2==__zcc_linkage(x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_52),"x_52 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x52),"x52 has incorrect linkage");
+static_assert(2==__zcc_linkage(x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_53),"x_53 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x53),"x53 has incorrect linkage");
+static_assert(2==__zcc_linkage(x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_54),"x_54 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x54),"x54 has incorrect linkage");
+static_assert(2==__zcc_linkage(x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_55),"x_55 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x55),"x55 has incorrect linkage");
+static_assert(2==__zcc_linkage(x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_56),"x_56 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x56),"x56 has incorrect linkage");
+static_assert(2==__zcc_linkage(x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_57),"x_57 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x57),"x57 has incorrect linkage");
+static_assert(2==__zcc_linkage(x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_58),"x_58 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x58),"x58 has incorrect linkage");
+static_assert(2==__zcc_linkage(x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_59),"x_59 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x59),"x59 has incorrect linkage");
+static_assert(2==__zcc_linkage(x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_60),"x_60 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x60),"x60 has incorrect linkage");
+static_assert(2==__zcc_linkage(x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_61),"x_61 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x61),"x61 has incorrect linkage");
+static_assert(2==__zcc_linkage(x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_62),"x_62 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x62),"x62 has incorrect linkage");
+static_assert(2==__zcc_linkage(x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_63),"x_63 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x63),"x63 has incorrect linkage");
+static_assert(2==__zcc_linkage(x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_64),"x_64 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x64),"x64 has incorrect linkage");
+static_assert(2==__zcc_linkage(x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_65),"x_65 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x65),"x65 has incorrect linkage");
+static_assert(2==__zcc_linkage(x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_66),"x_66 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x66),"x66 has incorrect linkage");
+static_assert(2==__zcc_linkage(x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_67),"x_67 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x67),"x67 has incorrect linkage");
+static_assert(2==__zcc_linkage(x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_68),"x_68 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x68),"x68 has incorrect linkage");
+static_assert(2==__zcc_linkage(x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_69),"x_69 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x69),"x69 has incorrect linkage");
+static_assert(2==__zcc_linkage(x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test::x_70),"x_70 has incorrect linkage");
+static_assert(2==__zcc_linkage(test2::x70),"x70 has incorrect linkage");
+static_assert(2==__zcc_linkage(::test2::x70),"x70 has incorrect linkage");
+
+// check internal linkage of variables
+static_assert(1==__zcc_linkage(x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_6),"x_6 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x6),"x6 has incorrect linkage");
+static_assert(1==__zcc_linkage(x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_7),"x_7 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x7),"x7 has incorrect linkage");
+static_assert(1==__zcc_linkage(x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_8),"x_8 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x8),"x8 has incorrect linkage");
+static_assert(1==__zcc_linkage(x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_9),"x_9 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x9),"x9 has incorrect linkage");
+static_assert(1==__zcc_linkage(x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_10),"x_10 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x10),"x10 has incorrect linkage");
+static_assert(1==__zcc_linkage(x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_17),"x_17 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x17),"x17 has incorrect linkage");
+static_assert(1==__zcc_linkage(x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_18),"x_18 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x18),"x18 has incorrect linkage");
+static_assert(1==__zcc_linkage(x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_19),"x_19 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x19),"x19 has incorrect linkage");
+static_assert(1==__zcc_linkage(x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_20),"x_20 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x20),"x20 has incorrect linkage");
+static_assert(1==__zcc_linkage(x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_21),"x_21 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x21),"x21 has incorrect linkage");
+static_assert(1==__zcc_linkage(x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_22),"x_22 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x22),"x22 has incorrect linkage");
+static_assert(1==__zcc_linkage(x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_33),"x_33 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x33),"x33 has incorrect linkage");
+static_assert(1==__zcc_linkage(x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_34),"x_34 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x34),"x34 has incorrect linkage");
+static_assert(1==__zcc_linkage(x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_35),"x_35 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x35),"x35 has incorrect linkage");
+static_assert(1==__zcc_linkage(x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_36),"x_36 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x36),"x36 has incorrect linkage");
+static_assert(1==__zcc_linkage(x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_37),"x_37 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x37),"x37 has incorrect linkage");
+static_assert(1==__zcc_linkage(x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_38),"x_38 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x38),"x38 has incorrect linkage");
+static_assert(1==__zcc_linkage(x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_39),"x_39 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x39),"x39 has incorrect linkage");
+static_assert(1==__zcc_linkage(x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_40),"x_40 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x40),"x40 has incorrect linkage");
+static_assert(1==__zcc_linkage(x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_41),"x_41 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x41),"x41 has incorrect linkage");
+static_assert(1==__zcc_linkage(x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_42),"x_42 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x42),"x42 has incorrect linkage");
+static_assert(1==__zcc_linkage(x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_71),"x_71 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x71),"x71 has incorrect linkage");
+static_assert(1==__zcc_linkage(x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_72),"x_72 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x72),"x72 has incorrect linkage");
+static_assert(1==__zcc_linkage(x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_73),"x_73 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x73),"x73 has incorrect linkage");
+static_assert(1==__zcc_linkage(x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_74),"x_74 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x74),"x74 has incorrect linkage");
+static_assert(1==__zcc_linkage(x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_75),"x_75 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x75),"x75 has incorrect linkage");
+static_assert(1==__zcc_linkage(x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_76),"x_76 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x76),"x76 has incorrect linkage");
+static_assert(1==__zcc_linkage(x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_77),"x_77 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x77),"x77 has incorrect linkage");
+static_assert(1==__zcc_linkage(x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_78),"x_78 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x78),"x78 has incorrect linkage");
+static_assert(1==__zcc_linkage(x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_79),"x_79 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x79),"x79 has incorrect linkage");
+static_assert(1==__zcc_linkage(x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_80),"x_80 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x80),"x80 has incorrect linkage");
+static_assert(1==__zcc_linkage(x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_81),"x_81 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x81),"x81 has incorrect linkage");
+static_assert(1==__zcc_linkage(x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_82),"x_82 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x82),"x82 has incorrect linkage");
+static_assert(1==__zcc_linkage(x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_83),"x_83 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x83),"x83 has incorrect linkage");
+static_assert(1==__zcc_linkage(x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_84),"x_84 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x84),"x84 has incorrect linkage");
+static_assert(1==__zcc_linkage(x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_85),"x_85 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x85),"x85 has incorrect linkage");
+static_assert(1==__zcc_linkage(x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_86),"x_86 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x86),"x86 has incorrect linkage");
+static_assert(1==__zcc_linkage(x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_87),"x_87 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x87),"x87 has incorrect linkage");
+static_assert(1==__zcc_linkage(x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_88),"x_88 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x88),"x88 has incorrect linkage");
+static_assert(1==__zcc_linkage(x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_89),"x_89 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x89),"x89 has incorrect linkage");
+static_assert(1==__zcc_linkage(x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_90),"x_90 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x90),"x90 has incorrect linkage");
+static_assert(1==__zcc_linkage(x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_91),"x_91 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x91),"x91 has incorrect linkage");
+static_assert(1==__zcc_linkage(x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_92),"x_92 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x92),"x92 has incorrect linkage");
+static_assert(1==__zcc_linkage(x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_93),"x_93 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x93),"x93 has incorrect linkage");
+static_assert(1==__zcc_linkage(x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_94),"x_94 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x94),"x94 has incorrect linkage");
+static_assert(1==__zcc_linkage(x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_95),"x_95 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x95),"x95 has incorrect linkage");
+static_assert(1==__zcc_linkage(x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_96),"x_96 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x96),"x96 has incorrect linkage");
+static_assert(1==__zcc_linkage(x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_97),"x_97 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x97),"x97 has incorrect linkage");
+static_assert(1==__zcc_linkage(x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test::x_98),"x_98 has incorrect linkage");
+static_assert(1==__zcc_linkage(test2::x98),"x98 has incorrect linkage");
+static_assert(1==__zcc_linkage(::test2::x98),"x98 has incorrect linkage");
+#endif



From zaimoni at mail.berlios.de  Fri Sep 30 04:03:15 2011
From: zaimoni at mail.berlios.de (zaimoni at mail.berlios.de)
Date: Fri, 30 Sep 2011 04:03:15 +0200
Subject: [Zcplusplus-commits] r700 - trunk
Message-ID: <20110930020315.D32C3481468@sheep.berlios.de>

Author: zaimoni
Date: 2011-09-30 04:03:15 +0200 (Fri, 30 Sep 2011)
New Revision: 700

Modified:
   trunk/CSupport.cpp
   trunk/CSupport.cpp.in
   trunk/CSupport_pp.cpp
Log:
stage 3: lines of code reduction

Modified: trunk/CSupport.cpp
===================================================================
--- trunk/CSupport.cpp	2011-09-30 01:17:06 UTC (rev 699)
+++ trunk/CSupport.cpp	2011-09-30 02:03:15 UTC (rev 700)
@@ -3120,15 +3120,13 @@
 static void simple_error(parse_tree& src, const char* const err_str)
 {
 	assert(err_str && *err_str);
-	if (!(parse_tree::INVALID & src.flags))
-		{
-		src.flags |= parse_tree::INVALID;
-		message_header(src.index_tokens[0]);
-		INC_INFORM(ERR_STR);
-		INC_INFORM(src);
-		INFORM(err_str);
-		zcc_errors.inc_error();
-		};
+	if (parse_tree::INVALID & src.flags) return;
+	src.flags |= parse_tree::INVALID;
+	message_header(src.index_tokens[0]);
+	INC_INFORM(ERR_STR);
+	INC_INFORM(src);
+	INFORM(err_str);
+	zcc_errors.inc_error();
 }
 
 /* deal with following type catalog
@@ -6832,8 +6830,7 @@
 
 static size_t _C99_failover_sizeof(parse_tree& src,const type_system& types)
 {
-	const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index);
-	if (tmp)
+	if (const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index))
 		{
 		if (0==src.data<2>()->type_code.pointer_power && is_noticed_enumerator(src,types))
 			return _eval_sizeof_core_type(C_TYPE::INT); // type is int per C99 6.7.2.2p3
@@ -6861,8 +6858,7 @@
 {
 	if (C_TYPE::WCHAR_T==src.data<2>()->type_code.base_type_index)
 		return _eval_sizeof_core_type(unsigned_type_from_machine_type(target_machine->UNICODE_wchar_t()));
-	const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index);
-	if (tmp)
+	if (const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index))
 		{
 		if (0==src.data<2>()->type_code.pointer_power && is_noticed_enumerator(*src.data<2>(),types))
 			{
@@ -11750,8 +11746,7 @@
 {
 	if (x.own_index_token<0>())
 		{
-		const char* const tmp = is_substring_registered(x.index_tokens[0].token.first,x.index_tokens[0].token.second);
-		if (tmp)
+		if (const char* const tmp = is_substring_registered(x.index_tokens[0].token.first,x.index_tokens[0].token.second))
 			{
 			assert(tmp!=x.index_tokens[0].token.first);
 			free(const_cast<char*>(x.index_tokens[0].token.first));
@@ -11761,8 +11756,7 @@
 		}
 	if (x.own_index_token<1>())
 		{
-		const char* const tmp = is_substring_registered(x.index_tokens[1].token.first,x.index_tokens[1].token.second);
-		if (tmp)
+		if (const char* const tmp = is_substring_registered(x.index_tokens[1].token.first,x.index_tokens[1].token.second))
 			{
 			assert(tmp!=x.index_tokens[1].token.first);
 			free(const_cast<char*>(x.index_tokens[1].token.first));

Modified: trunk/CSupport.cpp.in
===================================================================
--- trunk/CSupport.cpp.in	2011-09-30 01:17:06 UTC (rev 699)
+++ trunk/CSupport.cpp.in	2011-09-30 02:03:15 UTC (rev 700)
@@ -3177,15 +3177,13 @@
 static void simple_error(parse_tree& src, const char* const err_str)
 {
 	assert(err_str && *err_str);
-	if (!(parse_tree::INVALID & src.flags))
-		{
-		src.flags |= parse_tree::INVALID;
-		message_header(src.index_tokens[0]);
-		INC_INFORM(ERR_STR);
-		INC_INFORM(src);
-		INFORM(err_str);
-		zcc_errors.inc_error();
-		};
+	if (parse_tree::INVALID & src.flags) return;
+	src.flags |= parse_tree::INVALID;
+	message_header(src.index_tokens[0]);
+	INC_INFORM(ERR_STR);
+	INC_INFORM(src);
+	INFORM(err_str);
+	zcc_errors.inc_error();
 }
 #/*cut-cpp*/
 
@@ -6930,8 +6928,7 @@
 
 static size_t _C99_failover_sizeof(parse_tree& src,const type_system& types)
 {
-	const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index);
-	if (tmp)
+	if (const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index))
 		{
 		if (0==src.data<2>()->type_code.pointer_power && is_noticed_enumerator(src,types))
 			return _eval_sizeof_core_type(C_TYPE::INT); // type is int per C99 6.7.2.2p3
@@ -6959,8 +6956,7 @@
 {
 	if (C_TYPE::WCHAR_T==src.data<2>()->type_code.base_type_index)
 		return _eval_sizeof_core_type(unsigned_type_from_machine_type(target_machine->UNICODE_wchar_t()));
-	const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index);
-	if (tmp)
+	if (const enum_def* const tmp = types.get_enum_def(src.data<2>()->type_code.base_type_index))
 		{
 		if (0==src.data<2>()->type_code.pointer_power && is_noticed_enumerator(*src.data<2>(),types))
 			{
@@ -11896,8 +11892,7 @@
 {
 	if (x.own_index_token<0>())
 		{
-		const char* const tmp = is_substring_registered(x.index_tokens[0].token.first,x.index_tokens[0].token.second);
-		if (tmp)
+		if (const char* const tmp = is_substring_registered(x.index_tokens[0].token.first,x.index_tokens[0].token.second))
 			{
 			assert(tmp!=x.index_tokens[0].token.first);
 			free(const_cast<char*>(x.index_tokens[0].token.first));
@@ -11907,8 +11902,7 @@
 		}
 	if (x.own_index_token<1>())
 		{
-		const char* const tmp = is_substring_registered(x.index_tokens[1].token.first,x.index_tokens[1].token.second);
-		if (tmp)
+		if (const char* const tmp = is_substring_registered(x.index_tokens[1].token.first,x.index_tokens[1].token.second))
 			{
 			assert(tmp!=x.index_tokens[1].token.first);
 			free(const_cast<char*>(x.index_tokens[1].token.first));

Modified: trunk/CSupport_pp.cpp
===================================================================
--- trunk/CSupport_pp.cpp	2011-09-30 01:17:06 UTC (rev 699)
+++ trunk/CSupport_pp.cpp	2011-09-30 02:03:15 UTC (rev 700)
@@ -2890,15 +2890,13 @@
 static void simple_error(parse_tree& src, const char* const err_str)
 {
 	assert(err_str && *err_str);
-	if (!(parse_tree::INVALID & src.flags))
-		{
-		src.flags |= parse_tree::INVALID;
-		message_header(src.index_tokens[0]);
-		INC_INFORM(ERR_STR);
-		INC_INFORM(src);
-		INFORM(err_str);
-		zcc_errors.inc_error();
-		};
+	if (parse_tree::INVALID & src.flags) return;
+	src.flags |= parse_tree::INVALID;
+	message_header(src.index_tokens[0]);
+	INC_INFORM(ERR_STR);
+	INC_INFORM(src);
+	INFORM(err_str);
+	zcc_errors.inc_error();
 }
 
 //! \todo generalize -- function pointer parameter target, functor target



